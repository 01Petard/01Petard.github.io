<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花火の红玉宫</title>
  
  <subtitle>早安每一天！</subtitle>
  <link href="https://01petard.github.io/atom.xml" rel="self"/>
  
  <link href="https://01petard.github.io/"/>
  <updated>2024-11-11T14:36:24.000Z</updated>
  <id>https://01petard.github.io/</id>
  
  <author>
    <name>伪音花火</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ElementUI实战教程</title>
    <link href="https://01petard.github.io/2024/11/11/ElementUI%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"/>
    <id>https://01petard.github.io/2024/11/11/ElementUI%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/</id>
    <published>2024-11-11T14:17:00.000Z</published>
    <updated>2024-11-11T14:36:24.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Element-UI-实战教程"><a href="#Element-UI-实战教程" class="headerlink" title="Element UI 实战教程"></a>Element UI 实战教程</h1><ul><li><p>记录：泽校</p></li><li><p>作者B站：<a href="https://space.bilibili.com/352224540">编程不良人</a></p></li><li><p>资料：<a href="http://www.baizhiedu.xin/">http://www.baizhiedu.xin</a></p></li></ul><hr><h2 id="1-Element-UI-引言"><a href="#1-Element-UI-引言" class="headerlink" title="1.Element UI 引言"></a>1.Element UI 引言</h2><p>官网: <a href="https://element.eleme.io/#/zh-CN">https://element.eleme.io/#/zh-CN</a></p><h3 id="1-1-官方定义"><a href="#1-1-官方定义" class="headerlink" title="1.1 官方定义"></a>1.1 官方定义</h3><p><code>网站快速成型工具</code> 和 <code>桌面端组件库</code></p><h3 id="1-2-定义"><a href="#1-2-定义" class="headerlink" title="1.2 定义"></a>1.2 定义</h3><p>element ui 就是基于vue的一个ui框架,该框架基于vue开发了很多相关组件,方便我们快速开发页面。</p><h3 id="1-3-由来"><a href="#1-3-由来" class="headerlink" title="1.3 由来"></a>1.3 由来</h3><p>饿了么前端团队 基于vue进行开发并且进行了开源  element ui 中提供全部都是封装好组件。</p><hr><h2 id="2-安装Element-UI"><a href="#2-安装Element-UI" class="headerlink" title="2.安装Element UI"></a>2.安装Element UI</h2><h3 id="2-1通过vue脚手架创建项目"><a href="#2-1通过vue脚手架创建项目" class="headerlink" title="2.1通过vue脚手架创建项目"></a>2.1通过vue脚手架创建项目</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack <span class="title function_">element</span>(项目名)</span><br></pre></td></tr></table></figure><h3 id="2-2在vue脚手架项目中安装elementui"><a href="#2-2在vue脚手架项目中安装elementui" class="headerlink" title="2.2在vue脚手架项目中安装elementui"></a>2.2在vue脚手架项目中安装elementui</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span>下载elementui的依赖</span><br><span class="line">npm i element-ui -S</span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span>指定当前项目中使用elementui</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//在vue脚手架中使用elementui</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="3-按钮组件-示例"><a href="#3-按钮组件-示例" class="headerlink" title="3.按钮组件(示例)"></a>3.按钮组件(示例)</h2> <img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411112209228.png" alt="image-20200503155535505" style="zoom: 80%;" /><h4 id="3-1-默认样式按钮"><a href="#3-1-默认样式按钮" class="headerlink" title="3.1 默认样式按钮"></a>3.1 默认样式按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-简洁按钮"><a href="#3-2-简洁按钮" class="headerlink" title="3.2 简洁按钮"></a>3.2 简洁按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">plain</span>&gt;</span>朴素按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">plain</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">plain</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> <span class="attr">plain</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">plain</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">plain</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-圆角按钮"><a href="#3-3-圆角按钮" class="headerlink" title="3.3 圆角按钮"></a>3.3 圆角按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">round</span>&gt;</span>圆角按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">round</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">round</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> <span class="attr">round</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">round</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">round</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-4-图标按钮"><a href="#3-4-图标按钮" class="headerlink" title="3.4 图标按钮"></a>3.4 图标按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-search&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-check&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-message&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-star-off&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-按钮组件的详细使用"><a href="#4-按钮组件的详细使用" class="headerlink" title="4.按钮组件的详细使用"></a>4.按钮组件的详细使用</h2><p><code>总结:日后使用element ui的相关组件时需要注意的是 所有组件都是el-组件名称开头</code></p><h3 id="4-1创建按钮"><a href="#4-1创建按钮" class="headerlink" title="4.1创建按钮"></a>4.1创建按钮</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-按钮属性使用"><a href="#4-2-按钮属性使用" class="headerlink" title="4.2 按钮属性使用"></a>4.2 按钮属性使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">属性名</span>=<span class="string">属性值</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">size</span>=<span class="string">&quot;medium&quot;</span> <span class="attr">plain</span>=<span class="string">true</span> <span class="attr">round</span> <span class="attr">circle</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-loading&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>总结:在elementui中所有组件的属性全部写在组件标签上</code></p><h3 id="4-3-按钮组使用"><a href="#4-3-按钮组使用" class="headerlink" title="4.3 按钮组使用"></a>4.3 按钮组使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-back&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-right&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button-group</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注意:</code></p><ul><li>在element ui中所有组件都是 <code>el-组件名称</code> 方式进行命名</li><li>在element ui中组件的属性使用<code>都是直接将属性名=属性值方式写在对应的组件标签上</code></li></ul><hr><h2 id="5-Link-文字链接组件"><a href="#5-Link-文字链接组件" class="headerlink" title="5.Link 文字链接组件"></a>5.Link 文字链接组件</h2><h3 id="5-1-文字链接组件的创建"><a href="#5-1-文字链接组件的创建" class="headerlink" title="5.1 文字链接组件的创建"></a>5.1 文字链接组件的创建</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-link</span>&gt;</span>默认链接<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-文字链接组件的属性的使用"><a href="#5-2-文字链接组件的属性的使用" class="headerlink" title="5.2 文字链接组件的属性的使用"></a>5.2 文字链接组件的属性的使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-link</span>  <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> &gt;</span>默认链接<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span><span class="attr">:underline</span>=<span class="string">&quot;false&quot;</span>&gt;</span>默认链接<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">disabled</span>&gt;</span>默认链接<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-platform-eleme&quot;</span>&gt;</span>默认链接<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>默认链接<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>默认链接<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-Layout-栅格-布局组件的使用"><a href="#6-Layout-栅格-布局组件的使用" class="headerlink" title="6.Layout (栅格)布局组件的使用"></a>6.Layout (栅格)布局组件的使用</h2><p><code>通过基础的 24 分栏，迅速简便地创建布局</code></p><p><code>在element ui中布局组件将页面划分为多个行row,每行最多分为24栏(列)</code></p><h3 id="6-1-使用Layout组件"><a href="#6-1-使用Layout组件" class="headerlink" title="6.1 使用Layout组件"></a>6.1 使用Layout组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span>占用8份<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span>占用8份<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span>占用8份<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注意:</code></p><ul><li>在一个布局组件中 是由 <code>row</code> 和 <code>col</code> 组合而成</li><li>在使用时要区分 <code>row属性</code> 和 <code>col属性</code></li></ul><h3 id="6-2-属性的使用"><a href="#6-2-属性的使用" class="headerlink" title="6.2 属性的使用"></a>6.2 属性的使用</h3><ul><li><p>行属性使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;50&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;span&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px red solid;&quot;</span>&gt;</span>占用4份<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px red solid;&quot;</span>&gt;</span>占用8份<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px red solid;&quot;</span>&gt;</span>占用3份<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;9&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px red solid;&quot;</span>&gt;</span>占用9份<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>列属性的使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;9&quot;</span> <span class="attr">:psuh</span>=<span class="string">&quot;3&quot;</span> <span class="attr">xs</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px blue solid;&quot;</span>&gt;</span>我是占用12分<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px blue solid;&quot;</span>&gt;</span>我是占用6分<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="7-Container-布局容器组件"><a href="#7-Container-布局容器组件" class="headerlink" title="7.Container 布局容器组件"></a>7.Container 布局容器组件</h2><h3 id="7-1-创建布局容器"><a href="#7-1-创建布局容器" class="headerlink" title="7.1 创建布局容器"></a>7.1 创建布局容器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-容器中包含的子元素"><a href="#7-2-容器中包含的子元素" class="headerlink" title="7.2 容器中包含的子元素"></a>7.2 容器中包含的子元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-header</span>&gt;</span>：顶栏容器。</span><br><span class="line"><span class="tag">&lt;<span class="name">el-aside</span>&gt;</span>：侧边栏容器。</span><br><span class="line"><span class="tag">&lt;<span class="name">el-main</span>&gt;</span>：主要区域容器。</span><br><span class="line"><span class="tag">&lt;<span class="name">el-footer</span>&gt;</span>：底栏容器。</span><br></pre></td></tr></table></figure><h3 id="7-3-容器的嵌套使用"><a href="#7-3-容器的嵌套使用" class="headerlink" title="7.3 容器的嵌套使用"></a>7.3 容器的嵌套使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--header--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-header</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--容器嵌套使用--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aside--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-aside</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是菜单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--main--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-main</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是中心内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-footer</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是页脚<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-4-水平容器"><a href="#7-4-水平容器" class="headerlink" title="7.4 水平容器"></a>7.4 水平容器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-container</span> <span class="attr">direction</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--header--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-header</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aside--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-aside</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是菜单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--main--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-main</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是中心内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-footer</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是页脚<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注意:当子元素中没有有 el-header 或 el-footer 时容器排列为水平</code></p><h3 id="7-5-垂直容器"><a href="#7-5-垂直容器" class="headerlink" title="7.5 垂直容器"></a>7.5 垂直容器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-container</span> <span class="attr">direction</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--header--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-header</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aside--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-aside</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是菜单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--main--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-main</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是中心内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--footer--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-footer</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是页脚<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="8-Form相关组件"><a href="#8-Form相关组件" class="headerlink" title="8.Form相关组件"></a>8.Form相关组件</h2><h3 id="8-1-Radio单选按钮"><a href="#8-1-Radio单选按钮" class="headerlink" title="8.1 Radio单选按钮"></a>8.1 Radio单选按钮</h3><h4 id="1-创建Radio按钮"><a href="#1-创建Radio按钮" class="headerlink" title="1.创建Radio按钮"></a>1.创建Radio按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;label&quot;</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;label&quot;</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Radio&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">label</span>:<span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注意:在使用radio单选按钮是至少加入v-model和label两个属性</code></p><h4 id="2-Radio按钮属性的使用"><a href="#2-Radio按钮属性的使用" class="headerlink" title="2.Radio按钮属性的使用"></a>2.Radio按钮属性的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;label&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">disabled</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;label&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">border</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;label&quot;</span> <span class="attr">border</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;label&quot;</span> <span class="attr">border</span> <span class="attr">size</span>=<span class="string">&quot;medium&quot;</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>总结:属性使用还是直接卸载对应的组件标签上以 属性名=属性值 方式使用</code></p><h4 id="3-Radio事件的使用"><a href="#3-Radio事件的使用" class="headerlink" title="3.Radio事件的使用"></a>3.Radio事件的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;label&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;aa&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;label&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;aa&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">border</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Radio&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">label</span>:<span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">aa</span>(<span class="params"></span>)&#123; <span class="comment">//定义的事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">label</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>总结:</code></p><ul><li>​事件的使用也是和属性使用是一致都是直接写在对应的组件标签上</li><li>事件在使用时必须使用Vue中绑定时间方式进行使用如 @事件名&#x3D;事件处理函数(绑在在vue组件中对应函数)</li></ul><h4 id="4-radio按钮组"><a href="#4-radio按钮组" class="headerlink" title="4.radio按钮组"></a>4.radio按钮组</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">v-model</span>=<span class="string">&quot;radio&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">:label</span>=<span class="string">&quot;3&quot;</span>&gt;</span>备选项3<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">:label</span>=<span class="string">&quot;6&quot;</span>&gt;</span>备选项6<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">:label</span>=<span class="string">&quot;9&quot;</span>&gt;</span>备选项9<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;Radio&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">radio</span>: <span class="number">6</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="8-2-checkbox组件"><a href="#8-2-checkbox组件" class="headerlink" title="8.2 checkbox组件"></a>8.2 checkbox组件</h3><h4 id="1-创建checkbox组件"><a href="#1-创建checkbox组件" class="headerlink" title="1.创建checkbox组件"></a>1.创建checkbox组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-属性使用"><a href="#2-属性使用" class="headerlink" title="2.属性使用"></a>2.属性使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>  <span class="attr">disabled</span> <span class="attr">true-label</span>=<span class="string">&quot;北京&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">checked</span> <span class="attr">border</span> <span class="attr">true-label</span>=<span class="string">&quot;上海&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">true-label</span>=<span class="string">&quot;天津&quot;</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-事件使用"><a href="#3-事件使用" class="headerlink" title="3.事件使用"></a>3.事件使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-checkbox</span> @<span class="attr">change</span>=<span class="string">&quot;aa&quot;</span><span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>  <span class="attr">true-label</span>=<span class="string">&quot;上海&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;aa&quot;</span> <span class="attr">true-label</span>=<span class="string">&quot;天津&quot;</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Checkbox&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">checked</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">aa</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">checked</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-复选框组的使用"><a href="#4-复选框组的使用" class="headerlink" title="4.复选框组的使用"></a>4.复选框组的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-checkbox-group</span> @<span class="attr">change</span>=<span class="string">&quot;bb&quot;</span> <span class="attr">:min</span>=<span class="string">&quot;1&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkList&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;复选框 A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;复选框 B&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;复选框 C&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;禁用&quot;</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;选中且禁用&quot;</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-checkbox-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Checkbox&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">checked</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">checkList</span>:[],</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">aa</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">checked</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">bb</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">checkList</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="8-3-Input-输入框组件"><a href="#8-3-Input-输入框组件" class="headerlink" title="8.3 Input 输入框组件"></a>8.3 Input 输入框组件</h3><h4 id="1-创建Input组件"><a href="#1-创建Input组件" class="headerlink" title="1.创建Input组件"></a>1.创建Input组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Input&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;xiaochen&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-常用属性"><a href="#2-常用属性" class="headerlink" title="2.常用属性"></a>2.常用属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> <span class="attr">disabled</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;price&quot;</span> <span class="attr">:maxlength</span>=<span class="string">&quot;10&quot;</span> <span class="attr">show-word-limit</span> <span class="attr">:minlength</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">prefix-icon</span>=<span class="string">&quot;el-icon-user-solid&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">clearable</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">suffix-icon</span>=<span class="string">&quot;el-icon-star-off&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">show-password</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">clearable</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Input&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">restaurants</span>: [],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">state1</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">state2</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;xiaochen&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">price</span>:<span class="number">0.0</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">username</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">password</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-事件使用-1"><a href="#3-事件使用-1" class="headerlink" title="3.事件使用"></a>3.事件使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> @<span class="attr">blur</span>=<span class="string">&quot;aaa&quot;</span> @<span class="attr">focus</span>=<span class="string">&quot;bbb&quot;</span> @<span class="attr">clear</span>=<span class="string">&quot;clears&quot;</span> <span class="attr">clearable</span> @<span class="attr">input</span>=<span class="string">&quot;ccc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Input&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">restaurants</span>: [],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">state1</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">state2</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;xiaochen&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">price</span>:<span class="number">0.0</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">username</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">password</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">aaa</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失去焦点&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                ;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">bbb</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取焦点&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">ccc</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;改变:&quot;</span>+value);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">clears</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;清楚&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-方法的使用"><a href="#4-方法的使用" class="headerlink" title="4.方法的使用"></a>4.方法的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>方法的使用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;inputs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;focusInputs&quot;</span>&gt;</span>focus方法<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;blurInputs&quot;</span>&gt;</span>blur方法<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Input&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//调用focus方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">focusInputs</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inputs</span>.<span class="title function_">focus</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//调用失去焦点方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">blurInputs</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inputs</span>.<span class="title function_">blur</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>总结</code></p><ul><li>​在使用组件的方法时需要在对应的组件中加入 <code>ref=&quot;组件别名&quot;</code></li><li>在调用方法时直接使用 <code>this.$refs.组件别名.方法名()</code></li></ul><blockquote><p> <code>注意:在elementui中所有组件 都存在 属性 事件 和方法</code></p><p><code>属性:</code>直接写在对应的组件标签上 使用方式:<code>属性名=属性值</code>方式</p><p><code>事件</code>: 直接使用vue绑定事件方式写在对应的组件标签上 使用方式:<code>@事件名=vue中事件处理函数</code></p><p><code>方法</code>: 1.在对应组件标签上使用<code>ref=组件别名</code> 2.<code>通过使用this.$refs.组件别名.方法名()</code>进行调用</p></blockquote><h3 id="8-4-Select选择器组件的使用"><a href="#8-4-Select选择器组件的使用" class="headerlink" title="8.4 Select选择器组件的使用"></a>8.4 Select选择器组件的使用</h3><h4 id="1-组件创建"><a href="#1-组件创建" class="headerlink" title="1.组件创建"></a>1.组件创建</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.数据写死在页面上</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;cityName&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-option</span> <span class="attr">value</span>=<span class="string">&quot;北京&quot;</span>&gt;</span></span>北京<span class="language-xml"><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-option</span> <span class="attr">value</span>=<span class="string">&quot;天津&quot;</span>&gt;</span></span>天津<span class="language-xml"><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="code">注意:1.要求下拉列表中必须存在option的value属性值 2.要求select中必须使用v-model进行数据绑定</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 2.如何动态获取数据</span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;option in options&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;option.name&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;option.id&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;option.id&quot;</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="code">      export default &#123;</span></span><br><span class="line"><span class="code">          name: &quot;Select&quot;,</span></span><br><span class="line"><span class="code">          data()&#123;</span></span><br><span class="line"><span class="code">              return&#123;</span></span><br><span class="line"><span class="code">                  options:[</span></span><br><span class="line"><span class="code">                      &#123;id:&#x27;1&#x27;,name:&quot;研发部&quot;&#125;,</span></span><br><span class="line"><span class="code">                      &#123;id:&#x27;2&#x27;,name:&quot;小卖部&quot;&#125;,</span></span><br><span class="line"><span class="code">                      &#123;id:&#x27;3&#x27;,name:&quot;小米部&quot;&#125;,</span></span><br><span class="line"><span class="code">                  ]</span></span><br><span class="line"><span class="code">              &#125;</span></span><br><span class="line"><span class="code">          &#125;,</span></span><br><span class="line"><span class="code">      &#125;</span></span><br><span class="line"><span class="code">  &lt;/script&gt;</span></span><br><span class="line"><span class="code">  </span></span><br><span class="line"><span class="code"># 3.获取下拉列表选中数据</span></span><br><span class="line"><span class="code"> &lt;el-select v-model=&quot;cityId&quot; multiple clearable&gt;</span></span><br><span class="line"><span class="code">        &lt;el-option v-for=&quot;option in options&quot; :label=&quot;option.name&quot; :value=&quot;option.id&quot; :key=&quot;option.id&quot;&gt;&lt;/el-option&gt;</span></span><br><span class="line"><span class="code">&lt;/el-select&gt;</span></span><br><span class="line"><span class="code">&lt;script&gt;</span></span><br><span class="line"><span class="code">    export default &#123;</span></span><br><span class="line"><span class="code">        name: &quot;Select&quot;,</span></span><br><span class="line"><span class="code">        data()&#123;</span></span><br><span class="line"><span class="code">            return&#123;</span></span><br><span class="line"><span class="code">                options:[</span></span><br><span class="line"><span class="code">                    &#123;id:&#x27;1&#x27;,name:&quot;研发部&quot;&#125;,</span></span><br><span class="line"><span class="code">                    &#123;id:&#x27;2&#x27;,name:&quot;小卖部&quot;&#125;,</span></span><br><span class="line"><span class="code">                    &#123;id:&#x27;3&#x27;,name:&quot;小米部&quot;&#125;,</span></span><br><span class="line"><span class="code">                ],</span></span><br><span class="line"><span class="code">                cityId:&#x27;&#x27;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;,</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-属性使用-1"><a href="#2-属性使用-1" class="headerlink" title="2.属性使用"></a>2.属性使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;cityId&quot;</span> <span class="attr">multiple</span> <span class="attr">clearable</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-事件的使用"><a href="#3-事件的使用" class="headerlink" title="3.事件的使用"></a>3.事件的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;cityId&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">multiple</span> <span class="attr">clearable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;option in options&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;option.name&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;option.id&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;option.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Select&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">options</span>:[</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,<span class="attr">name</span>:<span class="string">&quot;研发部&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;2&#x27;</span>,<span class="attr">name</span>:<span class="string">&quot;小卖部&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;3&#x27;</span>,<span class="attr">name</span>:<span class="string">&quot;小米部&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                ],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">cityId</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">cityName</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">aaa</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-方法的使用-1"><a href="#4-方法的使用-1" class="headerlink" title="4.方法的使用"></a>4.方法的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.给组件通过ref起别名并绑定到vue实例中</span><br><span class="line"> <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">ref</span>=<span class="string">&quot;selects&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;cityId&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">multiple</span> <span class="attr">clearable</span>&gt;</span></span><br><span class="line">       ....</span><br><span class="line"> <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">2.调用方法</span><br><span class="line"> this.$refs.selects.focus();//方法调用</span><br></pre></td></tr></table></figure><hr><h3 id="8-5-Switch-开关组件"><a href="#8-5-Switch-开关组件" class="headerlink" title="8.5 Switch 开关组件"></a>8.5 Switch 开关组件</h3><h4 id="1-Switch组件的创建"><a href="#1-Switch组件的创建" class="headerlink" title="1.Switch组件的创建"></a>1.Switch组件的创建</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;Switchs&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">value</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-属性使用-2"><a href="#2-属性使用-2" class="headerlink" title="2.属性使用"></a>2.属性使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span> <span class="attr">active-text</span>=<span class="string">&quot;打开&quot;</span> <span class="attr">active-color</span>=<span class="string">&quot;#13ce66&quot;</span> <span class="attr">inactive-color</span>=<span class="string">&quot;#ff4949&quot;</span> <span class="attr">:active-</span></span></span><br><span class="line"><span class="tag">           <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:inactive-value</span>=<span class="string">&quot;false&quot;</span> <span class="attr">inactive-text</span>=<span class="string">&quot;关闭&quot;</span> <span class="attr">:width</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-事件使用-2"><a href="#3-事件使用-2" class="headerlink" title="3.事件使用"></a>3.事件使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Switchs&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">value</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">aaa</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-方法使用"><a href="#4-方法使用" class="headerlink" title="4.方法使用"></a>4.方法使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">ref</span>=<span class="string">&quot;sw&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">active-text</span>=<span class="string">&quot;打开&quot;</span> <span class="attr">active-color</span>=<span class="string">&quot;#13ce66&quot;</span> <span class="attr">inactive-color</span>=<span class="string">&quot;#ff4949&quot;</span> <span class="attr">:active-value</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:inactive-value</span>=<span class="string">&quot;false&quot;</span> <span class="attr">inactive-text</span>=<span class="string">&quot;关闭&quot;</span> <span class="attr">:width</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;bbb&quot;</span>&gt;</span>调用方法<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Switchs&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">value</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        ,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">aaa</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">bbb</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">sw</span>.<span class="title function_">focus</span>();<span class="comment">//方法调用</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="8-6-DatePicker组件"><a href="#8-6-DatePicker组件" class="headerlink" title="8.6 DatePicker组件"></a>8.6 DatePicker组件</h3><h4 id="1-创建"><a href="#1-创建" class="headerlink" title="1.创建"></a>1.创建</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">v-model</span>=<span class="string">&quot;createDate&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-属性的使用"><a href="#2-属性的使用" class="headerlink" title="2.属性的使用"></a>2.属性的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">&quot;createDate&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:editable</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:clearable</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">&quot;请输入创建时间&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;daterange&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">start-placeholder</span>=<span class="string">&quot;生产时间&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">end-placeholder</span>=<span class="string">&quot;过期时间&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">format</span>=<span class="string">&quot;yyyy/MM/dd&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-Picker-Options-和-Shortcuts使用"><a href="#3-Picker-Options-和-Shortcuts使用" class="headerlink" title="3.Picker Options 和 Shortcuts使用"></a>3.Picker Options 和 Shortcuts使用</h4><ul><li><strong>Shortcuts:</strong> 用来增加日期组件的快捷面板</li><li><strong>Picker Options:</strong> 用来对日期控件做自定义配置</li></ul><h5 id="3-1-Shortcuts使用"><a href="#3-1-Shortcuts使用" class="headerlink" title="3.1 Shortcuts使用"></a>3.1 Shortcuts使用</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>日期配置<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-model</span>=<span class="string">&quot;createDate&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">placeholder</span>=<span class="string">&quot;请输入时间&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:picker-options</span>=<span class="string">&quot;pickerOptions&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;DatePrickers&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">createDate</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">pickerOptions</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">disabledDate</span>(<span class="params">time</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> time.<span class="title function_">getTime</span>() &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>();</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">shortcuts</span>: [&#123;  <span class="comment">//定义的shortucts</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">text</span>: <span class="string">&#x27;今天&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">onClick</span>(<span class="params">picker</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            picker.$emit(<span class="string">&#x27;pick&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">text</span>: <span class="string">&#x27;昨天&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">onClick</span>(<span class="params">picker</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">                            date.<span class="title function_">setTime</span>(date.<span class="title function_">getTime</span>() - <span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript">                            picker.$emit(<span class="string">&#x27;pick&#x27;</span>, date);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">text</span>: <span class="string">&#x27;一周前&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">onClick</span>(<span class="params">picker</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">                            date.<span class="title function_">setTime</span>(date.<span class="title function_">getTime</span>() - <span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">7</span>);</span></span><br><span class="line"><span class="language-javascript">                            picker.$emit(<span class="string">&#x27;pick&#x27;</span>, date);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;]</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411112210555.png" alt="image-20200511100330078" style="zoom: 60%;" /><h5 id="3-2-Picker-Options"><a href="#3-2-Picker-Options" class="headerlink" title="3.2 Picker Options"></a>3.2 Picker Options</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-model</span>=<span class="string">&quot;createDate&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">placeholder</span>=<span class="string">&quot;请输入时间&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:picker-options</span>=<span class="string">&quot;pickerOptions&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;DatePrickers&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">createDate</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">pickerOptions</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">disabledDate</span>(<span class="params">time</span>) &#123; <span class="comment">//用来对日期进行的控制</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> time.<span class="title function_">getTime</span>() &lt; <span class="title class_">Date</span>.<span class="title function_">now</span>();</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411112211384.png" alt="image-20200511100634677" style="zoom:60%;" /><h4 id="4-事件使用"><a href="#4-事件使用" class="headerlink" title="4.事件使用"></a>4.事件使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">                <span class="attr">.....</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:picker-options</span>=<span class="string">&quot;pickerOptions&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">change</span>=<span class="string">&quot;aaa&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;DatePrickers&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">createDate</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">aaa</span>(<span class="params">value</span>)&#123;  <span class="comment">//发生change事件的函数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="8-7-Upload组件"><a href="#8-7-Upload组件" class="headerlink" title="8.7 Upload组件"></a>8.7 Upload组件</h3><h4 id="1-组件创建-1"><a href="#1-组件创建-1" class="headerlink" title="1.组件创建"></a>1.组件创建</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span> <span class="attr">action</span>=<span class="string">&quot;https://jsonplaceholder.typicode.com/posts/&quot;</span> <span class="attr">:file-list</span>=<span class="string">&quot;fileList&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;tip&quot;</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__tip&quot;</span>&gt;</span>只能上传jpg/png文件，且不超过500kb<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注意:在使用upload组件时必须设置action属性 action属性为必要参数不能省略</code></p><h4 id="2-属性和事件的使用"><a href="#2-属性和事件的使用" class="headerlink" title="2.属性和事件的使用"></a>2.属性和事件的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span> <span class="attr">:limit</span>=<span class="string">&quot;3&quot;</span> <span class="attr">:on-exceed</span>=<span class="string">&quot;exceed&quot;</span> <span class="attr">:multiple</span>=<span class="string">&quot;false&quot;</span> <span class="attr">:before-remove</span>=<span class="string">&quot;beforeRemove&quot;</span> <span class="attr">:on-remove</span>=<span class="string">&quot;remove&quot;</span> <span class="attr">:on-preview</span>=<span class="string">&quot;show&quot;</span> <span class="attr">:drag</span>=<span class="string">&quot;true&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;.txt,.png&quot;</span> <span class="attr">:show-file-list</span>=<span class="string">&quot;true&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;info&quot;</span> <span class="attr">action</span>=<span class="string">&quot;https://jsonplaceholder.typicode.com/posts/&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:file-list</span>=<span class="string">&quot;fileList&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-upload&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__text&quot;</span>&gt;</span>将文件拖到此处，或<span class="tag">&lt;<span class="name">em</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__tip&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;tip&quot;</span>&gt;</span>只能上传jpg/png文件，且不超过500kb<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Uploads&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fileList</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;food.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>: <span class="string">&#x27;https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;food2.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>: <span class="string">&#x27;https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">info</span>: &#123;<span class="attr">id</span>:<span class="string">&quot;21&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">show</span>(<span class="params">file</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(file);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">remove</span>(<span class="params">file,fileList</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(file);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(fileList);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//alert(fileList.length)</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">beforeRemove</span>(<span class="params">file,fileList</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(fileList.<span class="property">length</span>&lt;<span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;上传文件不能少于3个&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">exceed</span>(<span class="params">file,fileList</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;文件超出上传的个数限制&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意:在使用upload组件时没有event事件,所有事件都是属性事件</strong></li></ul><h4 id="3-方法的使用"><a href="#3-方法的使用" class="headerlink" title="3.方法的使用"></a>3.方法的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span> <span class="attr">ref</span>=<span class="string">&quot;uploads&quot;</span> <span class="attr">....</span>&gt;</span>........<span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"></span><br><span class="line">方法调用:</span><br><span class="line">this.$refs.uploads.clearFiles();</span><br><span class="line">this.$refs.uploads.abort();</span><br><span class="line">this.$refs.uploads.submit();</span><br></pre></td></tr></table></figure><hr><h3 id="8-8-Form组件"><a href="#8-8-Form组件" class="headerlink" title="8.8 Form组件"></a>8.8 Form组件</h3><h4 id="1-组件的创建"><a href="#1-组件的创建" class="headerlink" title="1.组件的创建"></a>1.组件的创建</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;活动名称&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>立即创建<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Form&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">form</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">region</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">date1</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">date2</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">delivery</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: [],</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">resource</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">desc</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">onSubmit</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;submit!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-内联表单"><a href="#2-内联表单" class="headerlink" title="2.内联表单"></a>2.内联表单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;formInline&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-form-inline&quot;</span>&gt;</span></span><br><span class="line">.......</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>通过设置 inline=true方式将表单作为内联表单处理</code></p><h4 id="3-表单验证"><a href="#3-表单验证" class="headerlink" title="3.表单验证"></a>3.表单验证</h4><ul><li><strong>使用说明:</strong></li></ul><blockquote><p>Form 组件提供了表单验证的功能，只需要通过 <code>rules</code> 属性传入约定的验证规则，并将 Form-Item 的 <code>prop</code> 属性设置为需校验的字段名即可。校验规则参见 <a href="https://github.com/yiminghe/async-validator">async-validator</a></p></blockquote><h5 id="3-1-失去焦点自动验证"><a href="#3-1-失去焦点自动验证" class="headerlink" title="3.1 失去焦点自动验证"></a>3.1 失去焦点自动验证</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;活动名称&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  ....</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Form&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">form</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">region</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">date1</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">date2</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">delivery</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: [],</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">resource</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">desc</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">rules</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: [</span></span><br><span class="line"><span class="language-javascript">                        &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入活动名称&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                        &#123;<span class="attr">min</span>: <span class="number">3</span>, <span class="attr">max</span>: <span class="number">5</span>, <span class="attr">message</span>: <span class="string">&#x27;长度在 3 到 5 个字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    ],</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">onSubmit</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;submit!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-2-表单提交调用表单组件的验证方法验证"><a href="#3-2-表单提交调用表单组件的验证方法验证" class="headerlink" title="3.2 表单提交调用表单组件的验证方法验证"></a>3.2 表单提交调用表单组件的验证方法验证</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span><span class="attr">....</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;活动名称&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSubmit(&#x27;form&#x27;)&quot;</span>&gt;</span>立即创建<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">methods: &#123;</span><br><span class="line">            onSubmit(formName) &#123;</span><br><span class="line">                this.$refs[formName].validate((valid) =&gt; &#123;</span><br><span class="line">                    if (valid) &#123;</span><br><span class="line">                        alert(&#x27;submit!&#x27;);</span><br><span class="line">                        //发送异步请求 到 springboot项目</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        console.log(&#x27;error submit!!&#x27;);</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="4-自定义表单的验证规则"><a href="#4-自定义表单的验证规则" class="headerlink" title="4.自定义表单的验证规则"></a>4.自定义表单的验证规则</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;手机号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;phone&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.phone&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;resetForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Form&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> <span class="title function_">validatePhone</span> = (<span class="params">rule,value,callback</span>)=&gt;&#123; <span class="comment">//定义自定义的验证规则</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(rule);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(callback);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(!value)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;手机号不能为空!&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(!<span class="regexp">/^1[3456789]\d&#123;9&#125;$/</span>.<span class="title function_">test</span>(value))&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;手机号码不正确!!&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">form</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">region</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">date1</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">date2</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">delivery</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: [],</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">resource</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">desc</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">rules</span>: &#123; <span class="comment">//验证规则</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: [ <span class="comment">//使用默认规则</span></span></span><br><span class="line"><span class="language-javascript">                        &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入活动名称&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                        &#123;<span class="attr">min</span>: <span class="number">3</span>, <span class="attr">max</span>: <span class="number">5</span>, <span class="attr">message</span>: <span class="string">&#x27;长度在 3 到 5 个字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    ],</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">phone</span>:[  <span class="comment">//使用自定义规则</span></span></span><br><span class="line"><span class="language-javascript">                        &#123;<span class="attr">validator</span>:validatePhone,<span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    ]</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">ruleForm</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">phone</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="9-消息提示"><a href="#9-消息提示" class="headerlink" title="9.消息提示"></a>9.消息提示</h2><h3 id="9-1警告提示"><a href="#9-1警告提示" class="headerlink" title="9.1警告提示"></a>9.1警告提示</h3><h4 id="1-1-创建警告提示"><a href="#1-1-创建警告提示" class="headerlink" title="1.1 创建警告提示"></a>1.1 创建警告提示</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-alert</span> <span class="attr">title</span>=<span class="string">&quot;成功信息提示&quot;</span> <span class="attr">:closable</span>=<span class="string">&quot;false&quot;</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>&gt;</span>我是辅助信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-alert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-alert</span> <span class="attr">title</span>=<span class="string">&quot;成功信息提示&quot;</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-alert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-alert</span> <span class="attr">title</span>=<span class="string">&quot;成功信息提示&quot;</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-alert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-alert</span> <span class="attr">title</span>=<span class="string">&quot;成功信息提示&quot;</span> <span class="attr">type</span>=<span class="string">&quot;error&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-alert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2属性的使用"><a href="#1-2属性的使用" class="headerlink" title="1.2属性的使用"></a>1.2属性的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-alert</span> <span class="attr">title</span>=<span class="string">&quot;成功信息提示&quot;</span> <span class="attr">effect</span>=<span class="string">&quot;dark&quot;</span> <span class="attr">:show-icon</span>=<span class="string">&quot;true&quot;</span> <span class="attr">center</span> <span class="attr">:closable</span>=<span class="string">&quot;false&quot;</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>&gt;</span>我是辅助信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-alert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-2-Message消息提示"><a href="#9-2-Message消息提示" class="headerlink" title="9.2 Message消息提示"></a>9.2 Message消息提示</h3><h4 id="2-1-创建组件"><a href="#2-1-创建组件" class="headerlink" title="2.1 创建组件"></a>2.1 创建组件</h4><ul><li><strong>注意:这个组件的创建无须在页面中书写任何标签,他是一个js插件,在需要展示消息提示的位置直接调用提供的js插件方法即可</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span>创建最简单的消息</span><br><span class="line"><span class="variable language_">this</span>.$message(<span class="string">&#x27;这是一个消息提示!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span>自定义消息内容</span><br><span class="line"><span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, <span class="literal">null</span>, [</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;span&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;订单创建成功,您的订单编号为: &#x27;</span>),</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;i&#x27;</span>, &#123; <span class="attr">style</span>: <span class="string">&#x27;color: teal&#x27;</span> &#125;, <span class="string">&#x27;87&#x27;</span>)</span><br><span class="line">    ])</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span>不同主题的消息提示</span><br><span class="line"> <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">     <span class="attr">message</span>:<span class="string">&#x27;这是信息提示&#x27;</span>,</span><br><span class="line">     <span class="attr">type</span>:<span class="string">&quot;success&quot;</span>,</span><br><span class="line">   &#125;)</span><br><span class="line"><span class="comment">//主题样式:  success  info  warning  error</span></span><br><span class="line"></span><br><span class="line"># <span class="number">4.</span>属性使用</span><br><span class="line"><span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">    <span class="attr">message</span>:<span class="string">&#x27;这是信息提示&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="attr">showClose</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">center</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">iconClass</span>:<span class="string">&#x27;el-icon-user-solid&#x27;</span>,</span><br><span class="line">    <span class="attr">duration</span>:<span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line"># <span class="number">5.</span>方法的使用</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">closeAll</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="10-table表格组件"><a href="#10-table表格组件" class="headerlink" title="10.table表格组件"></a>10.table表格组件</h2><h3 id="1-组件的创建-1"><a href="#1-组件的创建-1" class="headerlink" title="1.组件的创建"></a>1.组件的创建</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;email&quot;</span> <span class="attr">label</span>=<span class="string">&quot;邮箱&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Tables&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">tableData</span>:[</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="number">21</span>,<span class="attr">name</span>:<span class="string">&quot;小陈&quot;</span>,<span class="attr">age</span>:<span class="number">23</span>,<span class="attr">email</span>:<span class="string">&quot;60037647@qq.com&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="number">22</span>,<span class="attr">name</span>:<span class="string">&quot;小张&quot;</span>,<span class="attr">age</span>:<span class="number">25</span>,<span class="attr">email</span>:<span class="string">&quot;60038647@qq.com&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-表格中列属性"><a href="#2-表格中列属性" class="headerlink" title="2.表格中列属性"></a>2.表格中列属性</h3><ul><li><strong>el-table-column属性</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> <span class="attr">:resizable</span>=<span class="string">&quot;false&quot;</span> <span class="attr">header-align</span>=<span class="string">&quot;left&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">fixed</span>=<span class="string">&quot;left&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200px;&quot;</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span> <span class="attr">:sort-method</span>=<span class="string">&quot;sorts&quot;</span> <span class="attr">sortable</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;email&quot;</span> <span class="attr">label</span>=<span class="string">&quot;邮箱&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;dept.name&quot;</span> <span class="attr">:formatter</span>=<span class="string">&quot;showDept&quot;</span> <span class="attr">label</span>=<span class="string">&quot;部门&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Tables&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">tableData</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">21</span>, <span class="attr">name</span>: <span class="string">&quot;小陈&quot;</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">email</span>: <span class="string">&quot;60037647@qq.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">dept</span>: &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;研发部&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">22</span>, <span class="attr">name</span>: <span class="string">&quot;小张&quot;</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">email</span>: <span class="string">&quot;60038647@qq.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">dept</span>: &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;小卖部&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">23</span>, <span class="attr">name</span>: <span class="string">&quot;小李&quot;</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">email</span>: <span class="string">&quot;60038657@qq.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">dept</span>:&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sorts</span>(<span class="params">a, b</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> a.<span class="property">age</span> - b.<span class="property">age</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showDept</span>(<span class="params">row, column, cellValue, index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(row);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(column);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(cellValue);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(cellValue)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> cellValue</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="string">&quot;暂无部门&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-表格属性"><a href="#3-表格属性" class="headerlink" title="3.表格属性"></a>3.表格属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">empty-text</span>=<span class="string">&quot;暂无数据&quot;</span> <span class="attr">:row-class-name</span>=<span class="string">&quot;showCss&quot;</span> <span class="attr">highlight-current-row</span> <span class="attr">:show-header</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:fit</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">:height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">border</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  .....</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showCss</span>(<span class="params">&#123;row, rowIndex&#125;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (rowIndex % <span class="number">2</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="string">&quot;warning-row&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="string">&quot;success-row&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-组件事件使用"><a href="#4-组件事件使用" class="headerlink" title="4.组件事件使用"></a>4.组件事件使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> @<span class="attr">事件名</span>=<span class="string">&quot;事件处理函数名&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">el-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Tables&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//....</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//...事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">selectRow</span>(<span class="params">selection, row</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(selection);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(row);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-组件方法的使用"><a href="#5-组件方法的使用" class="headerlink" title="5.组件方法的使用"></a>5.组件方法的使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span>  <span class="attr">ref</span>=<span class="string">&quot;mytable&quot;</span>&gt;</span>........<span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">//调用方法</span><br><span class="line">this.$refs.mytable.方法名  </span><br></pre></td></tr></table></figure><h3 id="6-表格中定义操作列"><a href="#6-表格中定义操作列" class="headerlink" title="6.表格中定义操作列"></a>6.表格中定义操作列</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span>&gt;</span></span><br><span class="line">  ....</span><br><span class="line"> <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">          <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">&quot;handleEdit(scope.$index, scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">          <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.$index, scope.row)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Tables&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            .....</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//用来处理编辑和删除的事件函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handleEdit</span>(<span class="params">index,row</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(row);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handleDelete</span>(<span class="params">index,row</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(row);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411112211924.png" alt="image-20200513101148070" style="zoom:60%;" /><hr><h3 id="7-自定义表头"><a href="#7-自定义表头" class="headerlink" title="7.自定义表头"></a>7.自定义表头</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData.filter(data =&gt; !search || data.name.toLowerCase().includes(search.toLowerCase()))&quot;</span> &gt;</span></span><br><span class="line">   .....</span><br><span class="line">   <span class="comment">&lt;!--展示搜索和操作--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">&quot;search&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span>=<span class="string">&quot;输入关键字搜索&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;handleEdit(scope.$index, scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.$index, scope.row)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Tables&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">tableData</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">21</span>, <span class="attr">name</span>: <span class="string">&quot;小陈&quot;</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">email</span>: <span class="string">&quot;60037647@qq.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">dept</span>: &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;研发部&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">22</span>, <span class="attr">name</span>: <span class="string">&quot;小张&quot;</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">email</span>: <span class="string">&quot;60038647@qq.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">dept</span>: &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;小卖部&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">23</span>, <span class="attr">name</span>: <span class="string">&quot;小李&quot;</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">email</span>: <span class="string">&quot;60038657@qq.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">dept</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">24</span>, <span class="attr">name</span>: <span class="string">&quot;小四&quot;</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">email</span>: <span class="string">&quot;60038657@qq.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">dept</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                ],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">search</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sorts</span>(<span class="params">a, b</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> a.<span class="property">age</span> - b.<span class="property">age</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showDept</span>(<span class="params">row, column, cellValue, index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (cellValue) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> cellValue</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="string">&quot;暂无部门&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showCss</span>(<span class="params">&#123;row, rowIndex&#125;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (rowIndex % <span class="number">2</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="string">&quot;warning-row&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="string">&quot;success-row&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">selectRow</span>(<span class="params">selection, row</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(selection);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(row);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">clearSelect</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">mytable</span>.<span class="title function_">clearSelection</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handleEdit</span>(<span class="params">index,row</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(row);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handleDelete</span>(<span class="params">index,row</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(row);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411112211500.png" alt="image-20200513101814910" style="zoom:60%;" /><hr>]]></content>
    
    
    <summary type="html">学习ElementUI</summary>
    
    
    
    <category term="学习" scheme="https://01petard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ElementUI" scheme="https://01petard.github.io/tags/ElementUI/"/>
    
  </entry>
  
  <entry>
    <title>命令行系统信息工具</title>
    <link href="https://01petard.github.io/2024/11/05/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E5%B7%A5%E5%85%B7/"/>
    <id>https://01petard.github.io/2024/11/05/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E5%B7%A5%E5%85%B7/</id>
    <published>2024-11-05T14:40:00.000Z</published>
    <updated>2024-11-11T10:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>学习Linux命令行工具不仅仅是操作技能的提升，更是解锁“系统魔法”的钥匙！很多时候，它们是你和系统沟通的唯一语言。掌握它们，你会发现自己像黑客电影里的高手一样，可以在屏幕上“指点江山”。所以，学习Linux命令行工具不仅是技能，更是一场奇妙的冒险。掌握它，你会变得高效、自信，而且始终“掌控全局”！</p></blockquote><h1 id="个人推荐"><a href="#个人推荐" class="headerlink" title="个人推荐"></a>个人推荐</h1><ul><li><p>查看系统信息：[x uname](#x uname)</p></li><li><p>查询 ip 地址：[x ip](#x ip)</p></li><li><p>查看进程的实时信息：[x btop](#x btop)</p></li><li><p>查看文件内容：[x cat](#x cat)</p></li><li><p>查看当前目录下的文件：<a href="#lsd">lsd</a></p></li><li><p>查看系统信息：<a href="#macchina">macchina</a> 或 <a href="#fastfetch">fastfetch</a></p></li><li><p>增强docker功能：<a href="#%E5%A2%9E%E5%BC%BAdocker%E5%8A%9F%E8%83%BD">增强docker功能</a></p></li></ul><h1 id="准备：安装X"><a href="#准备：安装X" class="headerlink" title="准备：安装X"></a>准备：安装<code>X</code></h1><blockquote><p>官方地址：<a href="https://cn.x-cmd.com/">X-CMD | 开源轻量级 POSIX 脚本，用于管理工具 (670+) 和提供经典命令扩展</a></p></blockquote><p>采用 curl 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval &quot;$(curl https://get.x-cmd.com)&quot;</span><br></pre></td></tr></table></figure><p>采用 wget 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval &quot;$(wget -O- https://get.x-cmd.com)&quot;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411102054702.png" alt="image-20241110205427518" style="zoom: 67%;" /><h1 id="x-uname"><a href="#x-uname" class="headerlink" title="x uname"></a><a name="x uname">x uname</a></h1><blockquote><p>通过终端命令查看电脑以及操作系统的相关信息，相比自带的<code>uname</code>能看到更多信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x uname</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411102135106.png" alt="image-20241110213518080" style="zoom:67%;" /><h1 id="x-df"><a href="#x-df" class="headerlink" title="x df"></a>x df</h1><blockquote><p>以 TUI 方式查看文件系统和磁盘空间使用情况</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x df</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411102155462.png" alt="image-20241110215525365" style="zoom:67%;" /><h1 id="x-ping"><a href="#x-ping" class="headerlink" title="x ping"></a>x ping</h1><blockquote><p>Linux下的<code>ping</code>有点low了，所以可以用这个**<code>ping</code>**，美观且可视化</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x ping -b www.baidu.com</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411102120580.png" alt="image-20241110212020536" style="zoom:67%;" /><h1 id="x-ip"><a href="#x-ip" class="headerlink" title="x ip"></a><a name="x ip">x ip</a></h1><blockquote><p>查询 ip 地址，可以平替<code>ifconfig</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x ip</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411102159353.png" style="zoom:67%;" /><h1 id="x-top"><a href="#x-top" class="headerlink" title="x top"></a>x top</h1><p>使用 htop 来查看进程的实时信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x top</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411102127626.png" alt="image-20241110212717560" style="zoom:67%;" /><h1 id="x-htop"><a href="#x-htop" class="headerlink" title="x htop"></a>x htop</h1><p>使用 htop 来查看进程的实时信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x htop</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411102125141.png" alt="image-20241110212559077" style="zoom:67%;" /><h1 id="x-btop"><a href="#x-btop" class="headerlink" title="x btop"></a><a name="x btop">x btop</a></h1><p>使用 htop 来查看进程的实时信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x btop</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411102153101.png" alt="image-20241110215350980" style="zoom:67%;" /><h1 id="x-cd"><a href="#x-cd" class="headerlink" title="x cd"></a>x cd</h1><blockquote><p>比<code>cd</code>更高级的<code>cd</code>，具有更丰富的交互性</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x cd</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411102131391.png" alt="image-20241110213113334" style="zoom:67%;" /><h1 id="x-ll"><a href="#x-ll" class="headerlink" title="x ll"></a><a name="x ll">x ll</a></h1><blockquote><p>一个可交互性的命令行文件管理器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x ll</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411102133920.png" alt="image-20241110213317862" style="zoom:67%;" /><h1 id="x-cat"><a href="#x-cat" class="headerlink" title="x cat"></a><a name="x cat">x cat</a></h1><blockquote><p>查看文件内容，很好地解决了<code>cat</code>的痛点</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x cat</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411102154314.png" alt="image-20241110215414267" style="zoom:67%;" /><h1 id="x-ascii"><a href="#x-ascii" class="headerlink" title="x ascii"></a>x ascii</h1><blockquote><p>将 x-cmd 字符串转为 ASCII 艺术字</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x ascii cfont HuangZexiao -g red,magenta -a center -s</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411111834122.png" alt="image-20241111183410086" style="zoom: 67%;" /><h1 id="x-hua"><a href="#x-hua" class="headerlink" title="x hua"></a>x hua</h1><blockquote><p>查看古文诗词</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x hua</span><br></pre></td></tr></table></figure><blockquote><p>查看《唐诗三百》</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x hua ts</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411111837479.png" alt="image-20241111183732418" style="zoom:67%;" /><h1 id="x-wttr"><a href="#x-wttr" class="headerlink" title="x wttr"></a>x wttr</h1><blockquote><p>展示中山市天气的信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x wttr zhongshan</span><br></pre></td></tr></table></figure><blockquote><p>显示当前位置的天气和今日的天气预报</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x wttr ?1</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411111839545.png" alt="image-20241111183934477" style="zoom:67%;" /><h1 id="lsd"><a href="#lsd" class="headerlink" title="lsd"></a><a name="lsd">lsd</a></h1><blockquote><p>查看当前目录下的文件，比<code>ls</code>的功能更丰富</p></blockquote><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><p>效果与<code>ls</code>一样，默认按文件名排列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsd</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411102055327.png" alt="image-20241110205510288" style="zoom:67%;" /><h2 id="树形查看文件"><a href="#树形查看文件" class="headerlink" title="树形查看文件"></a>树形查看文件</h2><p><code>--depth 1</code>：查看深度为1的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsd --tree --depth 1 -S</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411102055851.png" alt="image-20241110205558823" style="zoom:67%;" /><h2 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h2><p><code>-S</code>：按文件大小排列（默认按文件名排列）</p><p><code>-1</code>：每行列出一个文件</p><p><code>-a</code>：查看隐藏文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsd --tree --depth 1 -S -1 -a</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411102058128.png" alt="image-20241110205847076" style="zoom:67%;" /><h2 id="添加alias别名"><a href="#添加alias别名" class="headerlink" title="添加alias别名"></a>添加alias别名</h2><p>在环境配置文件中添加alias别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias ll=&#x27;lsd --tree --depth 1 -1&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -la&#x27;</span></span></span><br></pre></td></tr></table></figure><h1 id="系统信息查看工具"><a href="#系统信息查看工具" class="headerlink" title="系统信息查看工具"></a>系统信息查看工具</h1><blockquote><p><strong>系统信息查看工具</strong>可以用于获取和显示系统硬件、软件和环境信息（如内核版本、内存使用情况、处理器负载等），通过这些工具可以在主流操作系统的运行中获取系统信息。</p></blockquote><h1 id="macchina"><a href="#macchina" class="headerlink" title="macchina"></a><a name="macchina">macchina</a></h1><ol><li><strong>最小化</strong>：相比于 <code>neofetch</code> 和 <code>fastfetch</code>，<code>macchina</code> 更加简单，更适合小型设备或资源受限的环境。</li><li><strong>可定制化</strong>：提供主题系统，主题配置文件与主要配置文件是分开的，用户可以创建一堆主题并随时在它们之间切换。</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval &quot;$(curl https://get.x-cmd.com)&quot;        # 安装 x-cmd</span><br><span class="line">x env use macchina                          # 使用 x-cmd 安装 macchina</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>获取和显示系统信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">macchina</span><br><span class="line">macchina -o machine</span><br><span class="line">macchina -o machine -o terminal -o shell</span><br></pre></td></tr></table></figure></li><li><p>定制 macchina：</p><ul><li><p>存放配置文件的目录：</p><ul><li>Linux 和 BSD：<code>~/.config/macchina/</code> 或 <code>$XDG_CONFIG_HOME/macchina/</code></li><li>macOS：<code>$HOME/.config/macchina/</code></li><li>Windows：<code>%AppData%/macchina/</code></li></ul></li><li><p><a href="https://github.com/Macchina-CLI/macchina/blob/main/macchina.toml"><code>macchina.toml</code></a>：macchina 的配置文件，用于调整 macchina 需要显示或隐藏的内容以及使用的主题。</p></li><li><p><a href="https://github.com/Macchina-CLI/macchina/tree/main/contrib/themes">主题配置文件</a>：用配置 macchina 显示信息的外观，文件格式请参考<a href="https://github.com/Macchina-CLI/macchina/blob/main/doc/macchina.7.scd">官方文档</a>。</p></li><li><p>示例 - 自定义主题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x touch &quot;$HOME/.config/macchina/themes/&quot;</span><br><span class="line">printf &quot;%s</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>“ \n ‘hide_ascii &#x3D; true’ \n ‘[box]’ \n ‘border &#x3D; “plain”‘ \n ‘visible &#x3D; true’ &gt; “$HOME&#x2F;.config&#x2F;macchina&#x2F;themes&#x2F;x.toml” macchina -l macchina -t x &#96;&#96;&#96;</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411032341203.png" alt="image-20241103234124163" style="zoom: 67%;" /><h1 id="neofetch"><a href="#neofetch" class="headerlink" title="neofetch"></a>neofetch</h1><p>兼容性好，neofetch 基于<code>bash</code>，所以不需要编译，同时兼容性也好：</p><p>举个例子，<code>main</code>函数内部的<code>cache_uname</code>方法，就会使用 Linux 和 macOS 都有的命令：<code>uname -srm</code></p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>Neofetch 的安装非常简单，在各大的软件包管理器都有发布：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">macOS</span></span><br><span class="line">brew install neofetch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Linux Debian/Ubuntu</span></span><br><span class="line">sudo apt install neofetch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Linux CentOS</span></span><br><span class="line">sudo yum install neofetch</span><br></pre></td></tr></table></figure><p>安装完成，我们看看 Neofetch 的版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neofetch --version</span><br></pre></td></tr></table></figure><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><p>输出系统信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neofetch</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411032341598.png" alt="image-20241103234143567" style="zoom:67%;" /><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>如果细看 Neofetch 的脚本，会发现还有很多可选项，这些在 Neofetch 的 wiki 内也有记录：</p><ul><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://github.com/dylanaraps/neofetch/wiki&objectId=2443476&objectType=1">Neofetch Wiki: https://github.com/dylanaraps/neofetch/wiki</a></li></ul><p>接下来我们看看可选项有那些？</p><h3 id="扩展使用"><a href="#扩展使用" class="headerlink" title="扩展使用"></a>扩展使用</h3><p>根据官方的 wiki，Neofetch 在安装后，会自动生成默认配置文件，配置文件的存放地址在：<code>$&#123;HOME&#125;/.config/neofetch/config.conf</code>内。里面其实就是默认的输出内容定义：</p><p>代码语言：bash</p><p>复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> <span class="variable">$&#123;HOME&#125;</span>/.config/neofetch/config.conf</span><br></pre></td></tr></table></figure><img src="https://developer.qcloudimg.com/http-save/7704194/7a9ceb4ee93944402ef47367d54f168c.webp" alt="neofetch默认配置" style="zoom:40%;" /><p>neofetch默认配置</p><p>可以看到，默认情况下打印的内容，就在配置文件内的 <code>print_info</code> 所定义。如果我们需要修改呢，有两种方法：</p><ul><li>直接使用<code>vim</code>等文本编辑器修改这个文件即可。</li><li>在运行<code>neofetch</code>的时候，使用参数开启即可。</li></ul><p>举个例子，默认情况，只显示内存，并没有显示内存使用的百分比；但是实际上在<code>config.conf</code>文件内是可以开启的，比如：</p><p>代码语言：bash</p><p>复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接输出</span></span><br><span class="line">neofetch --memory_percent on</span><br></pre></td></tr></table></figure><p>或者直接修改配置文件</p><img src="https://developer.qcloudimg.com/http-save/7704194/fc76855ebafebc9d5142e7ab90cf1ccc.webp" alt="修改配置文件" style="zoom:40%;" /><p>修改配置文件</p><p>最后的结果：</p><img src="https://developer.qcloudimg.com/http-save/7704194/e76029119fdf53b2a45987b9780d204e.webp" alt="显示内存比" style="zoom:40%;" /><p>显示内存比</p><h3 id="操作前提"><a href="#操作前提" class="headerlink" title="操作前提"></a>操作前提</h3><p>本次文章的操作前提，需要你有一台电脑。如果你是希望使用NeoFetch，那么需要用Bash的支持：</p><ol><li>系统为Linux或Unix；</li><li>Bash的版本最少需要<code>3.2</code>，你可以使用<code>bash --version</code>查看bash版本。</li></ol><img src="https://developer.qcloudimg.com/http-save/yehe-7704194/fdb57beefbdf88382cd45a9c4c9edc1f.png" alt="适用于NeoFetch的系统" style="zoom: 40%;" /><p>适用于NeoFetch的系统</p><p>如果你希望使用 FastFetch ，那么原则上没有什么受限，经过测试，目前的Windows 7也可以使用，Windows 11 ON ARM使用也正常。如果在Windows Server上，那么目前常用的2016、2019和2022都可以使用：</p><img src="https://developer.qcloudimg.com/http-save/yehe-7704194/1c1b055b9d844e430e72fecb14d6f33c.png" alt="都是支持的" style="zoom:40%;" /><p>都是支持的</p><p>最后，如果你希望有一台Linux进行练手，或者使用一台服务器部署网站，甚至使用Linux服务器测试本文章内容，强烈推荐使用腾讯云轻量应用服务器进行操作。</p><p>本文对应的视频教程：</p><ul><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.bilibili.com/video/BV1fHYLeSEr4&objectId=2443476&objectType=1">摸不透系统当前状态和配置？一条命令快速查看! NeoFetch和FastFetch使用详解: https://www.bilibili.com/video/BV1fHYLeSEr4</a></li></ul><h3 id="项目归档"><a href="#项目归档" class="headerlink" title="项目归档"></a>项目归档</h3><p>Neofetch完全基于<code>bash</code>，使其兼容性很不错；即使你的Debian从8已经到12，但是 Neofetch 版本一直没有更新，那么 Neofetch 的使用，也不会出现什么问题。</p><p>这也是为什么，Neofetch在归档前，已经三年没有更新，但使用起来也没有任何问题。可以预想到，未来很长一段时间也不会有任何问题。那些基础的命令<code>free -m</code>、<code>uname -s</code>等等，都是不会改变的。</p><p>但是，为什么 Neofetch 停止维护了呢？ 或者说是项目归档了呢？</p><img src="https://developer.qcloudimg.com/http-save/7704194/8e1b2a6ab6d7eb74952e85dca14a22ae.gif" alt="为什么停止维护呢？" style="zoom:40%;" /><p>为什么停止维护呢？</p><p>其实，根据 reddit 上的两篇文章，可能可以略知一二：</p><ul><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.reddit.com/r/linux/comments/1cga3q4/neofetch_development_discontinued_repository/&objectId=2443476&objectType=1">Neofetch development discontinued, repository archived</a></li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.reddit.com/r/sysadmin/comments/4l7kjd/found_a_text_file_at_work_titled_why_should_i/&objectId=2443476&objectType=1">Found a text file at work titled “Why should I quit my job and become a goat farmer? (written during my “on-call” week)”</a></li></ul><p>大概就是作者换行了（回家开农场了，不过不清楚是否真的回去开农场？），项目维护者经常面临着巨大的工作量，包括但不限于代码更新、设备兼容考虑、错误修复、功能请求处理以及社区管理等等繁琐事物，加上作者自己从事的软件工作；作者在技术工作中感到厌倦和疲惫。而且即使从事的是技术，也需要考虑政治和不同人的立场，也需要站队。</p><p>综合上述的内容，他现在更倾向于追求他认为更简单、压力更小、更纯粹的生活方式。</p><p>自然而然地，项目就放弃维护了。</p><p>说实话，有点可惜；不过也确实为作者感到高兴，他找到了更好的生活。虽然不知道他是否真的是回去开设农场，但是应该是一个不错的新生活。</p><p>回到NeoFetch，其实也有很多继任者：</p><ul><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://github.com/hykilpikonna/hyfetch&objectId=2443476&objectType=1">hyfetch: Neofetch with LGBTQ+ pride flags!</a></li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://github.com/fastfetch-cli/fastfetch&objectId=2443476&objectType=1">fastfetch: About An actively maintained, feature-rich and performance oriented, neofetch like system information tool.</a></li></ul><p>接任者都是非常好用的项目；不过受限于篇幅，接下来，我们就取其中的 Fastfetch 来一起看看。</p><h1 id="fastfetch"><a href="#fastfetch" class="headerlink" title="fastfetch"></a><a name="fastfetch">fastfetch</a></h1><ol><li><p><strong>可替代性</strong>：通常情况下，可以把 FastFetch 当作 NeoFetch 使用。安装方式也是一样，FastFetch 已经在各个平台的软件包管理器发布。</p></li><li><p><strong>可扩展性</strong>：相比于 NeoFetch 全部基于<code>bash</code>的 shell 脚本，而 FastFetch 是基于C的。</p></li></ol><h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">macOS</span></span><br><span class="line">brew install fastfetch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Linux Debian/Ubuntu (Debian 13 or newer)</span></span><br><span class="line">sudo apt install fastfetch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Linux CentOS</span></span><br><span class="line">sudo yum install fastfetch</span><br></pre></td></tr></table></figure><p>安装完成，我们看看 fastfetch的版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastfetch --version</span><br></pre></td></tr></table></figure><h2 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h2><p>输出系统信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neofetch</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411032347936.png" alt="image-20241103234731900" style="zoom:67%;" /><h1 id="增强docker功能"><a href="#增强docker功能" class="headerlink" title="增强docker功能"></a><a name="增强docker功能">增强docker功能</a></h1><p>可以直接用 <strong><code>xd</code>、<code>x docker</code></strong> 来增强 **<code>docker</code>**，具体效果如下：</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411102139963.png" alt="image-20241110213952852" style="zoom:67%;" />]]></content>
    
    
    <summary type="html">（主要是为了装逼）</summary>
    
    
    
    <category term="软件" scheme="https://01petard.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="Linux" scheme="https://01petard.github.io/tags/Linux/"/>
    
    <category term="命令行" scheme="https://01petard.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>新博客迁移通知</title>
    <link href="https://01petard.github.io/2024/11/04/%E6%96%B0%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E9%80%9A%E7%9F%A5/"/>
    <id>https://01petard.github.io/2024/11/04/%E6%96%B0%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E9%80%9A%E7%9F%A5/</id>
    <published>2024-11-04T14:48:00.000Z</published>
    <updated>2024-11-04T15:11:48.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="我的旧博客"><a href="#我的旧博客" class="headerlink" title="我的旧博客"></a>我的旧博客</h1><p>欢迎来到我的旧博客！这个博客是基于 <strong>Hexo</strong> 框架构建的，曾经承载了我许多宝贵的学习记录与分享。尽管我现在已迁移到新的平台，但这里依旧保留了我对技术和编程的最初热爱与追求。</p><h2 id="为什么选择迁移？"><a href="#为什么选择迁移？" class="headerlink" title="为什么选择迁移？"></a>为什么选择迁移？</h2><p>随着时间的推移，我希望能在博客上进行更高效的内容创作和管理。<strong>Hexo</strong> 是一个非常优秀的静态博客框架，提供了快速生成页面和丰富的主题支持。但在持续使用中，我遇到了以下一些问题：</p><ol><li><strong>构建速度</strong>：随着博客文章的增多，Hexo 的构建速度变慢，尤其是在多次修改和发布时，这影响了我的开发体验。</li><li><strong>灵活性</strong>：我希望使用更现代的技术栈，如 Vue 3，以便更轻松地自定义博客功能，Hexo 在这方面的支持相对有限。</li><li><strong>开发体验</strong>：VitePress 使用 Vite 作为开发服务器，提供了更快的热更新和流畅的开发体验，这正是我所追求的。</li></ol><p>因此，我选择将博客迁移到 <strong>VitePress</strong>，一个以 Vue 3 为基础的现代文档生成器，不仅能更高效地管理内容，还能提升整体性能和可扩展性。</p><h2 id="访问我的新博客"><a href="#访问我的新博客" class="headerlink" title="访问我的新博客"></a>访问我的新博客</h2><p>如果你喜欢我的技术分享，或者希望了解更新、更丰富的内容，欢迎访问我的新博客：</p><ul><li><a href="https://01petard.github.io/blog-vue-vitepress/">新博客（基于 VitePress）</a></li><li>如果你在国内访问，请使用我的影子网站（如果还可以访问的话）：<a href="http://www.huangzexiao.top/">影子网站</a></li></ul><h2 id="旧博客仍然保留的内容"><a href="#旧博客仍然保留的内容" class="headerlink" title="旧博客仍然保留的内容"></a>旧博客仍然保留的内容</h2><p>我的旧博客依然保留了许多早期的文章，涉及的主题包括：</p><ul><li>Java 编程</li><li>Java 八股</li><li>软件的使用经验</li><li>个人的琐碎生活记录</li></ul><p>尽管我<strong>可能不会再更新 Hexo 博客了</strong>，但这些内容对学习和回顾基础知识仍然非常有价值，所以特此保留。</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢每一位访问和支持我的旧博客的读者！希望你们能继续在新博客中找到对你有帮助的内容，期待与你们一起学习和进步。</p><blockquote><p><strong>欢迎加入新的博客世界</strong>，一同探索更多技术的奥秘！</p></blockquote>]]></content>
    
    
    <summary type="html">欢迎加入新的博客世界，一同探索更多技术的奥秘！</summary>
    
    
    
    <category term="学习" scheme="https://01petard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="博客" scheme="https://01petard.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="VitePress" scheme="https://01petard.github.io/tags/VitePress/"/>
    
  </entry>
  
  <entry>
    <title>MRK3399KJ之简短折腾CasaOS</title>
    <link href="https://01petard.github.io/2024/11/03/MRK3399KJ%E4%B9%8B%E6%8A%98%E8%85%BECasaOS/"/>
    <id>https://01petard.github.io/2024/11/03/MRK3399KJ%E4%B9%8B%E6%8A%98%E8%85%BECasaOS/</id>
    <published>2024-11-02T21:23:00.000Z</published>
    <updated>2024-11-04T15:02:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>折腾casaos</p><p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411030340431.png" alt="image-20241103034008373"></p><p>折腾tv盒子助手</p><p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411030458949.png" alt="image-20241103045845905"></p>]]></content>
    
    
    <summary type="html">大内存还是爽啊！</summary>
    
    
    
    <category term="软件" scheme="https://01petard.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="MRK3399" scheme="https://01petard.github.io/tags/MRK3399/"/>
    
    <category term="CasaOS" scheme="https://01petard.github.io/tags/CasaOS/"/>
    
  </entry>
  
  <entry>
    <title>路由器刷入OpenWrt系统搞机过程</title>
    <link href="https://01petard.github.io/2024/11/02/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%88%B7%E5%85%A5OpenWrt%E7%B3%BB%E7%BB%9F%E6%90%9E%E6%9C%BA%E8%BF%87%E7%A8%8B/"/>
    <id>https://01petard.github.io/2024/11/02/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%88%B7%E5%85%A5OpenWrt%E7%B3%BB%E7%BB%9F%E6%90%9E%E6%9C%BA%E8%BF%87%E7%A8%8B/</id>
    <published>2024-11-02T15:12:00.000Z</published>
    <updated>2024-11-02T15:14:18.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p> 这次玩了波大的。结果还是很不错的！</p></blockquote><h1 id="搞机的心路历程"><a href="#搞机的心路历程" class="headerlink" title="搞机的心路历程"></a>搞机的心路历程</h1><p>事情是这样的，我在闲鱼上刷着手机，没事看到了瑞莎E20C这个小软路由开发板，因为很mini，所以一下子对软路由产生了兴趣，遂去tb看了价格，2+0内存200左右，可以接受。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411022107462.png" alt="image-20241102210716302" style="zoom:50%;" /><p>于是我又去b站看了下软路由，但是我发现玩<strong>软路由</strong>的前提是需要首先有一个<strong>硬路由</strong>。将软路由作为旁路由接入硬路由（什么绕口令），而且<em>好像只能由连接了软路由的机器才能享受软路由的功能</em>，于是我开始对软路由产生了技术怀疑，我觉得这东西上手门槛有点高啊，需要至少两个路由器。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411022110806.png" alt="image-20241102211004626" style="zoom:46%;" /><p>以下便是我了解到的软路由的两种工作模式，我觉得方案一门槛太高，所以我思考了一下方案二，目前我在校，可以将当前的NX30 pro作为软路由，然后向学校的猫获得上网权限，这样的话所有接入这台路由器的设备都能享受到经过插件过滤的路由了。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411022110196.png" alt="image-20241102211023998" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411022111345.png" alt="image-20241102211110126" style="zoom:44%;" /><p>想象很美好，于是说干就干，我去b站找了教程，基本就是按照恩山论坛大佬的帖子走的。</p><p>NX30 pro刷OpenWrt教程：<a href="https://www.bilibili.com/video/BV1qV411M7FT/">H3C NX30Pro路由器刷OpenWrt，便宜好用，超详细刷机教程分享</a></p><p>恩山攻略贴：<a href="https://www.right.com.cn/forum/thread-8291820-1-1.html">H3C NX30 PRO 闭源驱动Openwrt&#x2F;GL.inet固件&#x2F;刷回原厂方法-OPENWRT专版-恩山无线论坛</a></p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411022123033.png" alt="image-20241102212314864" style="zoom:60%;" /><p>教程零门槛，就是telnet和ssh那些事，一个MobaXterm直接搞定。</p><h2 id="原设备的mac地址备份"><a href="#原设备的mac地址备份" class="headerlink" title="原设备的mac地址备份"></a>原设备的mac地址备份</h2><table><thead><tr><th>IP地址</th><th>MAC地址</th><th>备注</th></tr></thead><tbody><tr><td>192.168.124.10</td><td>A0:36:BC:28:61:96</td><td>windows冰立方</td></tr><tr><td>192.168.124.27</td><td>B8:27:EB:34:39:2B</td><td>树莓派3B</td></tr><tr><td>192.168.124.32</td><td>B8:27:EB:10:21:A9</td><td>树莓派2</td></tr><tr><td>192.168.124.27</td><td>5A:39:88:9E:9B:C8</td><td>MRK3399KJ</td></tr></tbody></table><p>#折腾过程</p><blockquote><p>此处省略一万个草泥马~</p><p>将NX30 pro从原厂系统刷成OpenWrt的过程太艰辛了！唉，说多了都是泪~~</p></blockquote><p>ok，装好了机子了，这台路由器被我插满了线，性能基本被榨干了吧</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411022125686.png" alt="image-20241102212555353" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411022126894.png" alt="image-20241102212619496" style="zoom: 33%;" /><h1 id="使用OpenClash"><a href="#使用OpenClash" class="headerlink" title="使用OpenClash"></a>使用OpenClash</h1><p>其实我想装OpenWrt，主要还是馋openclash的功能，我之前就一直被vpn所困扰，因为我想用一些软件或登录外网时，必须要开ssr软件或者在v2ray中切换规则或代理，因此如果路由器可以直接完成这一步的话，所以接入路由器的设备都能享受到路由转发的好处了，这个东西的好处对于我这样一个<strong>网络苦手</strong>来说是显而易见的，因此这次就主要在OpenWRT中折腾一下OpenClash。</p><p>我们进入OpenWRT，可以看到刷机非常成功，现在这台NX30 pro已经是OpenWRT的形状了（doge）。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411022133020.png" alt="image-20241102213326946" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411022147121.png" alt="image-20241102214731952" style="zoom: 40%;" /><h2 id="配置内核"><a href="#配置内核" class="headerlink" title="配置内核"></a>配置内核</h2><p>然后去“服务” -&gt; “OpenClash” -&gt; “全局设置” -&gt; “版本更新”，我这里将Dev内核和Meta内核配置好了，Tun内核我搞了很久都没成功，包括但不限于默认的的检测更新、使用ssh手动拖拽文件更新，总之就是不行，想了想自己其实并不会用到Tun模式，就作罢。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411022138856.png" alt="image-20241102213807800" style="zoom:80%;" /><h2 id="添加机场订阅"><a href="#添加机场订阅" class="headerlink" title="添加机场订阅"></a>添加机场订阅</h2><p>然后去配置一下机场，点击“服务” -&gt; “OpenClash” -&gt; “配置文件订阅” -&gt; “配置文件订阅” -&gt; “添加”，添加机场的订阅链接就基本ok了。然后OpenClash会重启。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411022141982.png" alt="image-20241102214123896" style="zoom:67%;" /><h2 id="完善DNS设置"><a href="#完善DNS设置" class="headerlink" title="完善DNS设置"></a>完善DNS设置</h2><p>重启后OpenClash提醒开启了IPV6的服务。这里也要说明一下，听别人说很多问题都是IPV6造成的，所以我就去“网络” -&gt; “DHCP&#x2F;DNS”里改了一些DNS设置，比如”忽略空域名解析“、”禁止解析IPv6 DNS记录，只返回 IPv4 DNS 域名记录“等等。</p><h2 id="选择节点"><a href="#选择节点" class="headerlink" title="选择节点"></a>选择节点</h2><p>之后去OpenClash的控制面板看一下吧，它提供了两种面板：Yacd 控制面板、  Dashboard 控制面板，我比较喜欢Yacd。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411022145550.png" alt="image-20241102214553505" style="zoom: 60%;" /><p>速率也是一目了然，去测个速吧，跑满了100M，符合预期。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411022150767.png" alt="image-20241102215011673" style="zoom:40%;" /><h1 id="开始享受"><a href="#开始享受" class="headerlink" title="开始享受~"></a>开始享受~</h1><p>折腾了一天，总算是搞好了，现在打开推特、油管、ChatGPT都不需要打开v2ray了，而且连接路由器的设备也不需要开小火箭了，直接想用什么就用什么，无敌！</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411022154030.png" alt="image-20241102215401645" style="zoom:25%;" />]]></content>
    
    
    <summary type="html">最先进的路由器系统——OpenWrt</summary>
    
    
    
    <category term="软件" scheme="https://01petard.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="路由器" scheme="https://01petard.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    <category term="OpenWrt" scheme="https://01petard.github.io/tags/OpenWrt/"/>
    
  </entry>
  
  <entry>
    <title>服务器部署指南</title>
    <link href="https://01petard.github.io/2024/10/30/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>https://01petard.github.io/2024/10/30/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2/</id>
    <published>2024-10-30T10:02:00.000Z</published>
    <updated>2024-10-31T05:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装nodejs环境"><a href="#安装nodejs环境" class="headerlink" title="安装nodejs环境"></a>安装nodejs环境</h2><p>在Windows和Macos上安装nodejs较方便，但是在Linux上就非常不方便，特此记录</p><p>去官网下载链接：<a href="http://nodejs.cn/download/">http://nodejs.cn/download</a></p><p>选择Linux二进制文件（x64）</p><p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404012300868.png" alt="image-20240401230017772"></p><p>或用wget命令下载指定版本的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v14.15.4/node-v14.15.4-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v16.13.0/node-v16.13.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><p>解压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf node-v14.15.4-linux-x64.tar.xz</span><br><span class="line">mkdir -p /usr/local/nodejs</span><br><span class="line">（之后所有nodejs安装的文件，例如“hexo”都会保存在/usr/local/nodejs目录下）</span><br><span class="line">mv node-v14.15.4-linux-x64/* /usr/local/nodejs/</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf node-v16.13.0-linux-x64.tar.xz</span><br><span class="line">mkdir -p /usr/local/nodejs</span><br><span class="line">（之后所有nodejs安装的文件，例如“hexo”都会保存在/usr/local/nodejs目录下）</span><br><span class="line">mv node-v16.13.0-linux-x64/* /usr/local/nodejs/</span><br></pre></td></tr></table></figure><p>创建软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立node软链接</span></span><br><span class="line">ln -s /usr/local/nodejs/bin/node /usr/local/bin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立npm 软链接</span></span><br><span class="line">ln -s /usr/local/nodejs/bin/npm /usr/local/bin</span><br></pre></td></tr></table></figure><p>更换镜像源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置镜像源加速</span></span><br><span class="line">npm config set registry https://registry.npmmirror.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看设置信息</span></span><br><span class="line">npm config list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证配置是否加载成功</span></span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p>验证是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="安装hexo博客环境"><a href="#安装hexo博客环境" class="headerlink" title="安装hexo博客环境"></a>安装hexo博客环境</h2><p>安装hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>创建软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（如果之前已经链接过hexo了，则删除/usr/local/bin目录下的hexo软链接，重新添加hexo软链接）</span><br><span class="line">ln -s /usr/local/nodejs/bin/hexo /usr/local/bin</span><br><span class="line">（这里的“/usr/local/nodejs/bin/hexo”就是nodejs安装的hexo命令文件目录）</span><br></pre></td></tr></table></figure><p>查看是否生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h2 id="安装pm2自动化任务脚本"><a href="#安装pm2自动化任务脚本" class="headerlink" title="安装pm2自动化任务脚本"></a>安装pm2自动化任务脚本</h2><p>安装pm2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure><p>（如果命令没有找到，则需要软链接一下pm2）</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/nodejs/bin/pm2 /usr/local/bin</span><br></pre></td></tr></table></figure><p>在博客根目录下创建文件<code>hexo_run.cjs</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line"><span class="title function_">exec</span>(<span class="string">&#x27;hexo server&#x27;</span>,<span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(error)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;exec error: $&#123;error&#125;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stdout: $&#123;stdout&#125;&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stderr: $&#123;stderr&#125;&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在博客目录下运行脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start hexo_run.cjs</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404012259254.png" alt="image-20240401225914113"></p><p>关闭脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 stop hexo_run.cjs</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404012259639.png" alt="image-20240401225935604"></p><h2 id="安装zip压缩包处理命令"><a href="#安装zip压缩包处理命令" class="headerlink" title="安装zip压缩包处理命令"></a>安装zip压缩包处理命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zip unzip</span><br></pre></td></tr></table></figure><h2 id="安装git版本控制"><a href="#安装git版本控制" class="headerlink" title="安装git版本控制"></a>安装git版本控制</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;01Petard&quot;</span><br><span class="line">git config --global user.email &quot;1520394133@qq.com&quot;</span><br><span class="line">git config --global init.defaultBranch main       # 设置默认分支名为main，而不是master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择题用配置</span></span><br><span class="line">git config --global gui.encoding utf-8            # gui界面的编码方式改为utf-8</span><br><span class="line">git config --global i18n.commitencoding utf-8     # 将commit时信息转为urf-8，默认二进制</span><br><span class="line">git config --global i18n.logoutputencoding utf-8  # 显示日志时的转为utf-8，默认二进制</span><br><span class="line">git config --global core.quotepath false          # （推荐：false，不要转义）是否转义中文文件名或路径，默认转义</span><br><span class="line">git config --global core.autocrlf true            # （推荐：true，开启）是否开启crlf自动换行（项目涉及windows时建议开启）</span><br><span class="line">git config --global core.filemode true            # （推荐：true，忽略）是否忽略文件的权限改变</span><br><span class="line">git config --global core.safecrlf true            # （推荐：true，检查）是否检查行结束符在提交或检出时被正确转换</span><br><span class="line"></span><br><span class="line">git config --global pull.rebase true              # git pull时，不合并，而是将本地更改rebase在最新的远程提交之上，默认false为merge合并</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;1520394133@qq.com&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h2 id="使用脚本安装1panel-和-docker"><a href="#使用脚本安装1panel-和-docker" class="headerlink" title="使用脚本安装1panel 和 docker"></a>使用脚本安装1panel 和 docker</h2><p>用<code>pi.sh</code>安装</p><p>项目地址：<a href="https://gitee.com/HuaLuoTianJi/OrangePiShell_hzx">Pseudnuos&#x2F;OrangePiShell_hzx</a></p><p>作者地址：<a href="https://github.com/wukongdaily/OrangePiShell">wukongdaily&#x2F;OrangePiShell: 在Linux上快速部署一些好用的docker项目。起初只是为了香橙派制作。推荐使用1panel面板轻松管理docker。</a></p><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo ...</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">从0开始部署hexo博客的常用命令</summary>
    
    
    
    <category term="软件" scheme="https://01petard.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="Linux" scheme="https://01petard.github.io/tags/Linux/"/>
    
    <category term="部署" scheme="https://01petard.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
    <category term="博客" scheme="https://01petard.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>windows终端美化</title>
    <link href="https://01petard.github.io/2024/10/27/windows%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/"/>
    <id>https://01petard.github.io/2024/10/27/windows%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/</id>
    <published>2024-10-27T07:19:00.000Z</published>
    <updated>2024-10-27T07:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>俗话说，RGB就是战斗力，颜值就是生产力！所以，max和linux有iTerm + ohmyzsh，windows就有Terminal + ohmyposh</p><p>这次就来折腾一下，还是挺方便的。</p></blockquote><h2 id="1-去微软商店下载-Windows-Terminal"><a href="#1-去微软商店下载-Windows-Terminal" class="headerlink" title="1. 去微软商店下载 Windows Terminal"></a>1. 去微软商店下载 <code>Windows Terminal</code></h2><h2 id="2-安装Chocolatey"><a href="#2-安装Chocolatey" class="headerlink" title="2. 安装Chocolatey"></a>2. 安装Chocolatey</h2><p>在<a href="https://chocolatey.org/install">Chocolatey Software | Installing Chocolatey</a>网页下，复制安装脚本</p><img src="https://picgo-img-repo.oss-cn-beijing.aliyuncs.com/img/135dba74fade69aaada79a0025f5312e.png" alt="img" style="zoom: 50%;" /><p>Chocolatey安装脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://community.chocolatey.org/install.ps1&#x27;))</span><br></pre></td></tr></table></figure><p>复制到终端中</p><p>即可自动安装<code>Chocolatey</code></p><p>使用<code>choco -v</code>检查一下</p><h2 id="3-设置管理员权限启动"><a href="#3-设置管理员权限启动" class="headerlink" title="3. 设置管理员权限启动"></a>3. 设置管理员权限启动</h2><p>启用管理员模式，不然后面可能会权限不足，安装失败。</p><img src="https://picgo-img-repo.oss-cn-beijing.aliyuncs.com/img/cebec2ec3649bda0fb0350cdf9c7b2e1.png" alt="img" style="zoom:67%;" /><h2 id="4-安装字体"><a href="#4-安装字体" class="headerlink" title="4. 安装字体"></a>4. 安装字体</h2><p>推荐使用等宽连体带图标(终端显示的花样多一点)的字体</p><p>如果用默认字体，ohmyposh会乱码</p><p>我使用<a href="https://www.nerdfonts.com/">Nerd Fonts</a></p><p>安装使用<code>Chocolatey</code>即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install nerd-fonts-hack</span><br></pre></td></tr></table></figure><h2 id="5-编辑windows-terminal-配置使用Nerd-Fonts字体"><a href="#5-编辑windows-terminal-配置使用Nerd-Fonts字体" class="headerlink" title="5. 编辑windows terminal 配置使用Nerd Fonts字体"></a>5. 编辑windows terminal 配置使用Nerd Fonts字体</h2><p>这里很多人都会去下载一个powershell，其实没有必要，Windows自带的powershell的版本和功能已经可以满足要求。</p><img src="https://picgo-img-repo.oss-cn-beijing.aliyuncs.com/img/e0547c1027f29d4dc2590790efab2f4c.png" alt="img" style="zoom:67%;" /><img src="https://picgo-img-repo.oss-cn-beijing.aliyuncs.com/img/ebeaabf0f74eb37d41173f7f4bfbbc47.png" alt="img" style="zoom:67%;" /><p>当然也可以直接使用配置文件，<code>&quot;defaults&quot;</code>在<code>&quot;profiles&quot;</code>属性下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">json&quot;defaults&quot;: </span><br><span class="line">&#123;</span><br><span class="line">    &quot;backgroundImage&quot;: null,</span><br><span class="line">    &quot;colorScheme&quot;: &quot;Campbell&quot;,</span><br><span class="line">    &quot;cursorShape&quot;: &quot;filledBox&quot;,</span><br><span class="line">    &quot;experimental.retroTerminalEffect&quot;: false,</span><br><span class="line">    &quot;font&quot;: </span><br><span class="line">    &#123;</span><br><span class="line">        &quot;face&quot;: &quot;CodeNewRoman Nerd Font Mono&quot;,</span><br><span class="line">        &quot;size&quot;: 14.0,</span><br><span class="line">        &quot;weight&quot;: &quot;normal&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;opacity&quot;: 90,</span><br><span class="line">    &quot;padding&quot;: &quot;0&quot;,</span><br><span class="line">    &quot;scrollbarState&quot;: &quot;hidden&quot;,</span><br><span class="line">    &quot;useAcrylic&quot;: false</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>其余的配置文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">json&quot;copyFormatting&quot;: &quot;none&quot;,</span><br><span class="line">&quot;copyOnSelect&quot;: false,</span><br><span class="line">&quot;defaultProfile&quot;: &quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;,</span><br><span class="line">&quot;alwaysOnTop&quot;: false,</span><br><span class="line">&quot;alwaysShowTabs&quot;: true,</span><br><span class="line">&quot;autoHideWindow&quot;: false,</span><br><span class="line">&quot;disableAnimations&quot;: false,</span><br><span class="line">&quot;firstWindowPreference&quot;: &quot;defaultProfile&quot;,</span><br><span class="line">&quot;focusFollowMouse&quot;: false,</span><br><span class="line">&quot;initialCols&quot;: 88,</span><br><span class="line">&quot;initialPosition&quot;: &quot;750,350&quot;,</span><br><span class="line">&quot;initialRows&quot;: 24,</span><br><span class="line">&quot;launchMode&quot;: &quot;focus&quot;,</span><br></pre></td></tr></table></figure><p>大概在这个行数</p><img src="https://picgo-img-repo.oss-cn-beijing.aliyuncs.com/img/075e892a965f8d16d6aae7516bf7a769.png" alt="img" style="zoom:67%;" /><p>添加快捷键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">json&quot;actions&quot;: </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;command&quot;: </span><br><span class="line">        &#123;</span><br><span class="line">            &quot;action&quot;: &quot;copy&quot;,</span><br><span class="line">            &quot;singleLine&quot;: false</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;keys&quot;: &quot;ctrl+c&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;command&quot;: &quot;paste&quot;,</span><br><span class="line">        &quot;keys&quot;: &quot;ctrl+v&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;command&quot;: </span><br><span class="line">        &#123;</span><br><span class="line">            &quot;action&quot;: &quot;splitPane&quot;,</span><br><span class="line">            &quot;split&quot;: &quot;auto&quot;,</span><br><span class="line">            &quot;splitMode&quot;: &quot;duplicate&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;keys&quot;: &quot;alt+shift+d&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;command&quot;: &quot;find&quot;,</span><br><span class="line">        &quot;keys&quot;: &quot;ctrl+shift+f&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;command&quot;: &quot;toggleFocusMode&quot;,</span><br><span class="line">        &quot;keys&quot;: &quot;alt+z&quot;</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>这样可以使用<code>alt+z</code>打开标题栏</p><h2 id="5-允许终端运行本地脚本"><a href="#5-允许终端运行本地脚本" class="headerlink" title="5. 允许终端运行本地脚本"></a>5. 允许终端运行本地脚本</h2><p>输入这个命令即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><p>这一步是确保后面终端自动使用ohmyposh启动</p><img src="https://picgo-img-repo.oss-cn-beijing.aliyuncs.com/img/77680a9388ce0afedeffe5407637f452.png" alt="img" style="zoom:80%;" /><h2 id="6-安装oh-my-posh"><a href="#6-安装oh-my-posh" class="headerlink" title="6. 安装oh-my-posh"></a>6. 安装oh-my-posh</h2><ol><li><p>安装<code>oh-my-posh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install oh-my-posh</span><br></pre></td></tr></table></figure></li><li><p>创建<code>powershell</code>配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (!(Test-Path -Path $PROFILE )) &#123; New-Item -Type File -Path $PROFILE -Force &#125;</span><br></pre></td></tr></table></figure></li><li><p>打开配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad $PROFILE</span><br></pre></td></tr></table></figure></li><li><p>写入指令，这里是让终端在启动时加载<code>oh-my-posh</code>配置文件，其中<code>~/.omp.theme.json</code>是配置文件的所在路径，windows的话就是在<code>C:\Users\Administrator</code>下创建<code>.omp.theme.json</code>文件并写入配置即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config ~/.omp.theme.json | Invoke-Expression</span><br></pre></td></tr></table></figure></li><li><p>关闭启动时的banner，添加<code>-nologo</code>项即可</p></li></ol><img src="https://picgo-img-repo.oss-cn-beijing.aliyuncs.com/img/3714b3074d1258af263f5a066f6e03c5.png" alt="img" style="zoom:67%;" /><h2 id="7-安装自动补全插件"><a href="#7-安装自动补全插件" class="headerlink" title="7. 安装自动补全插件"></a>7. 安装自动补全插件</h2><ol><li><p>先安装最新的<code>PowerShellGet</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bashInstall-Module -Name PowerShellGet -Force</span><br><span class="line">Exit</span><br></pre></td></tr></table></figure></li><li><p>再安装<code>PSReadLine</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Module PSReadLine -AllowPrerelease -Force</span><br></pre></td></tr></table></figure></li><li><p>在<code>powsershell</code>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad.exe $PROFILE</span><br></pre></td></tr></table></figure></li><li><p>在打开的界面输入下面内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bashSet-PSReadLineKeyHandler -Key Tab -Function MenuComplete #Tab键会出现自动补全菜单</span><br><span class="line">Set-PSReadlineKeyHandler -Key UpArrow -Function HistorySearchBackward</span><br><span class="line">Set-PSReadlineKeyHandler -Key DownArrow -Function HistorySearchForward</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上下方向键箭头，搜索历史中进行自动补全</span></span><br></pre></td></tr></table></figure></li><li><p>保存重启<code>powershell</code>即可</p></li></ol><h2 id="8-安装oh-my-posh主题"><a href="#8-安装oh-my-posh主题" class="headerlink" title="8. 安装oh-my-posh主题"></a>8. 安装oh-my-posh主题</h2><ol><li><p>查看 <code>oh-my-posh</code> 提供的所有主题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-PoshThemes</span><br></pre></td></tr></table></figure></li><li><p>预览一个主题（将 <code>name.omp.json</code> 替换为你想要的主题名称）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH\your_theme.omp.json&quot; | Invoke-Expression</span><br></pre></td></tr></table></figure></li><li><p>设置默认主题</p><ol><li><p>编辑 PowerShell 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad $PROFILE</span><br></pre></td></tr></table></figure></li><li><p>将以下命令添加到文件中（将 <code>your_theme.omp.json</code> 替换为你选择的主题）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH\your_theme.omp.json&quot; | Invoke-Expression</span><br></pre></td></tr></table></figure></li></ol></li><li><p>自定义主题</p><ol><li><p>查看主题的配置文件目录，我的是在 <code>C:\Program Files (x86)\oh-my-posh\themes</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $env:POSH_THEMES_PATH</span><br></pre></td></tr></table></figure></li><li><p>直接编辑 <code>your_theme.omp.json</code> 文件。也可以在文件中更改提示符的布局、颜色和显示信息等。配置项的说明可以在 [oh-my-posh](<a href="https://github.com/JanDeDobbeleer/oh-my-posh/tree/main/themes">oh-my-posh&#x2F;themes at main · JanDeDobbeleer&#x2F;oh-my-posh</a>) 官方文档 中找到。</p></li></ol></li></ol><blockquote><p>友情链接：</p><p><a href="https://ohmyposh.dev/docs/themes#json">Themes | Oh My Posh</a></p><p><a href="https://github.com/JanDeDobbeleer/oh-my-posh/tree/main/themes">oh-my-posh&#x2F;themes at main · JanDeDobbeleer&#x2F;oh-my-posh</a></p></blockquote><h2 id="9-展示"><a href="#9-展示" class="headerlink" title="9. 展示"></a>9. 展示</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410252354435.png" alt="image-20241025235417348" style="zoom:80%;" />]]></content>
    
    
    <summary type="html">Terminal + oh-my-posh</summary>
    
    
    
    <category term="软件" scheme="https://01petard.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="windows" scheme="https://01petard.github.io/tags/windows/"/>
    
    <category term="终端" scheme="https://01petard.github.io/tags/%E7%BB%88%E7%AB%AF/"/>
    
    <category term="ohmyposh" scheme="https://01petard.github.io/tags/ohmyposh/"/>
    
  </entry>
  
  <entry>
    <title>curl命令的用法</title>
    <link href="https://01petard.github.io/2024/10/22/curl%E5%91%BD%E4%BB%A4%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>https://01petard.github.io/2024/10/22/curl%E5%91%BD%E4%BB%A4%E7%9A%84%E7%94%A8%E6%B3%95/</id>
    <published>2024-10-22T09:58:00.000Z</published>
    <updated>2024-10-25T12:08:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>curl</code> 是一个非常强大的命令行工具，用于从服务器传输数据或向服务器传输数据。它支持许多协议（如 HTTP、HTTPS、FTP 等）。以下是使用 <code>curl</code> 发送不同类型的请求的基本方法。</p><p>在开发中，<code>curl</code>可以替代<code>postman</code>完成一些简单的前端模拟请求</p><h2 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h2><p>发送无状态的请求，参数类型指定的形式比较自由，url的双引号可加可不加，参数前缀指定也比较随意</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.baidu.com</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://localhost:5050/test-redis&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &quot;http://localhost:5050/test-redis&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --request GET --url &quot;http://localhost:5050/test-redis&quot;</span><br></pre></td></tr></table></figure><p>携带token发送请求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://localhost:5050/api/profile&quot; -H &quot;Authorization: &lt;token&gt;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --request GET --url &quot;http://localhost:5050/api/profile&quot; --header &quot;Authorization: &lt;token&gt;&quot;</span><br></pre></td></tr></table></figure><p>模拟一个POST请求</p><ol><li><p>通过数据的方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -d &quot;username=admin&amp;password=123&quot; &quot;http://localhost:5050/api/login&quot;</span><br></pre></td></tr></table></figure></li><li><p>通过表单的方式（一般用于PUT请求）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;http://localhost:5050/api/login&quot; -d &quot;username=admin&quot; -d &quot;password=123&quot;</span><br></pre></td></tr></table></figure></li><li><p>通过查询参数或路径参数的方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;http://localhost:5050/api/login?username=admin&amp;password=123&quot;</span><br></pre></td></tr></table></figure></li><li><p>通过 Json 的方式<em>（我没有测试成功，推测是Windows 命令行解释器的解析有问题）</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;http://localhost:5050/api/login&quot; -H &quot;Content-Type: application/json&quot; -d &#x27;&#123;&quot;username&quot;:&quot;admin&quot;, &quot;password&quot;:&quot;123&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --request POST --url &#x27;http://localhost:5050/api/login&#x27; --header &#x27;content-type: application/json&#x27; --data &quot;&#123;&quot;username&quot;:&quot;admin&quot;, &quot;password&quot;:&quot;123&quot;&#125;&quot;</span><br></pre></td></tr></table></figure></li></ol><p>模拟一个DELETE请求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE http://localhost:5050/api/logout?userId=666</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --request DELETE --url http://localhost:5050/api/logout?userId=666</span><br></pre></td></tr></table></figure><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><p>通过 <code>-O</code> 参数可以保存下载的文件到当前目录，通过 <code>--connect-timeout</code> 参数来设置连接的超时时间（以秒为单位）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://api.ee123.net/img/bingimg/dayimg.jpg --connect-timeout 5</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O http://example.com/file.zip --connect-timeout 5</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410221737880.jpg" alt="dayimg"></p>]]></content>
    
    
    <summary type="html">一个命令行工具</summary>
    
    
    
    <category term="软件" scheme="https://01petard.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="curl" scheme="https://01petard.github.io/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>My Java Guide - JVM</title>
    <link href="https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20JVM/"/>
    <id>https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20JVM/</id>
    <published>2024-10-14T16:23:00.000Z</published>
    <updated>2024-10-14T16:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="———————JVM———————"><a href="#———————JVM———————" class="headerlink" title="———————JVM———————"></a><div align="center">———————<strong>JVM</strong>———————</div></h1><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="查看字节码的软件"><a href="#查看字节码的软件" class="headerlink" title="查看字节码的软件"></a>查看字节码的软件</h2><ul><li><p>jclasslib插件</p></li><li><p>javap</p><ul><li><pre><code class="shell">jar –xvf xxxx.jar<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```shell</span><br><span class="line">  javap -v xxxx.class &gt; xxxx.txt</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><strong>Arthas</strong></p><ul><li><pre><code class="shell">java -jar arthas-boot.jar<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```shell</span><br><span class="line">  jad --source-only com.demo.package.Main.clss</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h2 id="常用的Java内存调试工具"><a href="#常用的Java内存调试工具" class="headerlink" title="常用的Java内存调试工具"></a>常用的Java内存调试工具</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jmap、jstack、jconsole、jhat</span><br><span class="line">jstack 可以看当前栈的情况，jmap 查看内存，jhat 进行 dump 堆的信息 mat</span><br></pre></td></tr></table></figure><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="Java程序执行过程"><a href="#Java程序执行过程" class="headerlink" title="Java程序执行过程"></a>Java程序执行过程</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409111603295.png" alt="image-20240911160342145" style="zoom:80%;" /><h2 id="JVM的运行流程"><a href="#JVM的运行流程" class="headerlink" title="JVM的运行流程"></a>JVM的运行流程</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405181542311.png" alt="image-20240518154206180" style="zoom:55%;" /><h2 id="JVM的组成"><a href="#JVM的组成" class="headerlink" title="JVM的组成"></a>JVM的组成</h2><ul><li><strong>类加载子系统（Class Loader）</strong>：核心组件类加载器，负责将字节码文件中的内容加载到内存中。</li><li><strong>运行时数据区（Runtime Data Area）</strong>：JVM管理的内存，创建出来的对象、类的信息等等内容都会放在这块区域中。</li><li><strong>执行引擎（Execution Engine）</strong>：包含了即时编译器、解释器、垃圾回收器，执行引擎使用解释器将字节码指令解释成机器码，使用即时编译器优化性能，使用垃圾回收器回收不再使用的对象。</li><li><strong>本地接口（Native Interface）</strong>：调用本地使用C&#x2F;C++编译好的方法，本地方法在Java中声明时，都会带上native关键字。</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404152105989.png" alt="1359e67d-c872-4a59-87bf-224d31a36b1c" style="zoom:85%;" /><h2 id="JVM的内存结构"><a href="#JVM的内存结构" class="headerlink" title="JVM的内存结构"></a>JVM的内存结构</h2><p>JVM 分为堆区和栈区，还有方法区，初始化的对象放在堆里面，引用放在栈里面， class 类信息常量池（static 常量和 static 变量）等放在方法区</p><ul><li><p><strong>堆</strong>(Heap)：虚拟机中最大的一块内存区域，几乎所有的对象实例都在这里分配内存，初始化的对象、成员变量 （非 static 变量），所有的对象实例和数组都要在堆上分配。</p><ul><li><strong>年轻代</strong>(Young Generation)<ul><li>Eden区</li><li>Survivor区(From和To)</li></ul></li><li><strong>老年代</strong>(Old Generation)</li><li><strong>字符串常量池</strong></li></ul></li><li><p><strong>方法区</strong>(Method Area) &#x2F; <strong>元空间</strong>(Meta Space)：主要是存储类信息，常量池（static 常量和 static 变量），编译后的代码（字节码）等数据。方法区是被所有线程共享，所有字段和方法字节码，以及一些特殊方法如构造器，接口代码也在此定义。简单说，所有定义的方法的信息都保存在该区域，此区属于共享区间。静态变量+常量+类信息+运行时常量池存在方法区中，实例变量存在堆内存中</p><ul><li><strong>运行时常量池</strong>(Runtime Constant Pool): 方法区内的一部分，存放了编译期生成的各种字面量和符号引用。</li></ul></li><li><p><strong>程序计数器</strong>(Program Counter Register)：每个线程都有一个程序计数器。是一块较小的内存空间，记录当前线程执行的行号，本质是一个指针，指向方法区中的方法字节码（下一个将要执行的指令代码），由执行引擎读取下一条指令。</p></li><li><p><strong>虚拟机栈</strong>(VM Stack)：由栈帧组成，调用一个方法就会压入一帧，栈帧上面存储<strong>局部变量表</strong>，<strong>操作数栈</strong>，<strong>方法出口</strong>等方法从调用直至执行完成的过程中的<strong>所有数据</strong>，局部变量表存放的是 8 大基础类型加上一个应用类型，所以还是一个指向地址的指针。栈也叫栈内存，主管Java程序的运行，是在线程创建时创建，它的生命周期是跟随线程的生命周期，线程结束栈内存也就释放，对于栈来说不存在垃圾回收问题，只要线程一结束该栈就Over，生命周期和线程一致，是线程私有的。</p></li><li><p><strong>本地方法栈</strong>(Native Method Stack)：与虚拟机栈功能类似，为 Native 方法服务。它的具体做法是 Native Method Stack中登记native方法，在Execution Engine 执行时加载native libraries。</p></li></ul><h2 id="JVM的版本变化（JDK-7-8）"><a href="#JVM的版本变化（JDK-7-8）" class="headerlink" title="JVM的版本变化（JDK 7~8）"></a>JVM的版本变化（JDK 7~8）</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405181600231.png" alt="image-20240518160048142" style="zoom:55%;" /><p>1.7中的永久代（存储的是类信息、静态变量、常量、编译后的代码）在堆中</p><p>1.8移除了永久代，把数据存储到了本地内存的元空间中，防止内存溢出</p><p>在JDK7中，堆内存通常被分为Nursery内存（young generation）、长时内存（old generation）和永久内存（Permanent Generation for VM Matedata）。</p><p>在JDK8中，存放元数据中的永久内存从堆内存中移到了本地内存（native memory）中，因此不再占用堆内存。这一改变有助于避免由于永久内存不足而导致的内存溢出错误。同时，JDK8中方法区的实现也发生了变化，它现在存在于元空间（Metaspace）中，且元空间与堆内存不再连续，而是存在于本地内存中。</p><h2 id="Java内存模型（JMM）"><a href="#Java内存模型（JMM）" class="headerlink" title="Java内存模型（JMM）"></a><a href="#Return_JavaMemoryModel">Java内存模型（JMM）</a><a id="JavaMemoryModel"></a></h2><p>Java内存模型（<code>JMM</code>，Java Memory Model）主要关注的是线程之间如何通信，以及如何确保线程之间共享数据的一致性。</p><p><code>JMM</code> 是 <code>JVM</code> 规范的一部分，它<strong>定义了多线程对<code>共享变量</code>的访问规则、可见性、有序性和原子性</strong>。</p><p><code>JMM</code> 的设计目的是为了<strong>保证在多线程环境下程序执行的一致性和可预测性</strong>。</p><p><code>JMM</code> 把内存分为两块，一块是私有线程的<strong>工作区域</strong>（工作内存），一块是所有线程的<strong>共享区域</strong>（主内存）线程跟线程之间是相互隔离，线程跟线程交互需要通过主内存。</p><h2 id="JMM的特性"><a href="#JMM的特性" class="headerlink" title="JMM的特性"></a>JMM的特性</h2><p>为了保证下述特性，Java内存模型采用了一些机制，如happens-before原则，它是一组必须遵守的规则，确保了多线程环境下变量更新的可见性。当一个线程的某个操作发生在另一个线程的操作之前时，就意味着前者对后者有发生的影响。</p><p><strong>可见性</strong></p><p>可见性是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。Java内存模型是通过在变量修改时记录锁标识（如synchronized关键字）来保证可见性的。当一个变量被声明为volatile时，也会提供一种较弱形式的可见性保证。</p><p><strong>原子性</strong></p><p>原子性是指一个操作要么全部完成，要么全部不完成，不会中断。Java内存模型中基本数据类型的赋值操作具有原子性。对于复合操作（如i++），如果不特别标记（如使用synchronized），则不具备原子性。</p><p><strong>有序性</strong></p><p>有序性是指程序执行的顺序按照代码的先后顺序来进行，但由于指令重排序的存在，实际执行可能会与代码顺序有所不同。Java内存模型通过锁和volatile等关键字来强制执行上下文的有序性。</p><p><strong>指令重排序</strong></p><p>指令重排序是为了优化程序执行效率，编译器和处理器可能会改变语句的执行顺序，只要最终结果与按照原顺序执行的结果相同。虽然大多数情况下这种重排序不会影响单线程程序的正确性，但对于多线程程序来说，就可能会影响程序的正确性。</p><h2 id="JMM的内存溢出情况"><a href="#JMM的内存溢出情况" class="headerlink" title="JMM的内存溢出情况"></a>JMM的内存溢出情况</h2><ol><li><strong>栈内存溢出</strong>：如果请求栈的深度过大而超出了栈所能承受的范围，就会抛出<strong>StackOverflowError</strong>错误。这通常发生在有大量递归调用的情况下。</li><li><strong>堆内存溢出</strong>：当堆内存不足以存放更多的对象时，会发生堆内存溢出。错误信息通常显示为：java.lang.<strong>OutOfMemoryError</strong>: Java heap space。</li><li><strong>方法区&#x2F;元空间内存溢出</strong>：如果加载的类过多或者常量池中保存的常量过多、动态代理导致反复生成的类型过多，都有可能导致方法区&#x2F;元空间的内存溢出。</li></ol><h1 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h1><p><strong>含义</strong>：每个线程运行时所需要的内存。每个虚拟机<strong>栈</strong>（Stack）由多个<strong>栈帧</strong>（Stack Frame）组成，对应着每次方法调用时所占用的内存。每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法。</p><blockquote><p><strong>栈帧</strong>中主要保存3 类数据：</p><p>本地变量（Local Variables）：输入参数和输出参数以及方法内的变量</p><p>栈操作（Operand Stack）：记录出栈、入栈的操作； 栈帧数据（Frame Data）:包括类文件、方法等。</p><p>栈中的数据都是以栈帧（Stack Frame）的格式存在 遵循“先进后出”&#x2F;“后进先出”原则</p></blockquote><p><strong>栈内存溢出</strong>：<strong>栈帧过多</strong>（递归调用），或<strong>栈帧过大</strong></p><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><p><strong>含义</strong>：通过类的权限定名获取该类的二进制字节流的代码块叫做类加载器。 负责加载class文件，class文件在文件开头有特定的文件标示，并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。</p><p><strong>作用</strong>：在类加载过程中，获取并加载字节码（.class文件），放到内存中，转换成二进制文件（byte[]），并调用虚拟机底层方法将二进制文件转换成方法区和堆中的数据。</p><p><strong>类型</strong>：</p><ul><li><strong>启动类</strong>加载器（Bootstrap Class Loader）：加载核心jar包（JAVA_HOME&#x2F;jre&#x2F;lib目录下的库）</li><li><strong>扩展类</strong>加载器（Extensions Class Loader）：加载通用的扩展jar包（JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;ext目录中的类）</li><li><strong>应用程序类</strong>加载器（Application Class Loader）：加载项目中的类、maven中的引用的jar包等（加载classPath下的类）</li></ul><p><strong>类加载的过程</strong>：</p><ol><li>加载、验证、准备、解析、初始化。然后是使用和卸载</li><li>通过全限定名来加载生成 class 对象到内存中，然后进行验证这个 class 文件，包括文 件格式校验、元数据验证，字节码校验等。准备是对这个对象分配内存。</li><li>解析是将符 号引用转化为直接引用（指针引用），初始化就是开始执行构造器的代码</li></ol><h2 id="类的生命周期，类装载的执行过程"><a href="#类的生命周期，类装载的执行过程" class="headerlink" title="类的生命周期，类装载的执行过程"></a>类的生命周期，类装载的执行过程</h2><ol><li><p><strong>加载</strong>：类加载器根据类的全限定名获取类的二进制数据流，解析二进制数据流为方法区内的Java类模型，最后创建java.lang.Class类的实例</p></li><li><p>连接：</p><ul><li><strong>验证</strong>：验证内容是否满足《Java虚拟机规范》（文件格式验证、元信息验证、验证程序执行指令的语义、符号引用验证）</li><li>准备：给静态变量赋初值</li><li><strong>解析</strong>：将常量池中的符号引用替换成指向内存的直接引用。</li></ul></li><li><p><strong>初始化</strong>：执行字节码文件中 <code>clinit</code> 方法的字节码指令，包含了静态代码块中的代码，并为静态变量赋值</p></li><li><p>使用：调用静态类成员信息、使用new关键字为其创建对象实例、执行用户的程序代码</p></li><li><p>卸载（详见垃圾回收）：代码执行完毕后，JVM销毁Class对象</p></li></ol><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>双亲委派机制：当一个类加载器接收到加载类的任务时，会向上查找是否加载过，如果加载过，就直接返回，如果没有加载，就向下委派子类加载。</p><p><strong>作用：</strong></p><ul><li>避免核心类库被覆写，确保完整性、安全性。</li><li>避免某一个类被重复加载，确保唯一性。</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404171633515.png" alt="image-20240417163337417" style="zoom:45%;" /><h2 id="如何打破双亲委派机制？"><a href="#如何打破双亲委派机制？" class="headerlink" title="如何打破双亲委派机制？"></a>如何打破双亲委派机制？</h2><ul><li><p><strong>自定义类加载器</strong>：定义类加载器并且重写<code>loadclass</code>方法，去除双亲委派机制的代码（Tomcat的应用之间类隔离）。</p></li><li><p><strong>线程上下文类加载器</strong>：利用SPI机制和上下文类加载器加载类，比如<code>JDBC</code>、<code>JNDI</code>、<code>JCE</code>、<code>JAXB</code>和<code>JBI</code>等</p><blockquote><p>JDBC案例：</p><ol><li>启动类加载器加载DriverManager。</li><li>在初始化DriverManager时，通过SPI机制加载jar包中的myq驱动。</li><li>SPI中利用了线程上下文类加载器（应用程序类加载器）去加载类并创建对象。</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404162258658.png" style="zoom:45%;" /></blockquote></li><li><p><em><strong>OSGi框架的类加载器：OSGi框架实现了一套新的类加载器机制，允许同级之间委托进行类的加载</strong></em></p></li></ul><h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><h2 id="运行时数据区域（JDK1-8）"><a href="#运行时数据区域（JDK1-8）" class="headerlink" title="运行时数据区域（JDK1.8）"></a>运行时数据区域（JDK1.8）</h2><ul><li><p>线程不共享：</p><ul><li><p><strong>程序计数器</strong>：记录当前要执行的字节码指令的地址。可以控制程序指令的进行实现分支、跳转、异常等逻辑。</p></li><li><p><strong>虚拟机栈</strong>：采用栈的数据结构来管理方法调用中的基本数据，每一个方法的调用使用一个<strong>栈帧</strong>来保存。</p><blockquote><p><strong>栈帧</strong>（StackFrame）的组成：</p><ul><li><p>局部变量表：在运行过程中存放所有的局部变量。数据结构是一个数组，数组中每一个位置称之为槽（slot），long和double类型占用两个槽，其他类型占用一个槽。</p></li><li><p>操作数栈：在执行指令过程中用来存放临时数据的一块区域。</p></li><li><p>帧数据：主要包含动态链接、方法出口、异常表的引用。</p></li></ul></blockquote></li><li><p><strong>本地方法栈</strong>：与上雷同，用来管理native本地方法的栈帧。</p></li></ul></li><li><p>线程共享：</p><ul><li><p><strong>堆</strong>：用来存放创建出来的对象。栈的局部变量表存放堆上对象的引用。静态变量也可以存放堆对象的引用，通过静态变量就可以实现对象在线程之间共享。</p></li><li><p><strong>方法区</strong>：存放<strong>类的元信息</strong>（基本信息）和<strong>运行时常量池</strong>，在类的加载阶段完成，方法区是线程共享的。JDK7及之前，方法区存放在堆区域的永久代中，JDK8及之后，方法去存放在直接内存的元空间中。</p><blockquote><ul><li>类的元信息：保存了所有类的基本信息</li><li>运行时常量池：保存了字节码文件中的常量池内容</li><li>字符串常量池：保存了字符串常量</li></ul><blockquote><p>字符串常量池和运行时常量池的关系：</p><ul><li>JDK6及之前：运行时常量池包含字符串常量池，hotspot虚拟机对方法区的实现为永久代。</li><li>JDK7：字符串常量池被从方法区拿到了堆中，运行时常量池剩下的东西还在永久代。</li><li>JDK8及之后：hotspot用元空间取代了永久代，字符串常量池还在堆。</li></ul></blockquote></blockquote></li><li><p><strong>直接内存</strong>（非运行时数据区的一部分）：为了在NIO的使用中，减少对用户的影响，以及提升写文件和读文件的效率，在JDK8及之后，还可以保存方法区中的数据。</p></li></ul></li></ul><h2 id="运行时数据区域版本变化（JDK-6-8）"><a href="#运行时数据区域版本变化（JDK-6-8）" class="headerlink" title="运行时数据区域版本变化（JDK 6~8）"></a>运行时数据区域版本变化（JDK 6~8）</h2><table><thead><tr><th align="center">JDK版本</th><th align="center">线程共享的</th><th align="center">线程不共享的</th></tr></thead><tbody><tr><td align="center">JDK6</td><td align="center">程序计数器、Java虚拟机栈、本地方法栈</td><td align="center"><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410142330635.png" alt="image-20240913203505988" style="zoom: 67%;" /></td></tr><tr><td align="center">JDK7</td><td align="center">程序计数器、Java虚拟机栈、本地方法栈</td><td align="center"><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410142327291.png" alt="image-20240913203533441" style="zoom:67%;" /></td></tr><tr><td align="center">JDK8</td><td align="center">程序计数器、Java虚拟机栈、本地方法栈</td><td align="center"><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410142331223.png" alt="image-20240913203543608" style="zoom:67%;" /></td></tr></tbody></table><h2 id="方法区的垃圾回收"><a href="#方法区的垃圾回收" class="headerlink" title="方法区的垃圾回收"></a>方法区的垃圾回收</h2><p>尽管方法区主要用于存储类的元数据，理论上来说这些信息是比较稳定的，但是这并不意味着方法区内不会发生垃圾回收。</p><p>实际开发中，类是被应用程序的类加载器创建的，所以开发中方法区的回收一般很少出现，但在如OSGi、JSP的热部署等应用场景中会出现。每个JSP文件对应一个唯一的类加载器，当一个JSP文件被修改了，就直接卸载这个JSP类加载器。重新创建类加载器，重新加载jsp文件。</p><p>以下是一些可能导致方法区垃圾回收的情况：</p><p><strong>类卸载（Class Unloading）</strong></p><ul><li>当一个类不再被引用，并且满足某些条件时，JVM 可能会卸载该类，从而释放方法区内存。这种情况通常发生在使用了类加载器的应用程序中，比如 Web 应用服务器，在应用停止或重新部署时，旧的类加载器和其加载的类可以被卸载。</li></ul><p><strong>常量池的清理</strong></p><ul><li>方法区内还存放着类的常量池（Constant Pool），如果常量池中的某个常量不再被任何地方引用，那么这个常量就成为了垃圾。例如，当一个字符串常量没有引用时，它可以被回收。</li></ul><p><strong>动态代理类的回收</strong></p><ul><li>在 Java 中使用动态代理时，会生成一些临时类，如果这些类不再被引用，那么这些类也可以被回收。</li></ul><p><strong>编译后的代码缓存</strong></p><ul><li>在 JDK 8 及以后的版本中，JIT（Just-In-Time）编译器产生的代码缓存也位于方法区（元空间）。如果这些代码缓存不再有用，也可以被清理。</li></ul><p><strong>如何触发方法区的垃圾回收？</strong></p><p>方法区的垃圾回收通常不是频繁发生的，因为它主要关注的是类的生命周期。然而，当系统面临内存压力，特别是当方法区内存不足时，JVM 会尝试进行类的卸载。</p><p>可以通过以下方式触发方法区的垃圾回收：</p><ul><li>**调用 System.gc() 或 Runtime.getRuntime().gc()**：虽然这些方法不保证一定能触发垃圾回收，但在某些情况下，它们可能会导致整个 JVM 进行一次全面的垃圾回收，包括方法区。</li><li><strong>使用特定的垃圾收集器</strong>：某些垃圾收集器（如 G1）可以在进行常规堆垃圾回收的同时，对方法区进行一定的清理。</li></ul><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p><strong>含义</strong>：类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行。</p><p><strong>新生代（Young Generation）</strong></p><p>新生代是堆的一部分，主要用于存储新创建的对象。新生代通常被进一步划分为以下几个子区域：</p><blockquote><h2 id="Eden-区"><a href="#Eden-区" class="headerlink" title="Eden 区"></a>Eden 区</h2><ul><li><strong>定义</strong>：Eden 区是新生代的一部分，新创建的对象首先被放置在这里。</li><li><strong>作用</strong>：Eden 区是新对象的初始存储区域，当对象创建时，它们首先被放置在 Eden 区。</li><li><strong>特性</strong>：Eden 区的空间通常较小，因为新创建的对象很快会被垃圾回收。</li></ul><h2 id="幸存者区（Survivor-Spaces）"><a href="#幸存者区（Survivor-Spaces）" class="headerlink" title="幸存者区（Survivor Spaces）"></a>幸存者区（Survivor Spaces）</h2><ul><li><strong>定义</strong>：幸存者区有两个，分别是 Survivor0 和 Survivor1（通常称为 From 和 To），用于存储经过第一次垃圾回收后仍然存活的对象。</li><li><strong>作用</strong>：在经过一次 Minor GC（年轻代垃圾回收）之后，Eden 区中的对象如果仍然存活，会被移动到幸存者区之一。</li><li><strong>特性</strong>：幸存者区的大小通常较小，对象在这里会经历多次 Minor GC，如果仍然存活，则会被移动到老年代。</li></ul></blockquote><p><strong>老年代（Old Generation）</strong></p><ul><li><strong>定义</strong>：老年代是堆的另一部分，用于存储经过多次垃圾回收仍然存活的对象。</li><li><strong>作用</strong>：当对象在幸存者区中存活了一定次数（通过年龄计数器 Age Counter），或者对象太大无法放入幸存者区时，会被移动到老年代。</li><li><strong>特性</strong>：老年代的空间通常较大，因为这里存储的是较为稳定的对象，垃圾回收的频率较低。</li></ul><p><strong>永久代（Permanent Generation） [JDK 6 &amp; 7]</strong></p><ul><li><strong>定义</strong>：永久代（PermGen）用于存储类的元数据、常量池等信息。</li><li><strong>作用</strong>：在 JDK 6 和 7 中，永久代是用于存储类的元数据的区域。</li><li><strong>特性</strong>：永久代的垃圾回收主要是针对常量池中的常量。在 JDK 8 中，永久代被移除了，类的元数据被存储在元空间中。</li></ul><p><strong>元空间（Metaspace） [JDK 8]</strong></p><ul><li><strong>定义</strong>：元空间用于存储类的元数据。</li><li><strong>作用</strong>：在 JDK 8 中，类的元数据从永久代移动到了元空间，元空间使用本地内存（Native Memory）而非 JVM 堆内存。</li><li><strong>特性</strong>：元空间的大小不受 JVM 堆大小的限制，而是受到系统可用物理内存和系统参数 <code>-XX:MaxMetaspaceSize</code> 的限制。</li></ul><p><strong>直接内存（Direct Memory） [Off-Heap Memory]</strong></p><ul><li><strong>定义</strong>：直接内存不属于堆的一部分，但它仍然与 JVM 相关。</li><li><strong>作用</strong>：直接内存用于通过 <code>java.nio.ByteBuffer.allocateDirect()</code> 分配的内存，主要用于 NIO（Non-blocking I&#x2F;O）操作。</li><li><strong>特性</strong>：直接内存不在 JVM 堆中，因此不受 JVM 垃圾回收的影响。但是，直接内存的大小仍然需要管理，可以通过 <code>-XX:MaxDirectMemorySize</code> 参数来设置。</li></ul><h2 id="堆的垃圾回收过程"><a href="#堆的垃圾回收过程" class="headerlink" title="堆的垃圾回收过程"></a>堆的垃圾回收过程</h2><p><strong>Minor GC（年轻代垃圾回收）</strong></p><ul><li><strong>触发条件</strong>：当 Eden 区满时，会触发 Minor GC。</li><li><strong>过程</strong>：Minor GC 会清理 Eden 区和两个幸存者区中的垃圾对象。存活的对象会被移动到另一个幸存者区或晋升到老年代。</li><li><strong>策略</strong>：常用的算法有复制算法（Copying），它只需要保留一半的内存即可完成垃圾回收。</li></ul><p><strong>Major GC &#x2F; Full GC（全堆垃圾回收）</strong></p><ul><li><strong>触发条件</strong>：当老年代空间不足时，会触发 Full GC；或者显式调用 <code>System.gc()</code> 或 <code>Runtime.getRuntime().gc()</code>。</li><li><strong>过程</strong>：Full GC 会清理整个堆，包括年轻代和老年代。</li><li><strong>策略</strong>：通常使用标记-清除（Mark-Sweep）或标记-清除-压缩（Mark-Sweep-Compact）算法，以避免碎片化的问题。</li></ul><p><strong>Parallel GC &#x2F; Concurrent GC</strong></p><ul><li><strong>Parallel GC</strong>：并行垃圾回收器，它使用多线程来加速垃圾回收过程。适合 CPU 密集型的应用程序。</li><li><strong>Concurrent GC</strong>：并发垃圾回收器，它允许垃圾回收过程与应用程序的执行同时进行，减少应用程序暂停的时间（GC pause time），提高响应速度。适合那些对延迟敏感的应用场景。</li></ul><h2 id="堆垃圾回收的优化"><a href="#堆垃圾回收的优化" class="headerlink" title="堆垃圾回收的优化"></a>堆垃圾回收的优化</h2><p>为了优化堆的垃圾回收性能，可以调整以下参数：</p><ul><li><strong>调整堆大小</strong>：通过 <code>-Xms</code> 和 <code>-Xmx</code> 设置初始和最大堆大小。</li><li><strong>选择垃圾收集器</strong>：根据应用程序的需求选择合适的垃圾收集器，如 CMS Collector、G1 Collector 或 ZGC、Shenandoah 等。</li><li><strong>调整年轻代与老年代的比例</strong>：通过 <code>-XX:NewRatio</code> 参数调整年轻代与老年代的大小比例。</li><li><strong>控制晋升到老年代的对象</strong>：通过 <code>-XX:PretenureSizeThreshold</code> 控制对象直接晋升到老年代的大小阈值。</li><li><strong>设置幸存者区大小</strong>：通过 <code>-XX:SurvivorRatio</code> 设置 Eden 区与幸存者区的比例。</li></ul><p>堆分为三部分：</p><ul><li><p>Young Generation Space  新生代  Young</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">新生区是类的诞生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命。</span><br><span class="line">新生区又分为两部分： 伊甸区（Eden space）和幸存者区（Survivor pace） ，所有的类都是在伊甸区被new出来的。</span><br><span class="line">幸存区有两个： 0区（Survivor 0 space）和1区（Survivor 1 space）。</span><br><span class="line">当伊甸园的空间用完时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收(Minor GC)，将伊甸园区中的不再被其他对象所引用的对象进行销毁。</span><br><span class="line">然后将伊甸园中的剩余对象移动到幸存 0区。若幸存 0区也满了，再对该区进行垃圾回收，然后移动到 1 区。</span><br><span class="line">那如果1 区也满了呢？再移动到养老区。</span><br><span class="line">若养老区也满了，那么这个时候将产生Major GC（FullGC），进行养老区的内存清理。</span><br><span class="line">若养老区执行了Full GC之后发现依然无法进行对象的保存，就会产生OOM异常“OutOfMemoryError”。</span><br><span class="line">如果出现java.lang.OutOfMemoryError: Java heap space异常，说明Java虚拟机的堆内存不够。</span><br><span class="line">原因有二：</span><br><span class="line">（1）Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调整。</span><br><span class="line">（2）代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）。 ----内存溢出；内存泄漏</span><br></pre></td></tr></table></figure></li><li><p>Tenure generation space 老年代  Old</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">老年区用于保存从新生区筛选出来的 JAVA 对象，一般池对象都在这个区域活跃。</span><br></pre></td></tr></table></figure></li><li><p>Permanent Space  永久代  Perm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">永久存储区是一个常驻内存区域，用于存放JDK自身所携带的 Class,Interface 的元数据，也就是说它存储的是运行环境必须的类信息，被装载进此区域的数据是不会被垃圾回收器回收掉的，关闭 JVM 才会释放此区域所占用的内存。</span><br><span class="line">如果出现java.lang.OutOfMemoryError: PermGen space，说明是Java虚拟机对永久代Perm内存设置不够。</span><br><span class="line">一般出现这种情况，都是程序启动需要加载大量的第三方jar包。</span><br><span class="line">例如：在一个Tomcat下部署了太多的应用。或者大量动态反射生成的类不断被加载，最终导致Perm区被占满。</span><br><span class="line">Jdk1.8及之后在元空间</span><br></pre></td></tr></table></figure></li></ul><p>判断一个对象是否存活有两种方法:</p><ol><li><p>引用计数法</p><p>所谓引用计数法就是给每一个对象设置一个引用计数器，每当有一个地方引用这个对象 时，就将计数器加一，引用失效时，计数器就减一。当一个对象的引用计数器为零时，说明此对象没有被引用，也就是“死对象”，将会被垃圾回收。</p><p>引用计数法有一个缺陷就是无法解决循环引用问题，也就是说当对象 A 引用对象 B，对象 B 又引用者对象 A，那么此时 A,B 对象的引用计数器都不为零，也就造成无法完成垃圾回收，所以主流的虚拟机都没有采用这种算法。</p></li><li><p>可达性算法（引用链法）</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">该算法的思想是：从一个被称为 GC Roots 的对象开始向下搜索，如果一个对象到 GC Roots 没有任何引用链相连时，则说明此对象不可用。</span><br></pre></td></tr></table></figure><h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><p>对象能否被回收，是<strong>根据对象是否被引用了来决定的</strong>。只有无法通过引用获取到对象时，该对象才能被回收；如果对象被引用了，说明该对象还在使用，不允许被回收。</p><h2 id="GC的判断方法"><a href="#GC的判断方法" class="headerlink" title="GC的判断方法"></a>GC的判断方法</h2><ul><li><p><strong>引用计数法</strong>：</p><p>为每个对象维护一个引用计数器，当对象被引用时加1，取消引用时减1。当对象计数为0时就会触发回收机制。无法解决循环引用的垃圾回收。</p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><ul><li><p><strong>强引用：如果对象在根对象的引用链上，则不能被回收。</strong></p></li><li><p><strong>软引用：如果对象被软引用关联，当程序内存不足时会回收。</strong></p><blockquote><p>在JDK1.2版之后提供了SoftReference类来实现软引用，软引用常用于缓存中。</p></blockquote></li><li><p><strong>弱引用：和软引用基本一致，区别在于弱引用在垃圾回收时，会被直接回收。</strong></p><blockquote><p>在JDK1.2版之后提供了WeakReference类来实现弱引用，弱引用主要在ThreadLocal中使用。弱引|用对象本身也可以使用引|用队列进行回收。</p></blockquote></li><li><p>*<strong>虚引用：无法获取包含的对象。唯一用途是当对象被回收时，可以接收到对应的通知，知道对象被回收了。</strong></p><blockquote><p>Java中使用PhantomReference实现了虚引用，使用虚引用实现了直接内存中为了及时知道直接内存对象不再使用，从而回收内存。</p></blockquote></li><li><p><strong>终结器引用：对象回收时可以自救，不建议使用。（在对象需要被回收时，对象将会被放置在Finalizer类中的引用队列中，并在稍后由一条由FinalizerThread线程从队列中获取对象，然后执行对象的finalize方法（再将自身对象使用强引用关联上））</strong></p></li></ul></li><li><p><strong>可达性分析法</strong>：</p><p>如果从某个到GC Root对象是可达的，对象就不可被回收。</p><blockquote><p>根对象（不可回收）：</p><ul><li>线程Thread对象</li><li>系统类加载器加载的java.lang.Class对象</li><li>监视器对象，用来保存同步锁synchronized关键字持有的对象</li><li>本地方法调用时使用的全局对象</li></ul></blockquote></li></ul><h2 id="触发GC的时机"><a href="#触发GC的时机" class="headerlink" title="触发GC的时机"></a>触发GC的时机</h2><ol><li>新生代空间不足：当新生代空间不足时，会<strong>触发Minor GC</strong>。如果Minor GC之后仍然空间不足，则<strong>触发Full GC</strong>。</li><li>老年代空间不足：当老年代空间不足时，会先尝试<strong>触发Minor GC</strong>，如果之后空间仍不足，则会<strong>触发Full GC</strong>。</li><li>元空间不足：元空间存放类的元数据，当元空间不足时也会<strong>触发Full GC</strong>。</li><li>显式调用 <code>System.gc()</code> ：虽然 <code>System.gc()</code> 方法的调用是一个建议，但很多情况下JVM会响应这个请求并<strong>触发Full GC</strong>。</li><li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存：如果发现这个平均值大于老年代的可用内存，则会在Minor GC前先<strong>进行一次Full GC</strong>。</li><li>定时触发：某些情况下，GC可能会基于时间间隔或其他策略被触发。</li></ol><h2 id="GC算法"><a href="#GC算法" class="headerlink" title="GC算法"></a>GC算法</h2><p><strong>垃圾回收算法评价标准</strong>：</p><ol><li><strong>吞吐量</strong>：指的是CPU用于执行用户代码的时间与CPU总执行时间的比值，即吞吐量&#x3D;执行用户代码时间 &#x2F;（执行用户代码时间+GC时间）。吞吐量数值越高，垃圾回收的效率就越高。</li><li><strong>最大暂停时间</strong>：指的是所有在垃圾回收过程中的STW时间最大值。</li><li><strong>堆使用效率</strong>：不同垃圾回收算法，对堆内存的使用方式是不同的。比如标记清除算法，可以使用完整的堆内存。而复制算法会将堆内存一分为二，每次只能使用一半内存。从堆使用效率上来说，标记清除算法要优于复制算法。</li></ol><ul><li><p><strong>标记-清除算法</strong>：先标记，标记完毕之后再清除，效率不高，会产生碎片</p><ol><li>标记阶段，使用可达性分析算法将所有存活的对象进行标记，从GCRoot开始通过引用链遍历出所有存活对象。</li><li>清除阶段，从内存中删除没有被标记的非存活对象。</li></ol><blockquote><p>优点：实现简单，只需要在第一阶段给每个对象维护标志位，第二阶段删除对象即可。</p><p>缺点：</p><ol><li>碎片化问题由于内存是连续的，所以在对象被删除之后，内存中会出现很多细小的可用内存单元。如果我们需要的是一个比较大的空间，很有可能这些内存单元的大小过小无法进行分配。</li><li>分配速度慢。由于内存碎片的存在，需要维护一个空闲链表，极有可能发生每次需要遍历到链表的最后才能获得合适的内存空间。</li></ol></blockquote></li><li><p><strong>标记-整理（标记-压缩）算法</strong>：标记完毕之后，让所有存活的对象向一端移动</p><pre><code>是对`标记-清理算法`中容易产生内存碎片问题的一种解决方案。</code></pre><ol><li>标记阶段，将所有存活的对象进行标记。使用可达性分析算法，从GCRoot开始通过引l用链遍历出所有存活对象。</li><li>整理阶段，将存活对象移动到堆的一端。清理掉存活对象的内存空间。</li></ol><blockquote><p>优点：</p><ol><li>内存使用效率高。整个堆内存都可以使用，不会像复制算法只能使用半个堆内存。</li><li>不会发生碎片化。在整理阶段可以将对象往内存的一侧进行移动，剩下的空间都是可以分配对象的有效空间。</li></ol><p>缺点：整理阶段的效率不高。整理算法有很多种，比如<code>Lisp2</code>整理算法需要对整个堆中的对象搜索3次，整体性能不佳。可以通过<code>Two-Finger</code>、<code>表格算法</code>、<code>ImmixGc</code>等高效的整理算法优化此阶段的性能。</p></blockquote></li><li><p><strong>复制算法</strong>：分为 8：1 的 Eden 区和 survivor 区，就是上面谈到的 YGC</p><ol><li>将堆内存分割成两块From空间To空间，对象分配阶段，创建对象。</li><li>GC阶段开始，将GC Root搬运到To空间。</li><li>将GCRoot关联的对象，搬运到To空间。</li><li>清理From空间，并把名称互换。</li></ol><blockquote><p>优点：</p><ol><li>吞吐量高。复制算法只需要遍历一次存活对象复制到To空间即可，比标记-整理算法少了一次遍历的过程，因而性能较好，但是不如标记-清除算法因为标记清除算法不需要进行对象的移动。</li><li>不会发生碎片化。复制算法在复制之后就会将对象按顺序放入To空间中，所以对象以外的区域都是可用空间，不存在碎片化内存空间。</li></ol><p>缺点：内存使用效率低。每次只能让一半的内存空间来为创建对象使用。</p></blockquote></li><li><p><strong>分代垃圾回收（分代GC）</strong></p><ol><li>将整个内存区域划分为<strong>年轻代</strong>和<strong>老年代</strong>。</li><li>分代回收时，创建出来的对象，首先会被放入Eden伊甸园区。</li><li>随着对象在Eden区越来越多，Eden区满了就会触发年轻代的GC（Minor GC &#x2F; Young GC），将不需要回收的对象放到To区，新创建的对象继续放到Eden区。</li><li>如果MinorGC后对象的年龄达到阈值（最大15，最小为0，默认值和垃圾回收器有关），对象就会被晋升至老年代。</li><li>当老年代中空间不足，无法放入新的对象时，先尝试Minor GC如果还是不足，就会触发Full GC，Full GC会对整个堆进行垃圾回收。</li><li>如果Full GC依然无法回收掉老年代的对象，那么当对象继续放入老年代时，就会抛出Out Of Memory异常。</li></ol></li></ul><h1 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h1><h2 id="垃圾回收器的发展"><a href="#垃圾回收器的发展" class="headerlink" title="垃圾回收器的发展"></a>垃圾回收器的发展</h2><ul><li><p><strong>Serial 收集器</strong>：最早期的垃圾收集器，适用于小型应用或测试环境，几十兆的内存大小。</p></li><li><p><strong>Parallel 收集器</strong>：随着硬件进步，内存容量增加，适用于几个G的内存大小。</p></li><li><p><strong>CMS 收集器</strong>：在JDK 1.4版本后期引入，开启了并发垃圾回收的时代，适用于几十个G的内存大小，但由于其并发标记阶段会影响应用程序性能，并且存在碎片化问题。</p></li><li><p><strong>G1 收集器</strong>：设计用于上百GB的内存大小，通过并行和并发的方式进行垃圾回收，减少了Stop-The-World(STW)时间。</p></li><li><p><strong>ZGC 和 Shenandoah</strong>：设计用于更大的内存范围，从几百GB到TB级别的内存，减少了STW时间到毫秒级别。</p></li></ul><h2 id="垃圾回收器介绍"><a href="#垃圾回收器介绍" class="headerlink" title="垃圾回收器介绍"></a>垃圾回收器介绍</h2><ol><li><strong>Serial 收集器</strong>：<ul><li>适用于年轻代的串行回收，适合内存较小的应用环境。</li></ul></li><li>**Parallel Scavenge 收集器 (PS)**：<ul><li>适用于年轻代，并行回收，适用于内存较大的应用环境。</li></ul></li><li><strong>ParNew 收集器</strong>：<ul><li>是 Serial 收集器的一个变种，支持年轻代的并行回收，主要用来配合 CMS 收集器使用。</li></ul></li><li><strong>Serial Old 收集器</strong>：<ul><li>适用于老年代的串行回收，通常作为 CMS 收集器在无法分配新对象时的后备方案。</li></ul></li><li><strong>Parallel Old 收集器</strong>：<ul><li>适用于老年代，并行回收。</li></ul></li><li>**CMS 收集器 (Concurrent Mark Sweep)**：<ul><li>适用于老年代，采用并发标记和清扫的方式，减少 STW 时间，但由于标记算法的原因，容易产生内存碎片。</li></ul></li><li><strong>G1 收集器</strong>：<ul><li>适用于大内存环境，采用三色标记算法和SATB（Store After Barrier）机制，减少了 STW 时间。</li></ul></li><li><strong>ZGC 收集器</strong>：<ul><li>设计用于非常大的内存范围，采用 Colored Pointers 和 Load Barrier 技术，进一步减少 STW 时间。</li></ul></li><li><strong>Shenandoah 收集器</strong>：<ul><li>也是为了解决 STW 问题，采用 Colored Pointers 和 Write Barrier 技术。</li></ul></li><li><strong>Epsilon 收集器</strong>：<ul><li>这是一个“无操作”的垃圾收集器，仅用于研究目的或特殊场合，不执行任何垃圾回收工作。</li></ul></li></ol><h2 id="关键算法和技术"><a href="#关键算法和技术" class="headerlink" title="关键算法和技术"></a>关键算法和技术</h2><ul><li><p><strong>三色标记算法</strong>：一种并发标记算法，用于并发垃圾回收过程中标识对象的状态。</p><ol><li><strong>白色</strong>：表示尚未被访问的对象。这些对象可能是垃圾，也可能不是。</li><li><strong>灰色</strong>：表示已经被访问但其引用的对象尚未被访问的对象。这些对象是当前正在处理的对象。</li><li><strong>黑色</strong>：表示已经被完全访问的对象。这些对象及其引用的对象都被认为是存活的。</li></ol><p><strong>算法步骤</strong></p><ol><li><strong>初始化</strong>：<ul><li>将所有对象标记为白色。</li><li>将根对象（如全局变量、栈上的局部变量等）标记为灰色。</li></ul></li><li><strong>标记阶段</strong>：<ul><li>从灰色对象队列中取出一个对象，将其标记为黑色。</li><li>将该对象引用的所有白色对象标记为灰色，并将这些对象加入灰色对象队列。</li><li>重复上述过程，直到灰色对象队列为空。</li></ul></li><li><strong>清理阶段</strong>：<ul><li>所有仍标记为白色的对象被认为是垃圾，可以被回收。</li></ul></li></ol></li><li><p><strong>Incremental Update</strong>：一种在并发标记过程中更新对象引用的技术。</p></li><li><p>**SATB (Store After Barrier)**：一种在对象更新时记录写操作的技术。</p></li><li><p><strong>Colored Pointers</strong>：一种指针技术，使得对象可以直接携带有关其状态的信息，简化了并发回收过程中的对象检查。</p></li><li><p><strong>Load Barrier</strong> 和 <strong>Write Barrier</strong>：在读取或写入对象时插入的屏障，确保垃圾回收的安全性。</p></li></ul><h2 id="JVM中的垃圾回收器"><a href="#JVM中的垃圾回收器" class="headerlink" title="JVM中的垃圾回收器"></a>JVM中的垃圾回收器</h2><p>垃圾回收器是垃圾回收算法的具体实现，在JVM中，实现了多种垃圾收集器，包括：</p><ul><li>串行垃圾收集器<ul><li>Serial和Serial Old串行垃圾收集器，是指使用单线程进行垃圾回收，堆内存较小，适合个人电脑</li><li>Serial 作用于新生代，采用复制算法</li><li>Serial Old 作用于老年代，采用标记-整理算法</li><li>垃圾回收时，只有一个线程在工作，并且java应用中的所有线程都要暂停（STW），等待垃圾回收的完成。</li></ul></li><li>并行垃圾收集器<ul><li>Parallel New和Parallel Old是一个并行垃圾回收器，JDK8默认使用此垃圾回收器</li><li>Parallel New作用于新生代，采用复制算法</li><li>Parallel Old作用于老年代，采用标记-整理算法</li><li>垃圾回收时，多个线程在工作，并且java应用中的所有线程都要暂停（STW），等待垃圾回收的完成。</li></ul></li><li>CMS（并发）垃圾收集器<ul><li>CMS全称 Concurrent Mark Sweep，是一款并发的、使用标记-清除算法的垃圾回收器，该回收器是针对老年代垃圾回收的，是一款以获取最短回收停顿时间为目标的收集器，停顿时间短，用户体验就好。其最大特点是在进行垃圾回收时，应用仍然能正常运行。</li></ul></li><li>G1垃圾收集器<ul><li>应用于新生代和老年代，在JDK9之后默认使用G1</li><li>划分成多个区域，每个区域都可以充当 eden，survivor，old， humongous，其中 humongous 专为大对象准备</li><li>采用复制算法</li><li>响应时间与吞吐量兼顾</li><li>分成三个阶段：新生代回收、并发标记、混合收集</li><li>如果并发失败（即回收速度赶不上创建新对象速度），会触发 Full GC</li></ul></li></ul><p>由于垃圾回收器分为年轻代和老年代，除了G1之外其他垃圾回收器必须成对组合进行使用，具体的关系图如下：</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404271337777.png" alt="image-20240427133704772" style="zoom:50%;" /><ol><li><strong>年轻代-Serial垃圾回收器 + 老年代-SerialOld垃圾回收器</strong></li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404271425975.png" alt="image-20240427142529922" style="zoom: 67%;" /><table><thead><tr><th>回收年代</th><th>算法</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>年轻代</td><td>复制算法</td><td>单CPU处理器下吞吐量非常出色</td><td>多CPU下吞吐量不如其他垃圾回收器，堆如果偏大会让用户线程处于长时间的等待</td><td>Java编写的客户端程序或者硬件配置有限的场景</td></tr></tbody></table><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404271425975.png" alt="image-20240427142529922" style="zoom: 67%;" /><table><thead><tr><th>回收年代</th><th>算法</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>老年代</td><td>标记-整理算法</td><td>单CPU处理器下吞吐量非常出色</td><td>多CPU下吞吐量不如其他垃圾回收器，堆如果偏大会让用户线程处于长时间的等待</td><td>与Serial垃圾回收器搭配使用，或者在CMS特殊情况下使用</td></tr></tbody></table><ol start="2"><li><p><strong>年轻代-ParNew垃圾回收器 + 老年代- CMS(Concurrent Mark Sweep)垃圾回收器</strong></p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410142332428.png" alt="image-20240427142921039" style="zoom:67%;" /></li></ol><table><thead><tr><th>回收年代</th><th>算法</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>年轻代</td><td>复制算法</td><td>多CPU处理器下停顿时间较短</td><td>吞吐量和停顿时间不如G1，所以在JDK9之后不建议使用</td><td>JDK8及之前的版本中，与CMS老年代垃圾回收器搭配使用</td></tr></tbody></table><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410142333894.png" alt="image-20240427143027649" style="zoom:75%;" /><table><thead><tr><th>回收年代</th><th>算法</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>老年代</td><td>标记-清除算法</td><td>系统由于垃圾回收出现的停顿时间较短，用户体验好</td><td>内存碎片问题、退化问题、浮动垃圾问题</td><td>大型的互联网系统中用户请求数据量大、频率高的场景，比如订单接口、商品接口等</td></tr></tbody></table><blockquote><p>CMS执行步骤：</p><p>1.初始标记，用极短的时间标记出GC Roots能直接关联到的对象。</p><p>2.并发标记,   标记所有的对象，用户线程不需要暂停。</p><p>3.重新标记，由于并发标记阶段有些对象会发生了变化，存在错标、漏标等情况，需要重新标记。</p><p>4.并发清理，清理死亡的对象，用户线程不需要暂停。</p><p>缺点：</p><p>1、CMS使用了标记-清除算法，在垃圾收集结束之后会出现大量的内存碎片，CMS会在Full GC时进行碎片的整理。这样会导致用户线程暂停，可以使用-XX:CMSFullGCsBeforeCompaction&#x3D;N 参数（默认0）调整N次Full GC之后再整理。</p><p>2.、无法处理在并发清理过程中产生的“浮动垃圾”，不能做到完全的垃圾回收。</p><p>3、如果老年代内存不足无法分配对象，CMS就会退化成Serial Old单线程回收老年代。</p></blockquote><ol start="3"><li><strong>年轻代-Parallel Scavenge垃圾回收器 + 老年代-Parallel Old垃圾回收器</strong>（JDK 1.8默认的垃圾回收器）</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410142337616.png" alt="image-20240427143236251" style="zoom: 50%;" /><table><thead><tr><th>回收年代</th><th>算法</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>年轻代</td><td>复制算法</td><td>吞吐量高，而且手动可控。为了提高吞吐量，虚拟机会动态调整堆的参数</td><td>不能保证单次的停顿时间</td><td>后台任务，不需要与用户交互，并且容易产生大量的对象。比如：大数据的处理，大文件导出</td></tr></tbody></table><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410142337616.png" alt="image-20240427143236251" style="zoom: 50%;" /><table><thead><tr><th>回收年代</th><th>算法</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>老年代</td><td>标记-整理算法</td><td>并发收集，在多核CPU下效率较高</td><td>暂停时间会比较长</td><td>与Parallel Scavenge配套使用</td></tr></tbody></table><ol start="4"><li><strong>G1垃圾回收器（JDK9之后强烈建议）</strong></li></ol><ul><li>支持巨大的堆空间回收，并有较高的吞吐量。</li><li>支持多CPU并行垃圾回收。</li><li>允许用户设置最大暂停时间。</li></ul><p>G1的整个堆会被划分成多个大小相等的区域，称之为区Region，区域不要求是连续的。分为Eden、Survivor、Old区。Region的大小通过堆空间大小&#x2F;2048计算得到，也可以通过参数-XX:G1HeapRegionSize&#x3D;32m指定(其中32m指定region大小为32M)，Region size必须是2的指数幂，取值范围从1M到32M。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404271434286.png" alt="image-20240427143448227" style="zoom:40%;" /><p><strong>回收过程：（简略版）</strong></p><ol><li><p>当G1判断年轻代区不足（max默认60%），无法分配对象时需要回收时会执行Young GC。</p><p>根据配置的最大暂停时间选择某些区域将存活对象复制到一个新的Survivor区中（年龄+1），清空这些区域。</p></li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404271438170.png" alt="image-20240427143816094" style="zoom: 40%;" /><ol start="2"><li>当某个存活对象的年龄到达阈值（默认15），将被放入老年代。</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404271439985.png" alt="image-20240427143922933" style="zoom:40%;" /><ol start="3"><li>部分对象如果大小超过Region的一半，会直接放入老年代，这类老年代被称为Humongous区。比如堆内存是4G，每个Region是2M，只要一个大对象超过了1M就被放入Humongous区，如果对象过大会横跨多个Region。</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404271440569.png" alt="image-20240427143951445" style="zoom:40%;" /><ol start="4"><li>多次回收之后，会出现很多Old老年代区，此时总堆占有率达到阈值45%（默认）时，会触发混合回收MixedGC（过程略）。回收所有年轻代和部分老年代的对象以及大对象区。采用复制算法来完成。</li></ol><h1 id="JVM场景题"><a href="#JVM场景题" class="headerlink" title="JVM场景题"></a>JVM场景题</h1><p>内存泄漏是指：不再使用的对象仍然占用内存空间，因为垃圾回收器无法回收它们。这种情况下，应用程序会逐渐消耗越来越多的内存，最终可能导致性能下降甚至崩溃。以下是一些常见的导致 Java 应用程序内存泄漏的场景：</p><h2 id="1-静态集合类"><a href="#1-静态集合类" class="headerlink" title="1. 静态集合类"></a>1. 静态集合类</h2><p>当集合类被声明为静态变量时，它们的生命周期与整个应用程序相同，如果不定期清理，会导致内存持续增长。</p><h2 id="2-内部类和-Lambda-表达式"><a href="#2-内部类和-Lambda-表达式" class="headerlink" title="2. 内部类和 Lambda 表达式"></a>2. 内部类和 Lambda 表达式</h2><p>内部类（Inner Class）和 Lambda 表达式可能会持有对外部类的隐式引用，从而阻止垃圾回收。</p><h2 id="3-日志记录"><a href="#3-日志记录" class="headerlink" title="3. 日志记录"></a>3. 日志记录</h2><p>日志记录类可能会持有某个对象的强引用，特别是当使用 <code>MDC</code>（Mapped Diagnostic Context）时，如果不及时清除 MDC 中的信息，可能会导致内存泄漏。</p><h2 id="4-线程局部变量（ThreadLocal）"><a href="#4-线程局部变量（ThreadLocal）" class="headerlink" title="4. 线程局部变量（ThreadLocal）"></a>4. 线程局部变量（ThreadLocal）</h2><p><code>ThreadLocal</code> 变量如果没有正确地清除，可能导致内存泄漏，因为每个线程都会保留一份拷贝。</p>]]></content>
    
    
    <summary type="html">Java, all in one！</summary>
    
    
    
    <category term="学习" scheme="https://01petard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://01petard.github.io/tags/Java/"/>
    
    <category term="JVM" scheme="https://01petard.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>My Java Guide - Spring</title>
    <link href="https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20Spring/"/>
    <id>https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20Spring/</id>
    <published>2024-10-14T16:23:00.000Z</published>
    <updated>2024-11-10T14:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="——————Spring——————"><a href="#——————Spring——————" class="headerlink" title="——————Spring——————"></a><div align="center">——————Spring——————</div></h1><h1 id="Spring、Spring-MVC-和-Spring-Boot-的区别"><a href="#Spring、Spring-MVC-和-Spring-Boot-的区别" class="headerlink" title="Spring、Spring MVC 和 Spring Boot 的区别"></a>Spring、Spring MVC 和 Spring Boot 的区别</h1><p><strong>Spring</strong></p><p>Spring 是一个 IoC（Inversion of Control，控制反转）容器，主要用于管理 Bean。通过依赖注入（Dependency Injection, DI）的方式实现控制反转，使得应用程序组件之间的依赖关系更加清晰，同时也便于测试和维护。Spring 提供了 AOP（Aspect Oriented Programming，面向切面编程）机制来解决 OOP（Object-Oriented Programming，面向对象编程）中代码重复的问题，允许开发者将不同类和方法中的共同处理逻辑（如日志记录、事务管理等）抽象成为切面，并自动注入到方法执行过程中。</p><p><strong>Spring MVC</strong></p><p>Spring MVC 是 Spring 对 Web 应用程序开发提供的一个解决方案。它引入了一个前端控制器 Servlet，负责接收 HTTP 请求。Spring MVC 定义了一套路由策略，用于将 URL 映射到具体的处理器（Handler）。前端控制器根据路由信息调用相应的处理器，并将处理器的返回结果通过视图解析器转换为最终的 HTML 页面呈现给用户。</p><p><strong>Spring Boot</strong></p><p>Spring Boot 是 Spring 社区提供的一个快速应用开发框架，旨在简化 Spring 应用程序的搭建和开发过程。它通过提供一系列默认配置，减少了开发者手动配置的时间，并且通过 Starter 机制整合了常用的第三方库和技术栈（如 Redis、MongoDB、Elasticsearch 等），使得开发者能够开箱即用地使用这些技术。Spring Boot 的目标是让开发者能够专注于业务逻辑的编写，而不是繁琐的配置工作。</p><h1 id="延迟加载是什么？实现原理是什么？"><a href="#延迟加载是什么？实现原理是什么？" class="headerlink" title="延迟加载是什么？实现原理是什么？"></a>延迟加载是什么？实现原理是什么？</h1><p><strong>延迟加载</strong>：查询一个实体类的时候，暂时不查询将其一对多的数据，当需要的时候，再查询，这就是延迟加载。</p><p><strong>作用</strong>：提高响应速度、避免资源浪费。</p><p><strong>实现原理</strong>：</p><ol><li>使用<strong>CGLIB</strong>创建目标对象的代理对象</li><li>当调用目标方法时，进入拦截器invoke方法，发现目标方法是null值，执行sql查询</li><li>获取数据以后，调用set方法设置属性值，再继续查询目标方法，就有值了</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404121947175.png" alt="image-20240412194719114" style="zoom:60%;" /><p><strong>开启方式</strong>：开启方式由具体的框架决定。</p><h1 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h1><h2 id="Spring注解"><a href="#Spring注解" class="headerlink" title="Spring注解"></a>Spring注解</h2><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@Component、@Controller、@Service、@Repository</td><td>使用在类上用于实例化Bean</td></tr><tr><td>@Autowired</td><td>使用在字段上用于根据类型依赖注入</td></tr><tr><td>@Qualifier</td><td>结合@Autowired一起使用用于根据名称进行依赖注入</td></tr><tr><td>@Scope</td><td>标注Bean的作用范围</td></tr><tr><td>@Configuration</td><td>指定当前类是一个 Spring 配置类，当创建容器时会从该类上加载注解</td></tr><tr><td>@ComponentScan</td><td>用于指定 Spring  在初始化容器时要扫描的包</td></tr><tr><td>@Bean</td><td>使用在方法上，标注将该方法的返回值存储到Spring容器中</td></tr><tr><td>@Import</td><td>使用@Import导入的类会被Spring加载到IOC容器中</td></tr><tr><td>@Aspect、@Before、@After、@Around、@Pointcut</td><td>用于切面编程（AOP）</td></tr></tbody></table><h2 id="SpringMVC注解"><a href="#SpringMVC注解" class="headerlink" title="SpringMVC注解"></a>SpringMVC注解</h2><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@RequestMapping</td><td>用于映射请求路径，可以定义在类上和方法上。用于类上，则表示类中的所有的方法都是以该地址作为父路径</td></tr><tr><td>@RequestBody</td><td>注解实现接收http请求的json数据，将json转换为java对象</td></tr><tr><td>@RequestParam</td><td>指定请求参数的名称</td></tr><tr><td>@PathViriable</td><td>从请求路径下中获取请求参数(&#x2F;user&#x2F;{id})，传递给方法的形式参数</td></tr><tr><td>@ResponseBody</td><td>注解实现将controller方法返回对象转化为json对象响应给客户端</td></tr><tr><td>@RequestHeader</td><td>获取指定的请求头数据</td></tr><tr><td>@RestController</td><td>@Controller + @ResponseBody</td></tr></tbody></table><h2 id="Springboot注解"><a href="#Springboot注解" class="headerlink" title="Springboot注解"></a>Springboot注解</h2><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@SpringBootConfiguration</td><td>组合了- @Configuration注解，实现配置文件的功能</td></tr><tr><td>@EnableAutoConfiguration</td><td>打开自动配置的功能，也可以关闭某个自动配置的选</td></tr><tr><td>@ComponentScan</td><td>Spring组件扫描</td></tr></tbody></table><h1 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h1><h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><p>Spring 中 Bean 的生命周期大致分为四个阶段：</p><ol><li>实例化（Instantiation）</li><li>属性赋值（Populate）</li><li>初始化（Initialization）</li><li>销毁（Destruction）</li></ol><p>Bean 生命周期大致分为 Bean 定义、Bean 的初始化、Bean的生存期和 Bean 的销毁4个部分。具体步骤如下：</p><ol><li>通过BeanDefinition获取bean的定义信息</li><li>调用构造函数实例化bean</li><li>bean的依赖注入</li><li>处理Aware接口（BeanNameAware、BeanFactoryAware、ApplicationContextAware）</li><li>Bean的后置处理器BeanPostProcessor#before</li><li>初始化方法(InitializingBean、init-method)</li><li>Bean的后置处理器BeanPostProcessor#before</li><li>销毁bean</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404121907270.png" alt="image-20240412190726153" style="zoom:40%;" /><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409301722710.png" alt="image-20240930172245510" style="zoom:70%;" /><h2 id="创建Bean的三种方式"><a href="#创建Bean的三种方式" class="headerlink" title="创建Bean的三种方式"></a>创建Bean的三种方式</h2><h2 id="定义-Bean-对象"><a href="#定义-Bean-对象" class="headerlink" title="定义 Bean 对象"></a>定义 <code>Bean </code>对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> <span class="keyword">implements</span> <span class="title class_">BeanNameAware</span>, BeanFactoryAware, ApplicationContextAware, InitializingBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;# 第一步：实例化对象\n\t &gt;&gt; 执行构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOname</span><span class="params">(String oname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.oname = oname;</span><br><span class="line">        System.out.println(<span class="string">&quot;# 第二步：赋值\n\t &gt;&gt; 执行自定义setter方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\t &gt;&gt; BeanNameAware -&gt; setBeanName方法执行了...: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\t &gt;&gt; BeanFactoryAware -&gt; setBeanFactory方法执行了...: &quot;</span> + beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\t &gt;&gt; ApplicationContextAware -&gt; setApplicationContext方法执行了...: &quot;</span> + applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;// (干预点一) 初始化方法执行前...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;# 第三步：初始化\n\t &gt;&gt; InitializingBean -&gt; afterPropertiesSet方法执行了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\t &gt;&gt; 执行自定义的初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;// (干预点二) 销毁方法执行前...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;# 第五步：回收对象\n\t &gt;&gt; 执行自定义的销毁的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Orders&#123;&quot;</span> + <span class="string">&quot;oname=&#x27;&quot;</span> + oname + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义-BeanPostProcessor-后置处理器"><a href="#定义-BeanPostProcessor-后置处理器" class="headerlink" title="定义 BeanPostProcessor 后置处理器"></a>定义 <code>BeanPostProcessor</code> 后置处理器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Orders) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;// (前置处理器) postProcessBeforeInitialization方法执行了... -&gt; &quot;</span> + beanName + <span class="string">&quot;对象初始化方法前开始增强....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Orders) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;// (后置处理器) postProcessAfterInitialization方法执行了... -&gt; &quot;</span> + beanName + <span class="string">&quot;对象初始化方法后开始增强....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-基于注解的方式"><a href="#1-基于注解的方式" class="headerlink" title="1. 基于注解的方式"></a>1. 基于注解的方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.company.spring5.bean&quot;)</span> <span class="comment">// 组件扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrdersConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;initMethod&quot;, destroyMethod = &quot;destroyMethod&quot;)</span></span><br><span class="line">    <span class="meta">@Qualifier</span></span><br><span class="line">    <span class="keyword">public</span> Orders <span class="title function_">orders</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Orders</span>();</span><br><span class="line">        orders.setOname(<span class="string">&quot;手机&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> orders;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 加载 Spring 容器</span></span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Orders bean 实例</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> (Orders) context.getBean(<span class="string">&quot;orders&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第四步，获取创建bean实例对象：&quot;</span> + orders);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭容器，触发销毁方法</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-基于配置文件的方式"><a href="#2-基于配置文件的方式" class="headerlink" title="2. 基于配置文件的方式"></a>2. 基于配置文件的方式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.bean.Orders&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;手机&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置后置处理器，会为当前配置文件页面内的所有bean都添加后置处理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPost&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.bean.MyBeanPost&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 加载 Spring 容器</span></span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Orders bean 实例</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> (Orders) context.getBean(<span class="string">&quot;orders&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第四步，获取创建bean实例对象：&quot;</span> + orders);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭容器，触发销毁方法</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-基于-BeanDefinition-编程方式"><a href="#3-基于-BeanDefinition-编程方式" class="headerlink" title="3. 基于 BeanDefinition 编程方式"></a><em>3. 基于 <code>BeanDefinition</code> 编程方式</em></h2><p>区别在于 <code>Bean</code> 的消息不是由 <code>xml配置文件</code> 定义，而是由 <code>BeanDefinition</code> 定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 ApplicationContext</span></span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line">        <span class="comment">// 注册 BeanPostProcessor</span></span><br><span class="line">        context.getBeanFactory().addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">MyBeanPostProcessor</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 BeanDefinitionBuilder 创建 BeanDefinition</span></span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder</span><br><span class="line">                .genericBeanDefinition(Orders.class)</span><br><span class="line">                .addPropertyValue(<span class="string">&quot;oname&quot;</span>, <span class="string">&quot;手机&quot;</span>)</span><br><span class="line">                .setInitMethodName(<span class="string">&quot;initMethod&quot;</span>)  <span class="comment">// 设置初始化方法</span></span><br><span class="line">                .setDestroyMethodName(<span class="string">&quot;destroyMethod&quot;</span>)  <span class="comment">// 设置销毁方法</span></span><br><span class="line">                .getBeanDefinition();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 BeanFactory</span></span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> (DefaultListableBeanFactory) context.getBeanFactory();</span><br><span class="line">        <span class="comment">// 注册 BeanDefinition</span></span><br><span class="line">        beanFactory.registerBeanDefinition(<span class="string">&quot;orders123&quot;</span>, beanDefinition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 刷新容器以使定义的 bean 生效</span></span><br><span class="line">        context.refresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 bean 实例</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> (Orders) context.getBean(<span class="string">&quot;orders123&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;# 第四步：使用对象\n\t &gt;&gt; 获取创建bean实例对象：&quot;</span> + orders);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭容器，触发销毁</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Bean的生命周期哪些地方可以干预？"><a href="#Bean的生命周期哪些地方可以干预？" class="headerlink" title="Bean的生命周期哪些地方可以干预？"></a>Bean的生命周期哪些地方可以干预？</h2><p>Bean的生命周期是由Spring容器自动管理的，其中有两个环节我们可以进行干预。 </p><ol><li>可以自定义<strong>初始化</strong>方法，增加<code>@PostConstruct</code>注解，会在<strong>调用SetBeanFactory方法之后</strong>调用该方法。</li><li>可以自定义<strong>销毁</strong>方法，增加<code>@PreDestroy</code>注解，会在<strong>自身销毁前调用</strong>这个方法。</li></ol><h2 id="Bean线程安全吗？如何解决线程不安全的Bean？"><a href="#Bean线程安全吗？如何解决线程不安全的Bean？" class="headerlink" title="Bean线程安全吗？如何解决线程不安全的Bean？"></a>Bean线程安全吗？如何解决线程不安全的Bean？</h2><p>Bean不一定是线程安全的。</p><p>如果注入的对象是无状态的（String类），不需要线程安全问题的；</p><p>如果在bean中定义了<strong>可修改的变量</strong>，<strong>需要考虑线程安全问题。</strong></p><p><strong>解决方案</strong>：</p><ol><li>使用多例。</li><li>使用加锁。</li><li>使用<code>@Scope</code>注解，默认为<code>singleton</code>，改为<code>prototype</code>。</li></ol><h2 id="循环依赖及其解决办法"><a href="#循环依赖及其解决办法" class="headerlink" title="循环依赖及其解决办法"></a>循环依赖及其解决办法</h2><p><strong>循环依赖</strong>：有多个类被Spring管理，它们在实例化时互相持有对方，最终形成闭环。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411071640490.png" alt="img" style="zoom:100%;" /><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> A a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者自己依赖自己</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决做法：先创建 A，此时的 A 是不完整的（没有注入 B），用个 map 保存这个不完整的 A，再创建 B ，B 需要 A，所以从那个 map 得到“不完整”的 A，此时的 B 就完整了，然后 A 就可以注入 B，然后 A 就完整了，B 也完整了，且它们是相互依赖的。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410101052587.png" alt="image.png" style="zoom:90%;" /><p>关键就是<strong>提前暴露未完全创建完毕的 Bean</strong>。</p><p>在 Spring 中，只有同时满足以下两点才能解决循环依赖的问题：</p><ol><li>依赖的 Bean 必须都是单例</li><li>依赖注入的方式，必须<strong>不全是</strong>构造器注入，且 beanName 字母序在前的不能是构造器注入</li></ol><p>Spring无法解决<strong>构造方法</strong>上出现的循环依赖，<strong>补救措施</strong>：在构造方法的参数上使用<code>@Lazy</code>。</p><p>非构造方法Spring通过<strong>三级缓存</strong>解决循环依赖：</p><p>Spring为单例搞的三个 map，也就是三级依赖：</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404121911396.png" alt="image-20240412191107333" style="zoom:45%;" /><table><thead><tr><th align="center"><strong>缓存名称</strong></th><th align="center"><strong>源码名称</strong></th><th align="center">返回结果</th><th align="center"><strong>作用</strong></th></tr></thead><tbody><tr><td align="center">一级缓存</td><td align="center">singletonObjects</td><td align="center">存储所有已创建完毕的单例 Bean （完整的 Bean）</td><td align="center">单例池，缓存已经经历了完整的生命周期，已经初始化完成的bean对象，只实现了singleton scope，<strong>解决不了循环依赖</strong></td></tr><tr><td align="center">二级缓存</td><td align="center">earlySingletonObjects</td><td align="center">存储所有仅完成实例化，但还未进行属性注入和初始化的 Bean</td><td align="center">缓存早期的bean对象（生命周期还没走完）</td></tr><tr><td align="center">三级缓存</td><td align="center">singletonFactories</td><td align="center">存储能建立这个 Bean 的一个工厂，通过工厂能获取这个 Bean，延迟化 Bean 的生成，工厂生成的 Bean 会塞入二级缓存</td><td align="center">缓存的是ObjectFactory，表示对象工厂，用来创建某个对象的</td></tr></tbody></table><p><strong>三级缓存的工作过程</strong>:</p><ol><li>创建bean实例</li><li>将创建的bean实例放入三级缓存</li><li>填充属性</li><li>如果发现循环依赖,尝试从三级缓存中获取</li><li>没有循环依赖，将bean放入一级缓存</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404121917148.png" alt="image-20240412191731029" style="zoom:45%;" /><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404121917842.png" alt="image-20240412191748709" style="zoom:45%;" /><p><strong>二级缓存</strong>和<strong>三级缓存</strong>解决循环依赖的过程：</p><ol><li>首先，获取单例 Bean 的时候会通过 BeanName 先去 singletonObjects（一级缓存） 查找完整的 Bean，如果找到则直接返回，否则进行步骤 2。</li><li>看对应的 Bean 是否在创建中，如果不在创建中直接返回null，如果 Bean 正在创建中，则会去 earlySingletonObjects （二级缓存）查找 Bean，如果找到则返回，否则进行步骤 3</li><li>去 singletonFactories （三级缓存）通过 BeanName 查找到对应的工厂，如果存在 Bean 对应的 Bean工厂，则通过Bean工厂创建 Bean ，并且将 Bean 放置到 earlySingletonObjects （二级缓存）中。</li><li>如果三个缓存都没找到，则返回 null。</li></ol><p>步骤 2 中如果查询发现 Bean 还未创建，就直接返回 null，返回 null 之后，说明这个 Bean 还未创建，这个时候会标记这个 Bean 正在创建中，然后再调用 <code>createBean</code> 来创建 Bean，而实际创建是调用方法 <code>doCreateBean</code>。doCreateBean 这个方法就会执行上面我们说的三步骤：实例化、属性注入初始化。在实例化 Bean 之后，<strong>会往 三级缓存（singletonFactories）塞入一个工厂，而调用这个工厂的 <code>getObject</code> 方法，就能得到这个 Bean</strong>。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411071641321.png" alt="image-20240911195840657.png" style="zoom:85%;" /><h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><h2 id="什么是-IOC？IOC有什么好处"><a href="#什么是-IOC？IOC有什么好处" class="headerlink" title="什么是 IOC？IOC有什么好处"></a>什么是 IOC？IOC有什么好处</h2><p>Spring 的 IOC（Inversion of Control，控制反转）是一种设计模式，用于减少代码间的耦合度，提高软件系统的可维护性、可扩展性和可测试性。在传统的程序设计中，对象的创建和依赖关系的管理是由对象自身负责的，而在使用 IOC 的情况下，这些职责被转移到了外部容器上，即 Spring 容器。</p><p><strong>IOC 的概念</strong>：控制反转并不是一种具体的实现技术，而是一种设计理念。它描述的是对象的控制权从应用程序代码内部转移到外部容器的过程，即对象的创建和生命周期管理不再由程序员直接控制，而是交给框架来管理。</p><h2 id="IOC容器和Bean的关系"><a href="#IOC容器和Bean的关系" class="headerlink" title="IOC容器和Bean的关系"></a>IOC容器和Bean的关系</h2><p><strong>1. IOC 容器</strong></p><p>IOC 容器是 Spring 框架的核心部分，负责管理应用程序中的所有 Bean 的生命周期和配置。</p><p>IOC 容器通过读取配置元数据（通常是 XML 文件、Java 配置类或注解）来了解如何创建和管理 Bean。</p><p>IOC 容器的主要职责包括：</p><ul><li><strong>Bean 的实例化</strong>：根据配置信息创建 Bean 实例。</li><li><strong>Bean 的装配</strong>：管理 Bean 之间的依赖关系，即依赖注入（DI）。</li><li><strong>Bean 生命周期管理</strong>：控制 Bean 的初始化、销毁等生命周期行为。</li></ul><p>Spring 提供了两种主要的 IOC 容器：</p><ul><li><strong>BeanFactory</strong>：这是一个基础的容器接口，提供了基本的依赖注入支持。它是一个轻量级的容器，适合于简单的应用场景。</li><li><strong>ApplicationContext</strong>：它是 <code>BeanFactory</code> 的子接口，除了提供依赖注入功能外，还增加了许多企业级功能，如 AOP 支持、事件发布、国际化等。<code>ApplicationContext</code> 更适合于复杂的大型企业应用。</li></ul><p><strong>2. Bean</strong></p><p>Bean 是由 IOC 容器管理的对象。这些对象是在应用程序中执行特定任务的 Java 对象，它们的创建、装配和生命周期都由 IOC 容器负责。</p><p>Bean 的定义通常包括以下信息：</p><ul><li><strong>类名</strong>：Bean 所对应的 Java 类。</li><li><strong>Bean 名称</strong>：用于在容器中唯一标识 Bean。</li><li><strong>作用域</strong>：定义 Bean 的生命周期和范围，如单例（Singleton）、原型（Prototype）等。</li><li><strong>依赖关系</strong>：Bean 可能依赖的其他 Bean 或资源。</li><li><strong>初始化和销毁方法</strong>：指定在 Bean 创建和销毁时调用的方法。</li></ul><p><strong>3. IOC 容器与 Bean 的关系</strong></p><ul><li><strong>Bean 的定义和注册</strong>：开发者通过配置文件（XML、Java 配置类）或注解（如 <code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>）来定义 Bean，并将其注册到 IOC 容器中。</li><li><strong>Bean 的实例化</strong>：IOC 容器根据配置信息创建 Bean 实例。</li><li><strong>依赖注入</strong>：IOC 容器管理 Bean 之间的依赖关系，通过构造器注入、设值方法注入或字段注入等方式将依赖对象注入到目标 Bean 中。</li><li><strong>生命周期管理</strong>：IOC 容器管理 Bean 的生命周期，包括初始化、使用和销毁等阶段。可以通过配置初始化方法和销毁方法来控制 Bean 的生命周期行为。</li></ul><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>依赖注入（Dependency Injection, DI）是实现 IOC 的具体方式之一。通过<strong>final+构造函数注入</strong>、<strong>set方法注入</strong>或者<strong>接口注入</strong>等方式，将对象的依赖关系注入到对象中，而不是让对象自己创建或查找依赖对象。</p><h2 id="依赖注入的目的"><a href="#依赖注入的目的" class="headerlink" title="依赖注入的目的"></a>依赖注入的目的</h2><p>依赖注入的主要目的是为了减少代码之间的耦合度，提高代码的可复用性和可测试性。通过依赖注入，对象的依赖关系不是由对象自身来创建或查找，而是由外部的容器（如 Spring 容器）在运行时自动注入。</p><p>在项目中，一个对象（我们称其为客户端对象）可能需要引用另一个对象（服务对象）来完成某些任务。没有依赖注入的情况下，客户端对象通常会自己创建或查找服务对象的实例，这种方式会导致客户端和服务对象之间存在紧密的耦合。依赖注入通过外部容器来管理这些依赖关系，从而解耦客户端和服务对象。</p><h2 id="依赖注入的方式"><a href="#依赖注入的方式" class="headerlink" title="依赖注入的方式"></a>依赖注入的方式</h2><p>Spring 框架支持三种主要的依赖注入方式：</p><ol><li><p><strong>构造器注入（Constructor Injection）</strong>：</p><p>在对象创建时通过构造函数传递依赖对象。确保了对象一旦创建后，其依赖项就是不可变的，并且总是处于已初始化状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Service service;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Client</span><span class="params">(Service service)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>set方法注入（Setter Injection）</strong>：</p><p>通过对象的 setter 方法来注入依赖对象。灵活，允许在对象创建后修改依赖关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setService</span><span class="params">(Service service)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>字段注入（Field Injection）</strong>：</p><p>直接在对象的字段上使用 <code>@Autowired</code> 注解来注入依赖对象。简单，但灵活性较差，且不利于单元测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>接口注入（Interface Injection）</strong>：</p><p>类似于set方法注入。通过实现特定的接口来注入依赖对象。这种方式在现代 Spring 应用中较少使用，但仍然是一种可行的注入方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ServiceAware</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setService</span><span class="params">(Service service)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> <span class="keyword">implements</span> <span class="title class_">ServiceAware</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setService</span><span class="params">(Service service)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="IOC-x2F-依赖注入的好处"><a href="#IOC-x2F-依赖注入的好处" class="headerlink" title="IOC &#x2F; 依赖注入的好处"></a>IOC &#x2F; 依赖注入的好处</h2><ol><li><p><strong>降低耦合度</strong>：通过依赖注入，对象之间的依赖关系由 Spring 容器来管理，而不是硬编码在对象内部，这大大降低了对象之间的耦合度。</p></li><li><p><strong>增强灵活性</strong>：由于依赖关系可以在运行时通过配置文件或注解动态设置，因此可以在不修改代码的情况下改变对象的行为，增加了系统的灵活性。</p></li><li><p><strong>易于测试</strong>：依赖注入使得对象更容易被单元测试，因为可以通过注入模拟对象（mock objects）来测试对象的行为，而不需要关心实际的依赖对象。</p></li><li><p><strong>简化代码</strong>：对象的创建和管理都被移到了容器中，减少了初始化代码量，使得业务代码更加简洁明了。</p></li><li><p><strong>集中管理</strong>：所有的依赖关系和对象的生命周期都可以在一个地方进行配置和管理，这有助于团队协作开发，也便于后期维护。</p></li></ol><p>总之，Spring 的 IOC 容器通过提供依赖注入功能，有效地帮助开发者构建松耦合、高内聚的应用程序，提高了代码的质量和开发效率。</p><h2 id="IOC容器启动过程"><a href="#IOC容器启动过程" class="headerlink" title="IOC容器启动过程"></a>IOC容器启动过程</h2><ol><li><strong>加载配置文件</strong>：Spring容器会读取并解析配置文件，或基于注解的配置类消息。</li><li><strong>创建容器</strong>：Spring根据配置文件中定义的Bean信息，实例化并管理各个Bean对象。在容器启动过程中，Spring会创建一个BeanFactory或ApplicationContext容器对象。</li><li><strong>注册Bean定义</strong>：Spring容器会根据配置文件中的Bean定义信息，将Bean对象注册到容器中，并配置Bean之间的依赖关系。</li><li><strong>实例化Bean</strong>：容器启动后，会根据Bean定义信息实例化各个Bean对象，并根据需要填充Bean的属性。</li><li><strong>注册BeanPostProcessor</strong>： Spring容器会注册BeanPostProcessor接口的实现类，这些类可以在Bean实例化之后、初始化之前和初始化之后对Bean进行处理。</li><li><strong>初始化Bean</strong>：容器会调用Bean的初始化方法（如@PostConstruct注解标注的方法或实现initializingBean接口的方法）对Bean进行初始化。</li><li><strong>完成容器启动</strong>：容器启动完成后，可以通过ApplicationContext接口提供的各种方法来获取和操作Bean对象。</li></ol><p>总的来说，Spring的IOC容器启动过程就是将Bean注册到容器中、实例化Bean、初始化Bean、以及处理Bean之间的依赖关系等一系列操作。通过IOC容器，Spring实现了对象的创建、管理和协调，实现了松散耦合和可维护性，使得业务逻辑和对象的创建、销毁、依赖等不再紧密耦合在一起。</p><h2 id="IOC容器装配Bean的详细流程"><a href="#IOC容器装配Bean的详细流程" class="headerlink" title="IOC容器装配Bean的详细流程"></a>IOC容器装配Bean的详细流程</h2><ul><li><p><strong>加载配置信息</strong>：创建 <code>BeanFactory</code> 实例，加载配置文件创建 <code>BeanDefination</code> 对象，并将其注册到 <code>BeanFactory</code> ；</p></li><li><p><strong>实例化Bean</strong>：<code>BeanFactory</code>根据 <code>BeanDefination</code> 的信息，  得到一个实例化的 <code>Bean</code>；</p></li><li><p><strong>初始化Bean</strong>：填充 <code>Bean</code> 属性，处理 <code>@Autowired</code> 、<code>@Value</code> 等注解，得到一个初始化的 <code>Bean</code>；</p></li><li><p><strong>检查依赖关系</strong>：检查 <code>Bean</code> 之间的依赖关系，确保依赖关系已满足；</p></li><li><p><strong>注入容器中</strong>：将 <code>Bean</code> 添加到单例池，对外提供使用。</p></li></ul><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p><strong>AOP</strong>：将对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect）。</p><p><strong>AOP的作用</strong>：</p><ul><li>减少系统中的重复代码</li><li>降低模块间的耦合度</li><li>提高系统的可维护性</li></ul><p><strong>常见的AOP使用场景</strong>：</p><ul><li><p>记录日志</p></li><li><p>缓存处理</p></li><li><p>事务处理</p></li></ul><p><strong>AOP的使用</strong>（以记录操作日志为例）：使用<strong>环绕通知+切点表达式</strong>（找到要记录日志的方法），通过环绕通知的参数获取请求方法的参数（类、方法、注解、请求方式等），获取到这些参数以后，保存到数据库。例如以下步骤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">    <span class="comment">//获取用户名</span></span><br><span class="line">    <span class="comment">//获取请求方式</span></span><br><span class="line">    <span class="comment">//获取访问结果</span></span><br><span class="line">    <span class="comment">//获取模块名称</span></span><br><span class="line">    <span class="comment">//登录IP</span></span><br><span class="line">    <span class="comment">//操作时间</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//保存到数据库（操作日志）</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p>为了使上面的 AOP 切面生效，我们需要在 Spring 应用上下文中启用 AOP 支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> AspectJAnnotationAutoProxyCreator <span class="title function_">aspectJAnnotationAutoProxyCreator</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AspectJAnnotationAutoProxyCreator</span>();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例：防重复提交（环绕通知）"><a href="#例：防重复提交（环绕通知）" class="headerlink" title="例：防重复提交（环绕通知）"></a>例：防重复提交（<code>环绕通知</code>）</h2><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HzxNoRepeatCommit &#123;</span><br><span class="line">    <span class="type">long</span> <span class="title function_">lockTime</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HzxNoRepeatCommitAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义切入点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.hzx.common.annotation.HzxNoRepeatCommit)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hzxNoRepeatCommitPointcut</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这里不需要任何逻辑，只是一个占位符</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 环绕通知</span></span><br><span class="line">    <span class="meta">@Around(&quot;hzxNoRepeatCommitPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="type">HzxNoRepeatCommit</span> <span class="variable">annotation</span> <span class="operator">=</span> signature.getMethod().getAnnotation(HzxNoRepeatCommit.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(jwtProperties.getUserTokenName());</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> jwtUtil.parseJWT(jwtProperties.getUserSecretKey(), token);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> Long.valueOf(claims.get(JwtClaimsConstant.USER_ID).toString());</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> userId + request.getRequestURI() + request.getClass() + request.getMethod() + request.getParameterMap();</span><br><span class="line">        key = DigestUtils.md5DigestAsHex(key.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Boolean.FALSE.equals(redisTemplate.hasKey(key))) &#123;</span><br><span class="line">            redisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;&quot;</span>, annotation.lockTime(), TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">                redisTemplate.delete(key);</span><br><span class="line">                log.error(<span class="string">&quot;处理异常，请重试！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> throwable;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;请勿重复提交！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;请勿重复提交！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line"><span class="meta">@HzxNoRepeatCommit(lockTime = 10)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">submitBill</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;submit success!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例：分布式锁（环绕通知）"><a href="#例：分布式锁（环绕通知）" class="headerlink" title="例：分布式锁（环绕通知）"></a>例：分布式锁（<code>环绕通知</code>）</h2><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">// 表示该注解只能用于方法级别</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 运行时保留，这样才能在运行时通过反射读取</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HzxRedisLock &#123;</span><br><span class="line">    <span class="comment">// 锁名称</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// 锁等待时间</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">waitTime</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 锁超时释放时间（默认-1：会出发自动续期）</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">leaseTime</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 标记为切面</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 注册为Spring Bean</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HzxRedisLockAspect</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ParameterNameDiscoverer</span> <span class="variable">parameterNameDiscoverer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultParameterNameDiscoverer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(redisLock)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint, HzxRedisLock redisLock)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log.info(<span class="string">&quot;进入分布式锁&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">lockName</span> <span class="operator">=</span> <span class="built_in">this</span>.getLockName(joinPoint, redisLock);</span><br><span class="line">        <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(lockName);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLocked</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            isLocked = lock.tryLock(redisLock.waitTime(), redisLock.leaseTime(), TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">if</span> (!isLocked) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;获取分布式锁失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 返回方法</span></span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLocked &amp;&amp; lock.isHeldByCurrentThread()) &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getLockName</span><span class="params">(ProceedingJoinPoint joinPoint, HzxRedisLock redisLock)</span> &#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> resolveMethod(signature, joinPoint.getTarget());</span><br><span class="line">        <span class="type">EvaluationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodBasedEvaluationContext</span>(</span><br><span class="line">                TypedValue.NULL,</span><br><span class="line">                method,</span><br><span class="line">                joinPoint.getArgs(),</span><br><span class="line">                parameterNameDiscoverer);</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">expression</span> <span class="operator">=</span> parser.parseExpression(redisLock.name());</span><br><span class="line">        <span class="keyword">return</span> expression.getValue(context, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Method <span class="title function_">resolveMethod</span><span class="params">(MethodSignature signature, Object target)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; targetClass = target.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> targetClass.getMethod(signature.getName(), signature.getMethod().getParameterTypes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;无法处理目标方法&quot;</span> + signature.getName(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;redis/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisLockController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HzxRedisLock(name = &quot;&#x27;xxBusinessLock-&#x27; + #user.account&quot;, waitTime = 10, leaseTime = 20)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">testConfig</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread.sleep(<span class="number">120000</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;RedisLock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例：统计接口调用次数（环绕通知）"><a href="#例：统计接口调用次数（环绕通知）" class="headerlink" title="例：统计接口调用次数（环绕通知）"></a>例：统计接口调用次数（<code>环绕通知</code>）</h2><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TrackApiCalls &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>; <span class="comment">// 接口的名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiCallTrackerAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(trackApiCalls)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">trackApiCalls</span><span class="params">(ProceedingJoinPoint joinPoint, TrackApiCalls trackApiCalls)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">        <span class="type">String</span> <span class="variable">interfaceName</span> <span class="operator">=</span> trackApiCalls.value();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增加接口调用次数</span></span><br><span class="line">        jedis.incr(interfaceName);</span><br><span class="line">        jedis.expire(interfaceName, <span class="number">60</span>); <span class="comment">// 设置过期时间为一分钟</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 继续执行原始方法</span></span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TrackApiCalls(value = &quot;getUsers&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TrackApiCalls(value = &quot;getUserById&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findById(id).orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;User not found&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取调用次数</strong></p><p>编写方法来获取某个接口在过去一分钟内的调用次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisApiCallCounter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getCallCount</span><span class="params">(String interfaceName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jedis.get(interfaceName) != <span class="literal">null</span> ? Long.parseLong(jedis.get(interfaceName)) : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><p>编写单元测试来验证注解是否正确地记录了接口的调用次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebMvcTest(MyController.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyControllerTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUsersCallCount</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        mockMvc.perform(get(<span class="string">&quot;/api/users&quot;</span>))</span><br><span class="line">                .andExpect(status().isOk());</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">callCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisApiCallCounter</span>(jedis).getCallCount(<span class="string">&quot;getUsers&quot;</span>);</span><br><span class="line">        <span class="keyword">assert</span> callCount == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤器也能实现</p><h2 id="例：日志记录（前置通知、后置通知）"><a href="#例：日志记录（前置通知、后置通知）" class="headerlink" title="例：日志记录（前置通知、后置通知）"></a>例：日志记录（<code>前置通知</code>、<code>后置通知</code>）</h2><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">// 表示该注解只能用于方法级别</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 运行时保留，这样才能在运行时通过反射读取</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HzxLog &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;执行@HzxLog&quot;</span>; <span class="comment">// 可以添加一些描述信息，默认为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 标记为切面</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 注册为Spring Bean</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HzxLogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.hzx.common.annotation.HzxLog)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">HzxLogAspect</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;HzxLogAspect()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeHzxLog</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> requestAttributes.getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">declaringTypeName</span> <span class="operator">=</span> joinPoint.getSignature().getDeclaringTypeName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;============================================ 执行方法: &#123;&#125;.&#123;&#125;() begin ============================================&quot;</span>, declaringTypeName, methodName);</span><br><span class="line">        <span class="comment">//执行时间</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(System.currentTimeMillis());</span><br><span class="line">        log.info(<span class="string">&quot;Time          :&#123;&#125;&quot;</span>, time);</span><br><span class="line">        <span class="comment">//打印请求 URL</span></span><br><span class="line">        log.info(<span class="string">&quot;URL           :&#123;&#125;&quot;</span>, request.getRequestURL());</span><br><span class="line">        <span class="comment">//打印请求 方法</span></span><br><span class="line">        log.info(<span class="string">&quot;HTTP Method   :&#123;&#125;&quot;</span>, request.getMethod());</span><br><span class="line">        <span class="comment">//打印Controller 的全路径以及执行方法</span></span><br><span class="line">        log.info(<span class="string">&quot;Class Method  :&#123;&#125;&quot;</span>, declaringTypeName + <span class="string">&quot;.&quot;</span> + methodName);</span><br><span class="line">        <span class="comment">// 打印请求的 IP</span></span><br><span class="line">        log.info(<span class="string">&quot;IP            :&#123;&#125;&quot;</span>, request.getRemoteHost());</span><br><span class="line">        <span class="comment">// 打印请求入参</span></span><br><span class="line">        log.info(<span class="string">&quot;Request Args  :&#123;&#125;&quot;</span>, JSON.toJSONString(joinPoint.getArgs()));</span><br><span class="line">        log.info(<span class="string">&quot;Controller方法执行中...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;HzxLogAspect()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterHzxLog</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">declaringTypeName</span> <span class="operator">=</span> joinPoint.getSignature().getDeclaringTypeName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        log.info(<span class="string">&quot;============================================ 执行方法: &#123;&#125;.&#123;&#125;() end ============================================&quot;</span>, declaringTypeName, methodName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@HzxLog</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">page</span><span class="params">(<span class="meta">@RequestBody</span> UserPageQueryDto userPageQueryDto)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户分页查询，参数为：&#123;&#125;&quot;</span>, userPageQueryDto);</span><br><span class="line">    <span class="type">PageResult</span> <span class="variable">pageResult</span> <span class="operator">=</span> userService.pageQuery(userPageQueryDto);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP-和-AspectJ-有什么区别？"><a href="#AOP-和-AspectJ-有什么区别？" class="headerlink" title="AOP 和 AspectJ 有什么区别？"></a>AOP 和 AspectJ 有什么区别？</h2><p>Spring AOP 和 AspectJ 都是实现面向切面编程（AOP）的技术，但它们之间存在一些关键的区别，包括设计目的、实现机制、功能范围等方面：</p><p><strong>设计目的与定位</strong></p><ul><li><strong>Spring AOP</strong>：<ul><li>主要目的是为了提供一种简单易用的 AOP 实现，特别适合于那些只需要基本的 AOP 功能的应用程序。</li><li>它是 Spring 框架的一部分，因此与 Spring 的其他组件（如依赖注入）高度集成，使用起来更加方便。</li><li>Spring AOP 更加关注于应用程序的服务层，特别是事务管理等横切关注点。</li></ul></li><li><strong>AspectJ</strong>：<ul><li>是一个完整的 AOP 框架，旨在提供更加强大和灵活的 AOP 功能。</li><li>AspectJ 不仅限于服务层，还可以用于整个应用程序的任何部分，包括 UI 层和数据访问层。</li><li>它是一个独立的框架，可以独立于任何应用框架使用，也可以与 Spring 等其他框架集成。</li></ul></li></ul><p><strong>实现机制</strong></p><ul><li><strong>Spring  AOP</strong>：<ul><li>基于代理模式实现，即通过创建目标对象的代理对象来实现切面逻辑的织入。</li><li>支持两种代理方式：JDK 动态代理和 CGLIB 动态代理。</li><li>只能在方法调用级别上应用通知（advice），不能在字段级别或构造函数级别上应用。</li></ul></li><li><strong>AspectJ</strong>：<ul><li>使用编译时织入（compile-time weaving）或加载时织入（load-time weaving）技术，可以在编译期或加载期将切面逻辑直接织入到目标类的字节码中。</li><li>提供了更多的切入点表达式（pointcut expression），能够匹配更复杂的场景，例如方法调用、字段访问、构造函数执行等。</li><li>支持更广泛的切面类型，如前置通知（before advice）、后置通知（after advice）、环绕通知（around advice）等。</li></ul></li></ul><p><strong>功能范围</strong></p><ul><li><strong>Spring AOP</strong>：<ul><li>提供了基本的 AOP 功能，如事务管理、安全控制等。</li><li>由于其设计上的限制，无法支持一些高级特性，例如字段级别的拦截。</li></ul></li><li><strong>AspectJ</strong>：<ul><li>提供了更为丰富的 AOP 特性，包括但不限于环绕通知、异常通知、引介通知等。</li><li>允许开发者定义更细粒度的切入点，从而更好地控制哪些代码应该被切面所影响。</li></ul></li></ul><p><strong>性能考虑</strong></p><ul><li><strong>Spring AOP</strong>：<ul><li>由于是基于代理的，所以在性能上可能会稍微逊色于 AspectJ，特别是在需要大量代理的情况下。</li><li>但是，对于大多数企业级应用来说，这种性能差异通常是可接受的。</li></ul></li><li><strong>AspectJ</strong>：<ul><li>因为它是在编译期或加载期直接修改字节码，所以理论上可以提供更好的运行时性能。</li><li>编译时织入可能会增加构建过程的时间，但这通常是一次性的成本。</li></ul></li></ul><h1 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h1><p>Spring 的事务管理控制事务的开始、提交和回滚。</p><p>Spring 事务管理具有以下特点：</p><ol><li><strong>统一的事务管理接口</strong>：Spring 提供了一个抽象的事务管理接口 <code>PlatformTransactionManager</code>，它支持多种事务管理系统，如 JPA、Hibernate、JDBC 等。</li><li><strong>编程式事务管理</strong>：通过手动调用 <code>PlatformTransactionManager</code> 的方法来管理事务的开始、提交和回滚。</li><li><strong>声明式事务管理</strong>：通过 XML 或注解的方式，在方法级别声明事务属性，使得事务管理更加简洁和灵活。</li></ol><h2 id="事务的使用方式"><a href="#事务的使用方式" class="headerlink" title="事务的使用方式"></a>事务的使用方式</h2><p>事务分为<strong>编程式事务</strong>和<strong>声明式事务</strong>：</p><ul><li><p>编程式事务控制：需使用TransactionTemplate来进行实现，对业务代码<strong>有侵入性</strong>，项目中很少使用。</p></li><li><p><strong>声明式事务管理</strong>：声明式事务管理建立在AOP之上的。其原理是<strong>通过AOP功能，对方法前后进行拦截，将事务处理的功能编织到拦截的方法中，也就是在目标方法开始之前加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务</strong>。</p></li></ul><h2 id="事务失效的场景和原因"><a href="#事务失效的场景和原因" class="headerlink" title="事务失效的场景和原因"></a>事务失效的场景和原因</h2><table><thead><tr><th>事务失效场景</th><th align="center">原因</th><th align="center">解决办法</th></tr></thead><tbody><tr><td>异常捕获处理</td><td align="center">代码自己处理了异常，没有抛出异常，Transactional没有知悉异常，就会失效。</td><td align="center">手动抛出异常，在catch块添加throw new RuntimeException(e)</td></tr><tr><td>抛出检查异常</td><td align="center">Transactional默认只会回滚非检查异常，当代码抛出检查异常（例如：FileNotFoundException ）时就会失效。</td><td align="center">配置rollbackFor属性@Transactional(rollbackFor&#x3D;Exception.class)</td></tr><tr><td>非public方法</td><td align="center">Spring 只能为 public 方法创建代理、添加事务通知</td><td align="center">改为 public 方法</td></tr></tbody></table><h2 id="传播行为（Propagation）"><a href="#传播行为（Propagation）" class="headerlink" title="传播行为（Propagation）"></a>传播行为（Propagation）</h2><p>事务的传播行为说白了就是多个方法都有进行写操作时，对于事物的控制，作为事物的传播级别，在Spring中体现为一个叫 <code>Propagation</code> 的类中。</p><p><code>Propagation</code> 类定义了当一个方法被另一个事务性的方法调用时，应该如何处理事务。常见的传播行为包括：</p><ul><li><p><code>REQUIRED</code>：如果有事务活动，就加入当前事务；如果没有，就创建一个新的事务。</p><blockquote><p>最简单的事物传播机制，将方法中所有执行的过程全部作为一个事物，要么成功，要么失败，一次只占用一个数据库连接。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411092123712.png" alt="image-20241109212341682" style="zoom:67%;" /></li><li><p><code>REQUIRES_NEW</code>：总是创建一个新的事务，无论当前是否存在事务。</p><blockquote><p>每次执行方法，都会新开一个数据库连接，每次方法的执行都是独立的，不受任何影响。（可以预见的性能很差）</p></blockquote><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411092125052.png" alt="image-20241109212529011" style="zoom:67%;" /></li><li><p><code>NESTED</code>：如果存在事务，则在嵌套事务内执行；如果没有，则行为类似于 <code>PROPAGATION_REQUIRED</code>。</p><blockquote><p>此模式下会利用数据库的<strong>存档点机制</strong>，即使事务运行过程中失败了，也会回滚到之前的存档点。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411092121831.png" alt="image-20241109212153782" style="zoom:67%;" /></li><li><p><code>SUPPORTS</code>：如果有事务活动，就加入当前事务；如果没有，就以非事务方式运行。</p></li><li><p><code>NOT_SUPPORTED</code>：以非事务方式运行，并挂起任何存在的事务。</p></li><li><p><code>MANDATORY</code>：必须在现有的事务上下文中执行；如果没有事务，则抛出异常。</p></li><li><p><code>NEVER</code>：以非事务方式运行，如果存在事务，则抛出异常。</p></li></ul><h2 id="隔离级别（Isolation-Level）"><a href="#隔离级别（Isolation-Level）" class="headerlink" title="隔离级别（Isolation Level）"></a>隔离级别（Isolation Level）</h2><p>隔离级别定义了事务如何与其他事务相互作用，以防止不同的事务相互影响。常见的隔离级别包括：</p><ul><li><code>ISOLATION_DEFAULT</code>：使用底层数据库的默认隔离级别。</li><li><code>ISOLATION_READ_UNCOMMITTED</code>：最低的隔离级别，事务可以看到其他未提交事务所做的更改。</li><li><code>ISOLATION_READ_COMMITTED</code>：事务只能看到其他已提交事务所做的更改。</li><li><code>ISOLATION_REPEATABLE_READ</code>：事务可以多次读取同一数据，并且得到相同的结果，即使有其他事务在此期间进行了修改。</li><li><code>ISOLATION_SERIALIZABLE</code>：最高的隔离级别，事务之间完全隔离，就像按顺序执行一样。</li></ul><h2 id="只读事务（Read-Only-Transactions）"><a href="#只读事务（Read-Only-Transactions）" class="headerlink" title="只读事务（Read-Only Transactions）"></a>只读事务（Read-Only Transactions）</h2><p>只读事务是指那些只读取数据而不进行任何写操作的事务。标记为只读的事务可以带来性能上的好处，因为数据库可以优化只读事务的执行。</p><h1 id="————–SpringBoot————–"><a href="#————–SpringBoot————–" class="headerlink" title="————–SpringBoot————–"></a><div align="center">————–SpringBoot————–</div></h1><h1 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h1><p>SpringBoot的自动配置通过注解 <code>@SpringBootApplication</code> 实现，这个注解是对三个注解进行了封装，分别是：</p><ul><li><code>@SpringBootConfiguration</code>：声明当前是一个配置类，与 @Configuration 注解作用相同。</li><li><code>@ComponentScan</code>：组件扫描，默认扫描当前引导类所在包及其子包。</li><li><code>@EnableAutoConfiguration</code>：SpringBoot实现自动化配置的核心注解，该注解通过 <code>@Import</code> 导入对应的配置选择器，它的核心是<code>META-INF</code>文件夹下的 <code>spring.factories</code> 文件，里面存放了需要扫描注解的类。在内部它读取了该项目和该项目引用的jar包的的classpath路径下 <code>META-INF/spring.factories</code> 文件中的所配置的类的全类名。 在这些配置类中所定义的Bean会根据条件注解所指定的条件来决定是否需要将其导入到Spring容器中。条件判断会有像 <code>@ConditionalOnClass</code> 或 <code>@ConditionalOnMissingBean</code> 这样的注解，判断是否有对应的class文件或bean对象，如果有则加载该类，把这个配置类的所有的Bean放入Spring容器中使用。</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404121934450.png" alt="image-20240412193405294" style="zoom: 60%;" /><h1 id="SpringBoot为什么默认使用CGlib？"><a href="#SpringBoot为什么默认使用CGlib？" class="headerlink" title="SpringBoot为什么默认使用CGlib？"></a>SpringBoot为什么默认使用CGlib？</h1><ul><li><strong>不需要实现接口</strong>：JDK动态代理要求目标类必须实现一个接口，而CGLib动态代理可以直接代理普通类（非接口）。这意味着CGLib可以对那些没有接口的类进行代理，提供更大的灵活性。</li><li><strong>代理对象的创建</strong>：JDK动态代理只能代理实现了接口的类，它是通过<strong>Proxy类</strong>和<strong>lnvocationHandler接口</strong>来创建代理对象。而CGLib动态代理可以代理任意类，它是通过<strong>Enhancer类</strong>来创建代理对象，无需接口。</li><li><strong>性能更好</strong>：CGLib动态代理比JDK动态代理更快。JDK动态代理是通过反射来实现的，而CGLib动态代理使用字节码生成技术，直接操作字节码。JDK动态代理对代理方法的调用是通过InvocationHandler来转发的，而CGLib动态代理对代理方法的调用是通过FastClass机制来直接调用目标方法的，这也是CGLib性能较高的原因之一。</li></ul><blockquote><p><strong>JDK 动态代理</strong>是基于接口的，所以要求代理类一定是有定义接口的。</p><p><strong>CGLIB</strong> 基于 ASM 字节码生成工具，它是通过继承的方式生成目标类的子类来实现代理类，所以要注意 final 方法。</p></blockquote><h1 id="————–SpringMVC————–"><a href="#————–SpringMVC————–" class="headerlink" title="————–SpringMVC————–"></a><div align="center">————–SpringMVC————–</div></h1><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p>Springmvc的执行流程分为老的和新的：</p><ul><li>视图阶段（老旧JSP年代）<ol><li>用户发送出请求到前端控制器DispatcherServlet</li><li>DispatcherServlet收到请求调用HandlerMapping（处理器映射器）</li><li>HandlerMapping找到具体的处理器，生成处理器对象及处理器拦截器(如果有)，再一起返回给DispatcherServlet。</li><li>DispatcherServlet调用HandlerAdapter（处理器适配器）</li><li>HandlerAdapter经过适配调用具体的处理器（Handler&#x2F;Controller）</li><li>Controller执行完成返回ModelAndView对象</li><li>HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet</li><li>DispatcherServlet将ModelAndView传给ViewReslover（视图解析器）</li><li>ViewReslover解析后返回具体View（视图）</li><li>DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）</li><li>DispatcherServlet响应用户</li></ol></li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404121921126.png" alt="image-20240412192120003" style="zoom: 50%;" /><ul><li>前后端分离阶段（接口开发，异步）<ol><li>用户发送出请求到前端控制器DispatcherServlet</li><li>DispatcherServlet收到请求调用HandlerMapping（处理器映射器）</li><li>HandlerMapping找到具体的处理器，生成处理器对象及处理器拦截器(如果有)，再一起返回给DispatcherServlet。</li><li>DispatcherServlet调用HandlerAdapter（处理器适配器）</li><li>HandlerAdapter经过适配调用具体的处理器（Handler&#x2F;Controller）</li><li>方法上添加了@ResponseBody</li><li>通过HttpMessageConverter来返回结果转换为JSON并响应</li></ol></li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404121921353.png" alt="image-20240412192132239" style="zoom:50%;" /><h2 id="过滤器、拦截器"><a href="#过滤器、拦截器" class="headerlink" title="过滤器、拦截器"></a>过滤器、拦截器</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410012125541.png" alt="image-20241001212521342" style="zoom: 100%;" /><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li><strong>生命周期管理</strong>：Filter的生命周期由Servlet容器管理；Interceptor则是由Spring MVC框架管理。</li><li><strong>依赖关系</strong>：Filter依赖于Servlet容器；Interceptor依赖于Spring MVC框架。</li><li><strong>作用范围</strong>：Filter可以拦截所有web资源（包括JSP页面、Servlet和其他静态资源）；Interceptor则主要针对Spring MVC Controller请求。</li></ul><h2 id="过滤器-Filter"><a href="#过滤器-Filter" class="headerlink" title="过滤器(Filter)"></a>过滤器(Filter)</h2><ol><li><strong>用途</strong>：编码处理、视图响应、请求参数处理、URL重定向。</li><li><strong>配置</strong>：<ul><li>实现<code>jakarta.servlet.Filter</code>接口来创建自定义过滤器。</li><li>重写<code>doFilter()</code>方法来实现过滤逻辑。</li><li>可以创建注解来帮助配置过滤器的作用范围。</li><li>在启动类使用注解启用过滤器<code>@ServletComponentScan(basePackages = &quot;com.hzx.filter&quot;)</code></li></ul></li></ol><h2 id="拦截器-Interceptor"><a href="#拦截器-Interceptor" class="headerlink" title="拦截器(Interceptor)"></a>拦截器(Interceptor)</h2><ol><li><strong>用途</strong>：身份认证与授权、接口的性能监控、跨域处理目志记录。</li><li><strong>配置</strong>：<ul><li>实现<code>org.springframework.web.servlet.HandlerInterceptor</code>接口来创建自定义拦截器。</li><li>实现<code>preHandle()</code>、<code>postHandle()</code>、<code>afterCompletion()</code>等方法来定义拦截逻辑。</li><li>在配置类中实现<code>WebMvcConfigurer</code>接口，并重写<code>addInterceptors()</code>方法来注册拦截器。</li></ul></li></ol><h2 id="Restful-风格的接口"><a href="#Restful-风格的接口" class="headerlink" title="Restful 风格的接口"></a>Restful 风格的接口</h2><p>RESTful 接口的设计目标是使 Web 服务更加简单、直观和易于理解。以下是 RESTful 风格接口的主要特点和设计原则：</p><p><strong>主要特点</strong></p><ol><li><strong>无状态</strong>：每次请求都是独立的，服务器不保存任何客户端的状态信息。每个请求都包含所有必要的信息，服务器可以根据这些信息处理请求。</li><li><strong>客户端-服务器架构</strong>：客户端和服务器是分离的，客户端负责用户界面和用户交互，服务器负责数据存储和业务逻辑。</li><li><strong>无会话</strong>：服务器不保存客户端的会话状态，每个请求都包含所有必要的信息。</li><li><strong>可缓存</strong>：响应可以被标记为可缓存的，客户端可以缓存这些响应以提高性能。</li><li><strong>分层系统</strong>：客户端和服务器之间可以有中间层（如代理、网关），这些中间层可以改进系统的可伸缩性和性能。</li><li><strong>按需编码</strong>（可选）：服务器可以发送可执行代码（如 JavaScript）给客户端，客户端可以在运行时执行这些代码。</li></ol><p><strong>设计原则</strong></p><ol><li><strong>资源</strong>：RESTful 接口的核心概念是资源。资源可以是任何东西，如用户、订单、文章等。资源通过 URI（Uniform Resource Identifier）来标识。</li><li><strong>HTTP 方法</strong>：使用标准的 HTTP 方法来操作资源。常见的 HTTP 方法包括：<ul><li><code>GET</code>：用于获取资源。</li><li><code>POST</code>：用于创建资源。</li><li><code>PUT</code>：用于更新资源。</li><li><code>DELETE</code>：用于删除资源。</li><li><code>PATCH</code>：用于部分更新资源。</li></ul></li><li><strong>HTTP 状态码</strong>：使用标准的 HTTP 状态码来表示请求的结果。常见的状态码包括：<ul><li><code>200 OK</code>：请求成功。</li><li><code>201 Created</code>：资源已创建。</li><li><code>204 No Content</code>：请求成功，但没有返回内容。</li><li><code>400 Bad Request</code>：请求无效。</li><li><code>401 Unauthorized</code>：未授权。</li><li><code>403 Forbidden</code>：禁止访问。</li><li><code>404 Not Found</code>：资源未找到。</li><li><code>405 Method Not Allowed</code>：请求方法不被允许。</li><li><code>500 Internal Server Error</code>：服务器内部错误。</li></ul></li><li><strong>媒体类型</strong>：使用标准的媒体类型（如 JSON、XML）来表示资源的格式。常见的媒体类型包括：<ul><li><code>application/json</code></li><li><code>application/xml</code></li></ul></li></ol><p><strong>优点</strong></p><ol><li><strong>简洁</strong>：RESTful 接口设计简洁，易于理解和实现。</li><li><strong>标准化</strong>：遵循标准的 HTTP 方法和状态码，提高了互操作性。</li><li><strong>无状态</strong>：每个请求都是独立的，服务器不需要保存客户端的状态信息，提高了可伸缩性。</li><li><strong>可缓存</strong>：响应可以被缓存，提高了性能。</li></ol><p><strong>缺点</strong></p><ol><li><strong>复杂性</strong>：对于复杂的业务逻辑，RESTful 接口可能不够灵活，需要更多的设计和实现工作。</li><li><strong>安全性</strong>：RESTful 接口依赖于 HTTP 方法和状态码，可能存在安全风险，需要采取适当的措施来保护接口。</li></ol><h1 id="—————ORM框架—————"><a href="#—————ORM框架—————" class="headerlink" title="—————ORM框架—————"></a><div align="center">—————ORM框架—————</div></h1><h2 id="Mybatis的执行流程"><a href="#Mybatis的执行流程" class="headerlink" title="Mybatis的执行流程"></a>Mybatis的执行流程</h2><ol><li>读取MyBatis配置文件：mybatis-config.xml加载运行环境和映射文件</li><li>构造会话工厂SqlSessionFactory</li><li>会话工厂创建SqlSession对象（包含了执行SQL语句的所有方法）</li><li>操作数据库的接口，Executor执行器，同时负责查询缓存的维护</li><li>Executor接口的执行方法中有一个MappedStatement类型的参数，封装了映射信息</li><li>输入参数映射</li><li>输出结果映射</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404121939016.png" alt="image-20240412193916911" style="zoom:40%;" /><p>MapperStatement对象的结构：</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404121940933.png" alt="image-20240412194031857" style="zoom: 50%;" /><h2 id="MyBatis中-和-区别"><a href="#MyBatis中-和-区别" class="headerlink" title="MyBatis中 # 和 $ 区别"></a>MyBatis中 <code>#</code> 和 <code>$</code> 区别</h2><p><strong><code>#&#123;&#125;</code> 和 <code>$&#123;&#125;</code> 的区别</strong>:</p><ul><li><code>#&#123;&#125;</code> 是预编译处理，会将参数替换为<code>?</code></li><li><code>$&#123;&#125;</code> 是字符串替换，直接将参数值拼接到SQL中</li></ul><p><strong>使用场景</strong>:</p><ul><li><code>#&#123;&#125;</code> 用于SQL语句中的值</li><li><code>$&#123;&#125;</code> 用于动态表名、列名等</li></ul><p><strong>安全性</strong>:</p><ul><li><code>#&#123;&#125;</code> 可以防止SQL注入</li><li><code>$&#123;&#125;</code> 不能防止SQL注入</li></ul><h2 id="Mybatis一级缓存、二级缓存"><a href="#Mybatis一级缓存、二级缓存" class="headerlink" title="Mybatis一级缓存、二级缓存"></a>Mybatis一级缓存、二级缓存</h2><ul><li><strong>一级缓存</strong>（默认开启）：<strong>基于 PerpetualCache 的 HashMap 存储</strong>，其存储作用域为 当前的Session，当Session写操作或关闭后（commit、rollback、update、delete），一级缓存就将清空。</li><li><strong>一级缓存的转移</strong>：当前Session提交或者关闭以后，一级缓存会转移到二级缓存。</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404121951400.png" alt="image-20240412195111353" style="zoom: 50%;" /><ul><li><strong>二级缓存</strong>：<strong>基于namespace和mapper的作用域</strong>，不依赖于SQL session，<strong>默认也采用 PerpetualCache 的 HashMap 存储</strong>。使用二级缓存的数据<strong>需要实现Serializable接口</strong>。当某一个作用域Session的操作写操作后，默认该作用域下所有 select 中的缓存将被 clear。</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404121951987.png" alt="image-20240412195131930" style="zoom:50%;" /><ul><li><p><strong>二级缓存开启方式</strong>：</p><ol><li>全局配置文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>映射文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用“&lt;cache/&gt;”标签让mapper.xml映射文件生效二级缓存</span><br></pre></td></tr></table></figure></li></ul><h2 id="Mybatis一二级缓存的脏数据问题"><a href="#Mybatis一二级缓存的脏数据问题" class="headerlink" title="Mybatis一二级缓存的脏数据问题"></a>Mybatis一二级缓存的脏数据问题</h2><p>多 SqlSession 或者分布式环境下，就可能有脏数据的情况发生，建议将一级缓存级别设置为 statement。</p><p><strong>一级缓存有脏数据的情况</strong>，因为不同 SqlSession 之间的修改不会影响彼此，比如 SqlSession1 读了数据 A，SqlSession2 将数据改为 B，此时 SqlSession1 再读还是得到 A，这就出现了脏数据的问题。</p><p><strong>二级缓存也会有脏数据的情况</strong>，比如多个命名空间进行多表查询，各命名空间之间数据是不共享的，所以存在脏数据的情况。</p><p>例如 A、B 两张表进行联表查询，表 A 缓存了这次联表查询的结果，则结果存储在表 A 的 namespace 中，此时如果表 B 的数据更新了，是不会同步到表 A namespace 的缓存中，因此就会导致脏读的产生。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410081502315.png" style="zoom: 60%;" /><p>可以看到 mybaits 缓存还是不太安全，<strong>在分布式场景下肯定会出现脏数据</strong>。</p><p>建议生产上使用 redis 结合 spring cache 进行数据的缓存，或者利用 guava、caffeine 进行本地缓存。</p><h2 id="MyBatis-延迟加载的实现原理是什么？"><a href="#MyBatis-延迟加载的实现原理是什么？" class="headerlink" title="MyBatis 延迟加载的实现原理是什么？"></a>MyBatis 延迟加载的实现原理是什么？</h2><p><strong>实现原理</strong></p><ol><li><strong>代理对象</strong>：MyBatis 使用动态代理技术来实现延迟加载。当查询一个对象时，MyBatis 并不会立即加载关联的对象，而是返回一个代理对象。</li><li><strong>拦截器</strong>：当访问代理对象中的属性时，代理对象会拦截这些访问请求，并在第一次访问时触发实际的数据库查询。</li><li><strong>缓存</strong>：查询结果会被缓存起来，以便后续访问时不再需要进行数据库查询。</li></ol><h2 id="MyBatis-如何实现db和pojo类的类型转换？"><a href="#MyBatis-如何实现db和pojo类的类型转换？" class="headerlink" title="MyBatis 如何实现db和pojo类的类型转换？"></a>MyBatis 如何实现db和pojo类的类型转换？</h2><p>MyBatis 使用<strong>类型处理器（TypeHandlers）</strong>来实现数据库类型和 Java 类型之间的转换。类型处理器是一些实现了 <code>org.apache.ibatis.type.TypeHandler</code> 接口的类，它们负责将 Java 类型转换为数据库类型，反之亦然。</p><ol><li><strong>内置类型处理器</strong>：MyBatis 提供了许多内置的类型处理器，用于处理常见的数据类型转换，如 <code>IntegerTypeHandler</code>、<code>StringTypeHandler</code> 等。</li><li><strong>自定义类型处理器</strong>：用户可以自定义类型处理器来处理特定的数据类型转换。自定义类型处理器需要实现 <code>TypeHandler</code> 接口，并在 MyBatis 配置文件中注册。</li></ol><h2 id="MyBatis-的优点和缺点？"><a href="#MyBatis-的优点和缺点？" class="headerlink" title="MyBatis 的优点和缺点？"></a>MyBatis 的优点和缺点？</h2><p><strong>优点</strong></p><ol><li><strong>简单易学</strong>：MyBatis 的 API 设计简洁，易于学习和使用。</li><li><strong>灵活性高</strong>：MyBatis 允许开发者编写 SQL 语句，提供了很大的灵活性。</li><li><strong>支持动态 SQL</strong>：MyBatis 支持动态 SQL，可以根据条件动态生成 SQL 语句。</li><li><strong>延迟加载</strong>：支持延迟加载，提高性能。</li><li><strong>类型处理器</strong>：支持自定义类型处理器，方便处理复杂的数据类型转换。</li></ol><p><strong>缺点</strong></p><ol><li><strong>SQL 分离</strong>：SQL 语句写在 XML 文件中，与业务逻辑分离，不利于维护。</li><li><strong>性能问题</strong>：对于复杂的查询，MyBatis 可能不如一些 ORM 框架优化得那么好。</li><li><strong>学习曲线</strong>：虽然简单易学，但对于初学者来说，理解和掌握所有特性仍需时间。</li></ol>]]></content>
    
    
    <summary type="html">Java, all in one！</summary>
    
    
    
    <category term="学习" scheme="https://01petard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://01petard.github.io/tags/Java/"/>
    
    <category term="Spring" scheme="https://01petard.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>My Java Guide - Java基础</title>
    <link href="https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20Java%E5%9F%BA%E7%A1%80/"/>
    <id>https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20Java%E5%9F%BA%E7%A1%80/</id>
    <published>2024-10-14T16:23:00.000Z</published>
    <updated>2024-10-14T16:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="——————Java基础——————"><a href="#——————Java基础——————" class="headerlink" title="——————Java基础——————"></a><div align="center">——————Java基础——————</div></h1><h1 id="八种基本的数据类型"><a href="#八种基本的数据类型" class="headerlink" title="八种基本的数据类型"></a>八种基本的数据类型</h1><p>Java支持数据类型分为两类： 基本数据类型和引用数据类型。</p><p>基本数据类型共有8种，可以分为三类：</p><ul><li>数值型：整数类型（byte、short、int、long）和浮点类型（float、double）</li><li>字符型：char</li><li>布尔型：boolean</li></ul><img src="https://cdn.xiaolincoding.com//picgo/1715930632378-7f03a5ae-3364-41d4-88a8-428997d543dd.png" alt="img" style="zoom: 100%;float:left;" /><p>8种基本数据类型的默认值、位数、取值范围，如下表所示：</p><img src="https://cdn.xiaolincoding.com//picgo/1715930589177-73932d2c-b0c0-4f58-a5c1-ab514b1a389c.png" alt="img" style="zoom:80%;" /><h1 id="String、StringBuffer-和-StringBuilder-的区别"><a href="#String、StringBuffer-和-StringBuilder-的区别" class="headerlink" title="String、StringBuffer 和 StringBuilder 的区别"></a>String、StringBuffer 和 StringBuilder 的区别</h1><ul><li><strong>String</strong>：不可变，适合少量字符串操作。</li><li><strong>StringBuffer</strong>：可变且线程安全，适合多线程环境中的频繁字符串修改，，内部使用了 <code>synchronized</code> 关键字来保证多线程环境下的安全性。</li><li><strong>StringBuilder</strong>：可变且非线程安全，适合单线程环境中的高性能字符串处理，性能比 <code>StringBuffer</code> 更高。</li></ul><h1 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h1><p>接口的设计是<strong>自上而下</strong>的。我们知晓某一行为，于是基于这些<strong>行为约束定义了接口</strong>，一些类需要有这些行为，因此实现对应的接口。</p><p>抽象类的设计是<strong>自下而上的</strong>。我们写了很多类，发现它们之间有共性，<strong>通过代码复用将公共逻辑封装成一个抽象类</strong>，<strong>减少代码冗余</strong>。</p><p>所谓的 <strong>自上而下</strong> 指的是先约定接口，再实现。</p><p>而 <strong>自下而上的</strong> 是先有一些类，才抽象了共同父类（可能和学校教的不太一样，但是实战中很多时候都是因为重构才有的抽象）。</p><p><strong>其他区别</strong></p><p>1）方法实现</p><p>接口中的方法默认是 public 和 abstract（但在 Java8 之后可以设置 default 方法或者静态方法）。</p><p>抽象类可以包含 abstract 方法（没有实现）和具体方法（有实现）。它允许子类继承并重用抽象类中的方法实现。</p><p>2）构造函数和成员变量</p><p>接口不能包含构造函数，接口中的成员变量默认为常量。</p><p>抽象类可以包含构造函数，成员变量可以有不同的访问修饰符。</p><p>3）多继承</p><p>抽象类只能单继承，接口可以有多个实现。</p><h1 id="注解的原理"><a href="#注解的原理" class="headerlink" title="注解的原理"></a>注解的原理</h1><p>注解其实就是一个标记，是一种提供元数据的机制，用于给代码添加说明信息。</p><p>注解可以标记在类上、方法上、属性上等，标记自身也可以设置一些值。</p><p>注解本身不影响程序的逻辑执行，但可以通过工具或框架来利用这些信息进行特定的处理，如代码生成、编译时检查、运行时处理等。</p><h1 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h1><p>反射机制提供了在运行时动态创建对象、调用方法、访问字段等功能，而无需在编译时知道这些类的具体信息。</p><p><strong>反射机制的优点</strong>：</p><ul><li>可以<strong>动态地获取类的信息</strong>，不需要在编译时就知道类的信息。</li><li>可以<strong>动态地创建对象</strong>，不需要在编译时就知道对象的类型。</li><li>可以<strong>动态地调用对象的属性和方法</strong>，在运行时动态地改变对象的行为。</li></ul><p><strong>反射机制的缺点</strong>：</p><ul><li>性能损失。</li><li>安全风险。</li></ul><p><strong>反射机制的应用场景</strong>：</p><ul><li>动态代理。</li><li>测试工具。</li><li>ORM框架。</li></ul><h1 id="深拷贝和浅拷贝的区别"><a href="#深拷贝和浅拷贝的区别" class="headerlink" title="深拷贝和浅拷贝的区别"></a>深拷贝和浅拷贝的区别</h1><p><strong>深拷贝</strong>：深拷贝不仅复制对象本身，还递归复制对象中所有引用的对象。这样新对象与原对象完全独立，修改新对象不会影响到原对象。即包括基本类型和引用类型，堆内的引用对象也会复制一份。</p><p><strong>浅拷贝</strong>：拷贝只复制对象的引用，而不复制引用指向的实际对象。也就是说，浅拷贝创建一个新对象，但它的字段（若是对象类型）指向的是原对象中的相同内存地。</p><p>深拷贝创建的新对象与原对象完全独立，任何一个对象的修改都不会影响另一个。而修改浅拷贝对象中引用类型的字段会影响到原对象，因为它们共享相同的引用。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411051953319.png" alt="image-20210303201307397.png" style="zoom: 75%;" /><h1 id="网络通信协议名词解释"><a href="#网络通信协议名词解释" class="headerlink" title="网络通信协议名词解释"></a>网络通信协议名词解释</h1><p>以一个点外卖的例子解释什么是IP地址、端口号、Socket和协议。</p><p><strong>IP地址</strong>：对应的是我们上班所在的一个大楼。</p><p><strong>端口号</strong>：对应我们所在大楼里的一个具体房间。</p><p><strong>Socket</strong>：进行通信的一个工具。</p><p><strong>协议</strong>：通信要遵循的规则。</p><blockquote><h3 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h3><p>IP地址：外卖员要送餐到的大楼（例如：腾讯大楼）。</p><p>端口号：外卖员要到大楼里的具体房间（例如：1001）。</p><p>Socket：外卖员通过手机（Socket）与我们通信，告知外卖已到。</p><p>协议：我们默认使用中文对话。</p></blockquote><h1 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h1><ul><li><strong>public</strong>：完全公开，任何地方都可以访问。</li><li><strong>private</strong>：仅限于本类内部访问。</li><li><strong>protected</strong>：本类内部及子类可以访问。</li><li><strong>默认（无修饰符）</strong>：包内可见，同包下的其他类可以访问。</li></ul><table><thead><tr><th align="center">修饰符</th><th align="center">当前类</th><th align="center">同一包内</th><th align="center">子类（不同包）</th><th align="center">其他包</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">是</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">protected</td><td align="center">是</td><td align="center">是</td><td align="center">是</td><td align="center">否</td></tr><tr><td align="center">默认（default）</td><td align="center">是</td><td align="center">是</td><td align="center">否</td><td align="center">否</td></tr><tr><td align="center">private</td><td align="center">是</td><td align="center">否</td><td align="center">否</td><td align="center">否</td></tr></tbody></table><p><strong>适用范围区别</strong></p><ul><li>**<code>public</code>**：类、接口、字段、方法、构造函数。</li><li>**<code>protected</code>**：字段、方法、构造函数（没有类）。</li><li><strong>默认（包级别）</strong>：类、字段、方法、构造函数。</li><li>**<code>private</code>**：字段、方法、构造函数（没有类）。</li></ul><p><strong>访问修饰符的选择</strong></p><ul><li>**<code>public</code>**：适用于需要被外部类广泛访问的成员。过多使用 <code>public</code> 可能导致封装性降低。</li><li>**<code>protected</code>**：适用于需要在继承关系中使用的成员。它提供了比 <code>public</code> 更严格的访问控制，但允许子类访问。</li><li><strong>默认（包级别）</strong>：适用于仅在同一包内使用的类和成员。适当使用可以隐藏实现细节，减少类之间的耦合。</li><li>**<code>private</code>**：适用于内部实现细节，确保类的内部数据和方法不会被外部直接访问。最严格的访问控制，保护类的封装性。</li></ul><h1 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h1><p>字节码是编译器将源代码编译后生成的中间表示形式，位于源代码与 JVM 执行的机器码之间。</p><p>字节码由 JVM 解释或即时编译（JIT）为机器码执行。</p><p><strong>字节码结构</strong>：</p><ul><li>Java 字节码是平台无关的指令集，存储在 <code>.class</code> 文件中。每个 <code>.class</code> 文件包含类的定义信息、字段、方法，以及方法对应的字节码指令。</li></ul><p><strong>字节码指令集</strong>：</p><ul><li>Java 字节码包含一系列指令，如加载、存储、算术运算、类型转换、对象操作、控制流等。常见的指令包括 <code>aload</code>, <code>iload</code>, <code>astore</code>, <code>iadd</code>, <code>if_icmpgt</code> 等。</li></ul><p><strong>执行过程</strong>：</p><ul><li>JVM 通过解释器逐条执行字节码，或通过 JIT 编译器将热点字节码片段即时编译为机器码，提高执行效率。</li></ul><p><strong>反射与动态代理</strong>：</p><ul><li>通过 Java 反射 API，可以在运行时动态生成或修改字节码，从而创建代理对象或实现动态方法调用。</li></ul><p><strong>字节码增强与框架</strong>：</p><ul><li>许多 Java 框架（如 Hibernate, Spring AOP）使用字节码增强技术，通过修改类的字节码来实现功能增强。常用工具包括 ASM、Javassist、CGLIB 等。</li></ul><h1 id="——————设计模式——————"><a href="#——————设计模式——————" class="headerlink" title="——————设计模式——————"></a><div align="center">——————设计模式——————</div></h1><h1 id="为什么要用设计模式？"><a href="#为什么要用设计模式？" class="headerlink" title="为什么要用设计模式？"></a>为什么要用设计模式？</h1><p>设计模式是一套被预先定义好的解决方案，用于解决软件设计中常见问题，以提高代码的可重用性、可读性和可维护性。</p><p>使用设计模式的原因是为了使软件设计更加规范、模块化，从而提升代码的质量，使得软件更容易理解、维护和扩展。</p><h1 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h1><p>23种设计模式通常分为三大类，分别是：</p><ol><li><strong>创建型模式（Creational Patterns）</strong></li><li><strong>结构型模式（Structural Patterns）</strong></li><li><strong>行为型模式（Behavioral Patterns）</strong></li></ol><h2 id="创建型模式（Creational-Patterns）"><a href="#创建型模式（Creational-Patterns）" class="headerlink" title="创建型模式（Creational Patterns）"></a>创建型模式（Creational Patterns）</h2><p>创建型模式关注对象的创建机制，将对象的创建与使用分离开来，以便让系统更加灵活地决定创建哪个对象。创建型模式可以将对象创建的责任封装起来，从而使系统更加独立于具体的对象创建、组合和表示。</p><p><strong>创建型模式包括但不限于：</strong></p><ul><li><strong>单例模式（Singleton）</strong>：确保一个类只有一个实例，并提供一个访问它的全局访问点。</li><li><strong>工厂方法模式（Factory Method）</strong>：定义一个创建产品对象的接口，让子类决定实例化哪一个类。</li><li><strong>抽象工厂模式（Abstract Factory）</strong>：提供一个创建一系列相关或依赖对象的接口，而无需指定它们具体的类。</li><li><strong>建造者模式（Builder）</strong>：将一个复杂对象的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</li><li><strong>原型模式（Prototype）</strong>：用原型实例指定创建对象的种类，并通过复制这些原型创建新的对象。</li></ul><h2 id="结构型模式（Structural-Patterns）"><a href="#结构型模式（Structural-Patterns）" class="headerlink" title="结构型模式（Structural Patterns）"></a>结构型模式（Structural Patterns）</h2><p>结构型模式关注如何组合类或对象来形成更大的结构。这些模式可以让你的代码更加灵活地组合对象，以便创建出更加复杂的结构。</p><p><strong>结构型模式包括但不限于：</strong></p><ul><li><strong>适配器模式（Adapter）</strong>：将一个类的接口转换成客户希望的另外一个接口。</li><li><strong>装饰器模式（Decorator）</strong>：动态地给一个对象添加一些额外的职责。</li><li><strong>代理模式（Proxy）</strong>：为其他对象提供一种代理以控制对这个对象的访问。</li><li><strong>外观模式（Facade）</strong>：为子系统中的一组接口提供一个一致的界面。</li><li><strong>桥接模式（Bridge）</strong>：将抽象部分与它的实现部分分离，使它们都可以独立地变化。</li><li><strong>组合模式（Composite）</strong>：将对象组合成树形结构以表示“部分-整体”的层次结构。</li><li><strong>享元模式（Flyweight）</strong>：运用共享技术有效地支持大量细粒度的对象。</li></ul><h2 id="行为型模式（Behavioral-Patterns）"><a href="#行为型模式（Behavioral-Patterns）" class="headerlink" title="行为型模式（Behavioral Patterns）"></a>行为型模式（Behavioral Patterns）</h2><p>行为型模式关注对象之间的通信以及职责分配机制。它们描述了对象之间应该如何相互作用以及如何分配职责。</p><p><strong>行为型模式包括但不限于：</strong></p><ul><li><strong>策略模式（Strategy）</strong>：定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。</li><li><strong>模板方法模式（Template Method）</strong>：定义一个操作中的算法骨架，而将一些步骤延迟到子类中。</li><li><strong>观察者模式（Observer）</strong>：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</li><li><strong>迭代器模式（Iterator）</strong>：提供一种方法访问一个容器对象中各个元素，而又不需暴露该对象的内部细节。</li><li><strong>责任链模式（Chain of Responsibility）</strong>：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。</li><li><strong>命令模式（Command）</strong>：将一个请求封装为一个对象，从而使你可用不同的请求来参数化客户端。</li><li><strong>备忘录模式（Memento）</strong>：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</li><li><strong>状态模式（State）</strong>：允许一个对象在其内部状态改变时改变它的行为。</li><li><strong>访问者模式（Visitor）</strong>：表示一个作用于某对象结构中的各元素的操作。</li><li><strong>中介者模式（Mediator）</strong>：用一个中介对象来封装一系列的对象交互。</li><li><strong>解释器模式（Interpreter）</strong>：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</li></ul><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p><strong>分类</strong>：</p><ul><li>饿汉式单例模式</li><li>懒汉式单例模式</li><li>线程安全的懒汉式单例模式</li></ul><p><strong>单例模式（Singleton Pattern）</strong> 是最简单的创建型设计模式。它的目的是确保一个类只有一个实例存在，并且提供一个全局访问点。</p><p><strong>单例模式最重要的特点</strong> 是构造函数私有，从而避免外界直接使用构造函数直接实例化该类的对象。</p><p><strong>单例模式的优点</strong>：</p><ul><li>在一个对象需要频繁地销毁、创建，而销毁、创建性能又无法优化时，单例模式的优势尤为明显。</li><li>在一个对象的产生需要较多资源时，如读取配置、产生其他依赖对象时，则可以通过在启动时直接产生一个单例对象，然后用永久驻留内存的方式来解决。</li><li>单例模式可以避免对资源的多重占用，因为只有一个实例，避免了对一个共享资源的并发操作。</li><li>单例模式可以在系统设置全局的访问点，优化和共享资源访问。</li></ul><p><strong>单例模式的缺点</strong>：</p><ul><li>单例模式无法创建子类，扩展困难，若要扩展，除了修改代码基本上没有第二种途径可以实现。</li><li>单例模式对测试不利。在并行开发环境中，如果采用单例模式的类没有完成，是不能进行测试的。</li><li>单例模式与单一职责原则有冲突。一个类应该只实现一个逻辑，而不关心它是否是单例的，是不是要用单例模式取决于环境。</li></ul><p><strong>单例模式在 Java 中通常有两种表现形式</strong>：</p><h2 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h2><ul><li>类加载时就进行对象实例化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法私有，确保外界不能直接实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过公有的静态方法获取对象实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="懒汉式单例模式（线程安全）"><a href="#懒汉式单例模式（线程安全）" class="headerlink" title="懒汉式单例模式（线程安全）"></a>懒汉式单例模式（线程安全）</h2><ul><li>第一次引用类时才进行对象实例化。</li><li><strong>线程安全问题</strong>：如果线程 A 和 B 同时调用此方法，会出现执行 <code>if (instance == null)</code> 语句时都为真的情况，导致创建两个对象。为解决这一问题，可以使用 <code>synchronized</code> 关键字对静态方法 <code>getInstance()</code> 进行同步。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton2</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造方法，确保外界不能直接实例化。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过公有的静态方法获取对象实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">static</span> <span class="params">(<span class="keyword">synchronized</span>)</span> Singleton2 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton2</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>比较</strong>：饿汉式单例类的速度和反应时间要优于懒汉式单例类，但资源利用率不如懒汉式单例类。</p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p><strong>分类</strong>：</p><ul><li>简单工厂模式</li><li>工厂方法模式</li><li>抽象工厂模式</li></ul><p><strong>工厂模式（Factory Pattern）</strong> 是一种创建型设计模式，其主要目的是封装对象创建的细节，使得创建过程更加灵活。工厂模式可以分为三种类型：简单工厂模式、工厂方法模式和抽象工厂模式。</p><p><strong>简单工厂模式</strong> 实际上并不是严格意义上的设计模式，而是一种编程习惯。它通过定义一个工厂类来创建不同类型的对象，这些对象通常具有共同的父类或接口。</p><p><strong>工厂方法模式</strong> 是简单工厂模式的进一步发展。在工厂方法模式中，我们不再提供一个统一的工厂类来创建所有的对象，而是针对不同的对象提供不同的工厂。每个对象都有一个与之对应的工厂，工厂方法模式让一个类的实例化延迟到其子类。</p><p><strong>抽象工厂模式</strong> 是工厂方法模式的进一步深化。在这个模式中，工厂类不仅可以创建一个对象，而是可以创建一组相关或相互依赖的对象。这是与工厂方法模式最大的不同点。抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>简单工厂模式并不严格属于设计模式，而更多是一种编程习惯。其特点是定义一个工厂类，根据传入的参数不同返回不同的实例。这些实例通常具有共同的父类或接口。</p><p><strong>示例代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleShape</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CircleShape</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CircleShape: created&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;draw: CircleShape&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RectShape</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RectShape</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;RectShape: created&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;draw: RectShape&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TriangleShape</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TriangleShape</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TriangleShape: created&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;draw: TriangleShape&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title function_">getShape</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">shape</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;circle&quot;</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">            shape = <span class="keyword">new</span> <span class="title class_">CircleShape</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;rect&quot;</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">            shape = <span class="keyword">new</span> <span class="title class_">RectShape</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;triangle&quot;</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">            shape = <span class="keyword">new</span> <span class="title class_">TriangleShape</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shape;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>工厂方法模式定义了一个创建产品对象的工厂接口，将实际创建工作推迟到子类中。它具有良好的封装性和扩展性，可以降低模块间的耦合度。</p><p><strong>示例代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">brand</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">speed</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    Car <span class="title function_">factory</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Audi</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">brand</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;一台奥迪&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speed</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;快&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">price</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;贵&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Auto</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">brand</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;一台奥拓&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speed</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;慢&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">price</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;便宜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AudiFactory</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">factory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Audi</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoFactory</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">factory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Auto</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CarFactory</span> <span class="variable">carFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AudiFactory</span>();</span><br><span class="line">        <span class="type">Car</span> <span class="variable">audi</span> <span class="operator">=</span> carFactory.factory();</span><br><span class="line">        audi.brand();</span><br><span class="line">        audi.speed();</span><br><span class="line">        audi.price();</span><br><span class="line"></span><br><span class="line">        carFactory = <span class="keyword">new</span> <span class="title class_">AutoFactory</span>();</span><br><span class="line">        <span class="type">Car</span> <span class="variable">auto</span> <span class="operator">=</span> carFactory.factory();</span><br><span class="line">        auto.brand();</span><br><span class="line">        auto.speed();</span><br><span class="line">        auto.price();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>抽象工厂模式为创建一组相关或相互依赖的对象提供一个接口，而无需指定它们的具体类。它适用于需要一组对象共同完成某种功能的场景。</p><p><strong>示例代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">OperationController</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">control</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UIController</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AndroidOperationController</span> <span class="keyword">implements</span> <span class="title class_">OperationController</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">control</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AndroidOperationController&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AndroidUIController</span> <span class="keyword">implements</span> <span class="title class_">UIController</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AndroidInterfaceController&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IosOperationController</span> <span class="keyword">implements</span> <span class="title class_">OperationController</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">control</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;IosOperationController&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IosUIController</span> <span class="keyword">implements</span> <span class="title class_">UIController</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;IosInterfaceController&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WpOperationController</span> <span class="keyword">implements</span> <span class="title class_">OperationController</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">control</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;WpOperationController&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WpUIController</span> <span class="keyword">implements</span> <span class="title class_">UIController</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;WpInterfaceController&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SystemFactory</span> &#123;</span><br><span class="line">    OperationController <span class="title function_">createOperationController</span><span class="params">()</span>;</span><br><span class="line">    UIController <span class="title function_">createInterfaceController</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AndroidFactory</span> <span class="keyword">implements</span> <span class="title class_">SystemFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OperationController <span class="title function_">createOperationController</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AndroidOperationController</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UIController <span class="title function_">createInterfaceController</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AndroidUIController</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IosFactory</span> <span class="keyword">implements</span> <span class="title class_">SystemFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OperationController <span class="title function_">createOperationController</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IosOperationController</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UIController <span class="title function_">createInterfaceController</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IosUIController</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WpFactory</span> <span class="keyword">implements</span> <span class="title class_">SystemFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OperationController <span class="title function_">createOperationController</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WpOperationController</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UIController <span class="title function_">createInterfaceController</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WpUIController</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p><strong>策略模式（Strategy Pattern）</strong> 是一种行为设计模式，它使你能在运行时改变对象的行为。策略模式定义了一系列算法，并将每一个算法封装起来，使它们可以互相替换。</p><p>策略模式允许在运行时改变算法的行为。它定义了包含算法族的接口，并且将算法的责任委托给一个子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义策略类型枚举类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">PointsSuitScenesEnum</span> &#123;</span><br><span class="line">    BOOK_TEST(<span class="string">&quot;书籍测试&quot;</span>, <span class="number">1</span>),</span><br><span class="line">    LEVEL_FIGHT(<span class="string">&quot;阅读闯关&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String sceneName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> sceneId;</span><br><span class="line"></span><br><span class="line">    PointsSuitScenesEnum(String sceneName, <span class="type">int</span> sceneId) &#123;</span><br><span class="line">        <span class="built_in">this</span>.sceneName = sceneName;</span><br><span class="line">        <span class="built_in">this</span>.sceneId = sceneId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sceneName: &quot;</span> + sceneName);</span><br><span class="line">        System.out.println(<span class="string">&quot;sceneId: &quot;</span> + sceneId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义策略接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IPointsStrategy</span> &#123;</span><br><span class="line">    <span class="comment">// 获取积分类型</span></span><br><span class="line">    PointsSuitScenesEnum <span class="title function_">getPointsSuitScene</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 积分操作</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operaPoints</span><span class="params">(String userId, <span class="type">int</span> points)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 策略实现类 A</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookTestPointsReslove</span> <span class="keyword">implements</span> <span class="title class_">IPointsStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PointsSuitScenesEnum <span class="title function_">getPointsSuitScene</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PointsSuitScenesEnum.BOOK_TEST;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operaPoints</span><span class="params">(String userId, <span class="type">int</span> points, <span class="type">int</span> operateType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (operateType == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;书籍测试加分:userId=&quot;</span> + userId + <span class="string">&quot; points=&quot;</span> + points);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (operateType == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;书籍测试减分:userId=&quot;</span> + userId + <span class="string">&quot; points=&quot;</span> + points);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 策略实现类 B</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LevelFightPointsReslove</span> <span class="keyword">implements</span> <span class="title class_">IPointsStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PointsSuitScenesEnum <span class="title function_">getPointsSuitScene</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PointsSuitScenesEnum.LEVEL_FIGHT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operaPoints</span><span class="params">(String userId, <span class="type">int</span> points, <span class="type">int</span> operateType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (operateType == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;阅读闯关加分:userId=&quot;</span> + userId + <span class="string">&quot; points=&quot;</span> + points);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (operateType == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;阅读闯关扣分:userId=&quot;</span> + userId + <span class="string">&quot; points=&quot;</span> + points);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置类，注入Bean</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PointsStrategyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PointsService <span class="title function_">pointsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PointsService</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BookTestPointsReslove <span class="title function_">scene1PointsStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookTestPointsReslove</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LevelFightPointsReslove <span class="title function_">scene2PointsStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LevelFightPointsReslove</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IPointsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addPoints</span><span class="params">(Long userId, <span class="type">int</span> points, PointsSuitScenesEnum scene)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 业务实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PointsService</span> <span class="keyword">implements</span> <span class="title class_">IPointsService</span>, ApplicationContextAware &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;PointsSuitScenesEnum, IPointsStrategy&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        Map&lt;String, IPointsStrategy&gt; tempMap = applicationContext.getBeansOfType(IPointsStrategy.class);</span><br><span class="line">        tempMap.forEach((k, v) -&gt; &#123;</span><br><span class="line">            map.put(v.getPointsSuitScene(), v);</span><br><span class="line">            System.out.println(k + <span class="string">&quot; &quot;</span> + v);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPoints</span><span class="params">(Long userId, <span class="type">int</span> points, PointsSuitScenesEnum scene)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">IPointsStrategy</span> <span class="variable">strategy</span> <span class="operator">=</span> map.get(scene);</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(strategy)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;No strategy found for scene: &quot;</span> + scene);</span><br><span class="line">        &#125;</span><br><span class="line">        strategy.operaPoints(userId.toString(), points, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subtractPoints</span><span class="params">(Long userId, <span class="type">int</span> points, PointsSuitScenesEnum scene)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">IPointsStrategy</span> <span class="variable">strategy</span> <span class="operator">=</span> map.get(scene);</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(strategy)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;No strategy found for scene: &quot;</span> + scene);</span><br><span class="line">        &#125;</span><br><span class="line">        strategy.operaPoints(userId.toString(), points, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用策略模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PointsController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// （实际项目中在SpringBootApplication中就做好了，不需要手动获取Bean）</span></span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(PointsStrategyConfig.class);</span><br><span class="line">        <span class="type">PointsService</span> <span class="variable">pointsService</span> <span class="operator">=</span> context.getBean(PointsService.class);</span><br><span class="line">context.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 虽然调用的接口不同，但是实际上运行的是同一套代码</span></span><br><span class="line">        <span class="comment">// 加分</span></span><br><span class="line">        pointsService.addPoints(<span class="number">1L</span>, <span class="number">100</span>, PointsSuitScenesEnum.BOOK_TEST);</span><br><span class="line">        pointsService.addPoints(<span class="number">2L</span>, <span class="number">200</span>, PointsSuitScenesEnum.LEVEL_FIGHT);</span><br><span class="line">        <span class="comment">// 减分</span></span><br><span class="line">        pointsService.subtractPoints(<span class="number">1L</span>, <span class="number">100</span>, PointsSuitScenesEnum.BOOK_TEST);</span><br><span class="line">        pointsService.subtractPoints(<span class="number">2L</span>, <span class="number">200</span>, PointsSuitScenesEnum.LEVEL_FIGHT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><p><strong>责任链模式（Chain of Responsibility Pattern）</strong>能够将请求沿着处理者的链进行发送。收到请求后，每个处理者均可对请求进行处理，或将其传递给链上的下一个处理者。</p><p>假设我们有一个系统，需要处理不同级别的日志消息（debug、info、warning、error）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象处理者类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">LogHandler</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> LogHandler nextHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNextHandler</span><span class="params">(LogHandler handler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nextHandler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">handleLog</span><span class="params">(String level, String message)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体处理者类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DebugLogHandler</span> <span class="keyword">extends</span> <span class="title class_">LogHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLog</span><span class="params">(String level, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;debug&quot;</span>.equals(level)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[DEBUG] &quot;</span> + message);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nextHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">            nextHandler.handleLog(level, message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InfoLogHandler</span> <span class="keyword">extends</span> <span class="title class_">LogHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLog</span><span class="params">(String level, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;info&quot;</span>.equals(level)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[INFO] &quot;</span> + message);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nextHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">            nextHandler.handleLog(level, message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WarningLogHandler</span> <span class="keyword">extends</span> <span class="title class_">LogHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLog</span><span class="params">(String level, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;warning&quot;</span>.equals(level)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[WARNING] &quot;</span> + message);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nextHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">            nextHandler.handleLog(level, message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ErrorLogHandler</span> <span class="keyword">extends</span> <span class="title class_">LogHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLog</span><span class="params">(String level, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;error&quot;</span>.equals(level)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[ERROR] &quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LogHandler</span> <span class="variable">debugHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DebugLogHandler</span>();</span><br><span class="line">        <span class="type">LogHandler</span> <span class="variable">infoHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InfoLogHandler</span>();</span><br><span class="line">        <span class="type">LogHandler</span> <span class="variable">warningHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WarningLogHandler</span>();</span><br><span class="line">        <span class="type">LogHandler</span> <span class="variable">errorHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorLogHandler</span>();</span><br><span class="line"></span><br><span class="line">        debugHandler.setNextHandler(infoHandler);</span><br><span class="line">        infoHandler.setNextHandler(warningHandler);</span><br><span class="line">        warningHandler.setNextHandler(errorHandler);</span><br><span class="line"></span><br><span class="line">        debugHandler.handleLog(<span class="string">&quot;debug&quot;</span>, <span class="string">&quot;This is a debug message.&quot;</span>);</span><br><span class="line">        debugHandler.handleLog(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;This is an info message.&quot;</span>);</span><br><span class="line">        debugHandler.handleLog(<span class="string">&quot;warning&quot;</span>, <span class="string">&quot;This is a warning message.&quot;</span>);</span><br><span class="line">        debugHandler.handleLog(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;This is an error message.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><p>模板方法模式（Template Method Pattern）定义了一些基本步骤，并让子类实现某些步骤。它允许子类重写某些步骤而不改变整个算法。</p><p>假设我们需要设计一个游戏框架，其中包含一些固定的流程，但每个游戏的具体实现不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playGame</span><span class="params">()</span> &#123;</span><br><span class="line">        makePreparation();</span><br><span class="line">        play();</span><br><span class="line">        cleanUp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 子类可以覆盖此方法以添加额外的步骤</span></span><br><span class="line">        additionalSteps();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makePreparation</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">cleanUp</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">additionalSteps</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 默认为空操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chess</span> <span class="keyword">extends</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">makePreparation</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Setting up the chess board...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Playing the game...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">cleanUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cleaning up the chess board...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">additionalSteps</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Saving game state...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Poker</span> <span class="keyword">extends</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">makePreparation</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Shuffling the cards...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Playing poker...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">cleanUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Putting away the cards...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Game</span> <span class="variable">chess</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chess</span>();</span><br><span class="line">        chess.playGame();</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">Game</span> <span class="variable">poker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Poker</span>();</span><br><span class="line">        poker.playGame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>观察者模式（Observer Pattern）允许对象在状态发生变化时通知多个观察者对象，而无需使对象知道观察者是谁。</p><p>假设我们有一个天气预报系统，需要实时更新天气信息，并通知不同的观察者（如用户界面、天气API等）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String weatherInfo)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer o)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer o)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">(String weatherInfo)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeatherStation</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> String weatherInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer o)</span> &#123;</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer o)</span> &#123;</span><br><span class="line">        observers.remove(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">(String weatherInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weatherInfo = weatherInfo;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(weatherInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeatherInfo</span><span class="params">(String info)</span> &#123;</span><br><span class="line">        notifyObservers(info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String weatherInfo)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Current Conditions Display: &quot;</span> + weatherInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForecastDisplay</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String weatherInfo)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Forecast Display: &quot;</span> + weatherInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WeatherStation</span> <span class="variable">weatherStation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeatherStation</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Observer</span> <span class="variable">currentConditionsDisplay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CurrentConditionsDisplay</span>();</span><br><span class="line">        <span class="type">Observer</span> <span class="variable">forecastDisplay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForecastDisplay</span>();</span><br><span class="line"></span><br><span class="line">        weatherStation.registerObserver(currentConditionsDisplay);</span><br><span class="line">        weatherStation.registerObserver(forecastDisplay);</span><br><span class="line"></span><br><span class="line">        weatherStation.setWeatherInfo(<span class="string">&quot;Sunny&quot;</span>);</span><br><span class="line">        weatherStation.setWeatherInfo(<span class="string">&quot;Rainy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        weatherStation.removeObserver(forecastDisplay);</span><br><span class="line"></span><br><span class="line">        weatherStation.setWeatherInfo(<span class="string">&quot;Cloudy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a><em>适配器模式</em></h1><p><strong>适配器模式（Adapter Pattern）</strong> 是一种结构型设计模式，它能让不兼容的接口协同工作。适配器模式充当了两个不同接口之间的桥梁。</p><p>适配器模式让两个没有关联的接口能够一起工作。适配器通过包装一个类的方法来实现所需的目标接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被适配的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adaptee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">specificRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Adaptee&#x27;s specific request.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">implements</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Adapter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adaptee = <span class="keyword">new</span> <span class="title class_">Adaptee</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        adaptee.specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用适配器模式的客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adapter</span>();</span><br><span class="line">        target.request(); <span class="comment">// 输出: Adaptee&#x27;s specific request.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a><em>装饰器模式</em></h1><p><strong>装饰器模式（Decorator Pattern）</strong> 是一种结构型设计模式，它允许向部分对象添加新的功能，同时不会影响其他对象的功能。装饰器模式可以动态地给一个对象添加一些额外的责任。</p><p>装饰器模式允许你给对象动态地添加职责，而无需修改对象本身的结构。它是继承关系的一个替代方案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteComponent</span> <span class="keyword">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ConcreteComponent operation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Decorator</span> <span class="keyword">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Component component;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Decorator</span><span class="params">(Component component)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        component.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体装饰器 A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteDecoratorA</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteDecoratorA</span><span class="params">(Component component)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.operation();</span><br><span class="line">        add <span class="title function_">Responsibilities</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> add <span class="title function_">Responsibilities</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ConcreteDecoratorA added responsibilities&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体装饰器 B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteDecoratorB</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteDecoratorB</span><span class="params">(Component component)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.operation();</span><br><span class="line">        add <span class="title function_">Responsibilities</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> add <span class="title function_">Responsibilities</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ConcreteDecoratorB added responsibilities&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用装饰器模式的客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Component</span> <span class="variable">component</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteComponent</span>();</span><br><span class="line">        component.operation(); <span class="comment">// 输出: ConcreteComponent operation</span></span><br><span class="line"></span><br><span class="line">        component = <span class="keyword">new</span> <span class="title class_">ConcreteDecoratorA</span>(component);</span><br><span class="line">        component.operation(); <span class="comment">// 输出: ConcreteComponent operation ConcreteDecoratorA added responsibilities</span></span><br><span class="line"></span><br><span class="line">        component = <span class="keyword">new</span> <span class="title class_">ConcreteDecoratorB</span>(component);</span><br><span class="line">        component.operation(); <span class="comment">// 输出: ConcreteComponent operation ConcreteDecoratorA added responsibilities ConcreteDecoratorB added responsibilities</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#<div align="center">———————集合———————</div></p><img src="https://pic.code-nav.cn/mianshiya/question_picture/1816450440005341186/pLwh6DJV_image_mianshiya.png" alt="面试鸭" style="zoom:100%;" /><img src="https://pic.code-nav.cn/mianshiya/question_picture/1816764875009871873/wbcoHSLn_image_mianshiya.png" alt="image.png" style="zoom:120%;" /><h1 id="Collection-家族"><a href="#Collection-家族" class="headerlink" title="Collection 家族"></a>Collection 家族</h1><h2 id="List-接口"><a href="#List-接口" class="headerlink" title="List 接口"></a>List 接口</h2><ul><li>ArrayList：基于动态数组，查询速度快，插入、删除慢。</li><li>LinkedList：基于双向链表，插入、删除快，查询速度慢。</li><li>Vector：线程安全的动态数组，类似于 ArrayList，但开销较大。</li></ul><h2 id="Set-接口"><a href="#Set-接口" class="headerlink" title="Set 接口"></a>Set 接口</h2><ul><li>HashSet：基于哈希表，元素无序，不允许重复。</li><li>LinkedHashSet：基于链表和哈希表，维护插入顺序，不允许重复。</li><li>TreeSet：基于红黑树，元素有序，不允许重复。</li></ul><h2 id="Queue-接口"><a href="#Queue-接口" class="headerlink" title="Queue 接口"></a>Queue 接口</h2><ul><li>PriorityQueue：基于优先级堆，元素按照自然顺序或指定比较器排序。</li><li>LinkedList：可以作为队列使用，支持 FIFO（先进先出）操作。</li></ul><h2 id="Map-接口"><a href="#Map-接口" class="headerlink" title="Map 接口"></a>Map 接口</h2><ul><li>HashMap：基于哈希表，键值对无序，不允许键重复。</li><li>LinkedHashMap：基于链表和哈希表，维护插入顺序，不允许键重复。</li><li>TreeMap：基于红黑树，键值对有序，不允许键重复。</li><li>Hashtable：线程安全的哈希表，不允许键或值为 null。</li><li>ConcurrentHashMap：线程安全的哈希表，适合高并发环境，不允许键或值为 null。</li></ul><h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><h2 id="ArrayList-和-LinkedList"><a href="#ArrayList-和-LinkedList" class="headerlink" title="ArrayList 和 LinkedList"></a>ArrayList 和 LinkedList</h2><ul><li><p><strong>底层数据结构</strong></p><ul><li><p>ArrayList 底层是<strong>动态数组</strong>，支持下标查询，寻址公式是：<code>baseAddress</code> + <code>i</code> * <code>dataTypeSize</code>，计算下标的内存地址效率较高</p></li><li><p>LinkedList 底层是<strong>双向链表</strong></p></li></ul></li><li><p><strong>操作数据效率</strong></p><ul><li>ArrayList支持下标查询， LinkedList不支持下标查询</li><li>查询： ArrayList下标查询的时间复杂度是O(1)，两者顺序查询的时间复杂度都是O(n)</li><li>写操作：<ul><li>ArrayList尾部操作，时间复杂度是O(1)；其他部分增删需要挪动数组，时间复杂度是O(n)</li><li>LinkedList头尾操作，时间复杂度是O(1)，其他都需要遍历链表，时间复杂度是O(n)</li></ul></li></ul></li><li><p><strong>内存空间占用</strong></p><ul><li><p>ArrayList底层是数组，内存连续，节省内存</p></li><li><p>LinkedList 是双向链表需要存储数据，和两个指针，更占用内存</p></li></ul></li><li><p><strong>线程不安全</strong></p><ul><li><p>ArrayList和LinkedList都不是线程安全的</p></li><li><p><strong>如果需要保证线程安全，有两种方案：</strong></p><ul><li><p><strong>在方法内使用局部变量</strong></p></li><li><p><strong>使用<code>Collections.synchronizedList</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">syncArrayList</span>  <span class="operator">=</span> Collections.synchronizedList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(); </span><br><span class="line"><span class="type">List</span> <span class="variable">syncLinkedList</span> <span class="operator">=</span> Collections.synchronizedList(<span class="keyword">new</span> <span class="title class_">LinkedList</span>());</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="ArrayList-的扩容原理"><a href="#ArrayList-的扩容原理" class="headerlink" title="ArrayList 的扩容原理"></a>ArrayList 的扩容原理</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405032304675.png" alt="image-20240503230443354" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405032304295.png" alt="image-20240503230431987" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405032306575.png" alt="image-20240503230655288" style="zoom:50%;" /><h2 id="ArrayList-的底层实现原理"><a href="#ArrayList-的底层实现原理" class="headerlink" title="ArrayList 的底层实现原理"></a>ArrayList 的底层实现原理</h2><p>ArrayList底层是用动态的数组实现的</p><p>ArrayList初始容量为0，当第一次添加数据的时候才会初始化容量为10</p><p>ArrayList在进行扩容的时候是原来容量的1.5倍，每次扩容都需要拷贝数组</p><p>ArrayList在添加数据的时候</p><ul><li>确保数组已使用长度（size）加1之后足够存下下一个数据</li><li>计算数组的容量，如果当前数组已使用长度+1后的大于当前的数组长度，则调用grow方法扩容（原来的1.5倍）</li><li>确保新增的数据有地方存储之后，则将新元素添加到位于size的位置上</li><li>返回添加成功布尔值。</li></ul><h2 id="Array-和-List-之间的转换"><a href="#Array-和-List-之间的转换" class="headerlink" title="Array 和 List 之间的转换"></a>Array 和 List 之间的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组转列表</span></span><br><span class="line"><span class="comment">//Arrays.asList()的数据会受影响</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testArray2List</span><span class="params">()</span>&#123;</span><br><span class="line">    String[] strs = &#123;<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>&#125;;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(strs);</span><br><span class="line">    <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//列表转数组</span></span><br><span class="line"><span class="comment">//list.toArray()的数据不会受影响</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testList2Array</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">    String[] array = list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[list.size()]);</span><br><span class="line">    <span class="comment">//String[] array = list.toArray(new String[0]);</span></span><br><span class="line">    <span class="keyword">for</span> (String s : array) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>HashMap的数据结构： 底层使用hash表数据结构，即数组和链表或红黑树</p><ol><li><p>当我们往HashMap中put元素时，利用key的hashCode重新hash计算出当前对象的元素在数组中的下标 </p></li><li><p>存储时，如果出现hash值相同的key，此时有两种情况。</p><p>a. 如果key相同，则覆盖原始值；</p><p>b. 如果key不同（出现冲突），则将当前的key-value放入链表或红黑树中 </p></li><li><p>获取时，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值。</p></li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405071519247.png" alt="image-20230428204902016" style="zoom:80%;" /><p>面试官追问：HashMap的jdk1.7和jdk1.8有什么区别</p><ul><li><p>JDK1.8之前采用的是拉链法。拉链法：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。</p></li><li><p>jdk1.8在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8） 时并且数组长度达到64时，将链表转化为红黑树，以减少搜索时间。扩容 resize( ) 时，红黑树拆分成的树的结点数小于等于临界值6个，则退化成链表</p></li></ul><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405091509067.png" alt="image-20240509150950892" style="zoom: 50%;" /><ol><li>判断键值对数组table是否为空或为null，否则执行resize(进行扩容 (初始化)</li><li>根据键值key计算hash值得到数组索引</li><li>判断table[i] &#x3D;&#x3D; null，直接新建节点添加</li><li>如果table[i] !&#x3D; null，进行判断<ol><li>判断table[i]的首个元素是否和key一样，如果相同直接覆盖value</li><li>判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对</li><li>遍历table[i]，链表的尾部插入数据，然后判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，遍历过程中若发现key已经存在直接覆盖value</li></ol></li><li>插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold（数组长度*0.75），如果超过，进行扩容。</li></ol><h2 id="扩容原理"><a href="#扩容原理" class="headerlink" title="扩容原理"></a>扩容原理</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405091519087.png" alt="image-20240509151952950" style="zoom: 55%;" /><ol><li>在添加元素或初始化的时候需要调用resize方法进行扩容，第一次添加数据初始化数组长度为16，以后每次每次扩容都是达到了扩容阈值 (数组长度＊0.75)</li><li>每次扩容的时候，都是扩容之前容量的2倍</li><li>扩容之后，会新创建一个数组，需要把老数组中的数据挪动到新的数组中<ol><li>没有hash冲突的节点，则直接使用e.hash ＆(newCap-1)计算新数组的索引位置</li><li>如果是红黑树，走红黑树的添加</li><li>如果是链表，则需要遍历链表，可能需要拆分链表，判断(e.hash &amp; oldCap)是否为0，该元素的位置要么停留在原始位置，要么移动到原始位置+增加的数组大小这个位置上</li></ol></li></ol><h2 id="寻址算法"><a href="#寻址算法" class="headerlink" title="寻址算法"></a>寻址算法</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405091555688.png" alt="image-20240509155515506" style="zoom:55%;" /><ol><li>计算对象的 hashCode()</li><li>调用 hash() 方法进行二次哈希， hashcode值右移16位再异或运算，让哈希分布更为均匀</li><li>最后 (capacity – 1) &amp; hash 得到索引</li></ol><h2 id="hashCode-和-equals-的重要性"><a href="#hashCode-和-equals-的重要性" class="headerlink" title="hashCode() 和 equals() 的重要性"></a>hashCode() 和 equals() 的重要性</h2><p><strong><code>HashMap</code> 的键必须实现 <code>hashCode()</code> 和 <code>equals()</code> 方法。</strong><code>hashCode()</code> 用于计算哈希值，以<strong>决定键的存储位置</strong>，而 <code>equals()</code> 用于比较两个键是否相同。在 <code>put</code> 操作时，如果两个键的 <code>hashCode()</code> 相同，但 <code>equals()</code> 返回 <code>false</code>，则这两个键会被视为不同的键，存储在同一个桶的不同位置。在 <code>get</code> 操作时，可能会找不到键。</p><h2 id="为什么HashMap的长度一定是2的次幂？"><a href="#为什么HashMap的长度一定是2的次幂？" class="headerlink" title="为什么HashMap的长度一定是2的次幂？"></a>为什么HashMap的长度一定是2的次幂？</h2><ol><li><strong>计算索引时效率更高</strong>：位运算的效率高于取模运算（<code>hash % n</code>），提高了哈希计算的速度。</li><li><strong>扩容时重新计算索引效率更高</strong>： 扩容时只需通过简单的位运算判断是否需要迁移，这减少了重新计算哈希值的开销，提升了 rehash 的效率。（hash &amp; oldCap &#x3D;&#x3D; 0 的<strong>元素留在原来位置</strong> ，否则新位置 &#x3D; 旧位置 + oldCap）</li></ol><h2 id="Java-1-7的多线程死循环问题（简略版）"><a href="#Java-1-7的多线程死循环问题（简略版）" class="headerlink" title="Java 1.7的多线程死循环问题（简略版）"></a>Java 1.7的多线程死循环问题（简略版）</h2><p><strong>原因</strong>： Java1.7的HashMap中在数组进行扩容的时候，因为<strong>链表是头插法，在进行数据迁移的过程中，有可能导致死循环</strong></p><p>比如说，现在有两个线程</p><p>线程一：读取到当前的hashmap数据，数据中一个链表，在准备扩容时，线程二介入</p><p>线程二：也读取hashmap，直接进行扩容。因为是头插法，链表的顺序会进行颠倒过来。比如原来的顺序是AB，扩容后的顺序是BA，线程二执行结束。</p><p>线程一：继续执行的时候就会出现死循环的问题。</p><p>线程一先将A移入新的链表，再将B插入到链头，由于另外一个线程的原因，B的next指向了A，所以B-&gt;A-&gt;B，形成循环。</p><p><strong>解决办法</strong>：Java 1.8 调整了扩容算法，不再将元素加入链表头（而是保持与扩容前一样的顺序），<strong>采用尾插法避免了jdk7中死循环的问题</strong>。</p><h2 id="Hash家族对比"><a href="#Hash家族对比" class="headerlink" title="Hash家族对比"></a>Hash家族对比</h2><h2 id="HashMap-和-HashSet-的区别"><a href="#HashMap-和-HashSet-的区别" class="headerlink" title="HashMap 和 HashSet 的区别"></a>HashMap 和 HashSet 的区别</h2><ul><li>HashSet实现了Set接口，仅存储对象；HashMap实现了 Map接口，存储的是键值对。</li><li>HashSet底层其实是用HashMap实现存储的，HashSet封装了一系列HashMap的方法。依靠HashMap来存储元素值，利用hashMap的key键进行存储，而value值默认为Object对象。所以HashSet也不允许出现重复值，判断标准和HashMap判断标准相同，两个元素的hashCode相等并且通过equals()方法返回true。首先根据hashCode方法计算出对象存放的地址位置，然后使用equals方法比较两个对象是否真的相同</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405101547987.png" alt="image-20221007110404375" style="zoom:110%;" /><h2 id="HashMap-和-HashTabe-的区别"><a href="#HashMap-和-HashTabe-的区别" class="headerlink" title="HashMap 和 HashTabe 的区别"></a>HashMap 和 HashTabe 的区别</h2><p>在实际开中不建议使用HashTable，在多线程环境下可以使用ConcurrentHashMap类</p><table><thead><tr><th><strong>区别</strong></th><th><strong>HashTable</strong></th><th><strong>HashMap</strong></th></tr></thead><tbody><tr><td>数据结构</td><td>数组+链表</td><td>数组+链表+红黑树</td></tr><tr><td>是否可以为null</td><td>Key和value都不能为null</td><td>可以为null</td></tr><tr><td>hash算法</td><td>key的hashCode()</td><td>二次hash</td></tr><tr><td>扩容方式</td><td>当前容量翻倍 + 1</td><td>当前容量翻倍</td></tr><tr><td>线程安全</td><td>同步(synchronized)的，线程安全</td><td>线程不安全</td></tr></tbody></table><h1 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h1><h2 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h2><ul><li><p>JDK1.7采用分段的数组+链表实现</p></li><li><p>JDK1.8 采用与HashMap 一样的结构，数组+链表&#x2F;红黑二叉树</p></li></ul><h2 id="线程安全的原因（1-7-和-1-8-之间的区别）"><a href="#线程安全的原因（1-7-和-1-8-之间的区别）" class="headerlink" title="线程安全的原因（1.7 和 1.8 之间的区别）"></a>线程安全的原因（1.7 和 1.8 之间的区别）</h2><ul><li><strong>1.7——分段锁</strong>：JDK1.7采用Segment分段锁，通过将数据分割成多个段，底层使用的是ReentrantLock。当需要修改某个段内的数据时，只需要锁定该段即可，而不需要锁定整个哈希表。</li><li><strong>1.8——CAS + synchronized</strong>：JDK1.8改用 <code>volatile</code> 去同步每个桶上的数据。在 <code>put</code> 操作时，如果桶上的元素数量小于等于 1，那么就直接用 <code>CAS 操作</code>来替换旧元素或者增加新元素；如果桶上的元素数量大于 1，则转为使用 <code>synchronized</code> 锁来保证线程安全。采用synchronized锁定链表或红黑二叉树的头节点，相对Segment分段锁粒度更细，性能更好。</li><li><strong>非阻塞迭代算法</strong>：允许读写并发，<code>ConcurrentHashMap</code> 的迭代器在读取数据时不会持有锁，因此不会影响其他线程的写操作。</li><li><strong>懒惰扩容</strong>：扩容时 <code>ConcurrentHashMap</code> 并不会一次性锁定整个表，而是只锁定需要迁移的部分桶，从而减少了锁的竞争。</li><li><strong>链表转红黑树</strong>：Java 8 中的 <code>ConcurrentHashMap</code> 还引入了链表树化的机制。当链表长度达到一定阈值时，链表会被转换为红黑树，从而提高查找效率。这种转换是局部的，只针对那些过长的链表。</li></ul><h2 id="添加元素-1"><a href="#添加元素-1" class="headerlink" title="添加元素"></a>添加元素</h2><ul><li>加锁，但锁的范围仅精确到 bucket 的头节点，而非整个数据结构。</li><li>这种细粒度的锁机制确保了高并发环境下插入操作的高效执行。</li></ul><h2 id="扩容原理-1"><a href="#扩容原理-1" class="headerlink" title="扩容原理"></a>扩容原理</h2><ul><li>加锁，但仅锁定涉及迁移的头节点。</li><li>支持多线程并行进行扩容操作，通过CAS操作竞争获取迁移任务，每个线程负责一部分槽位的数据转移。</li><li>获得任务的线程将原数组中对应链表或红黑树的数据迁移到新数组，进一步提升了扩容时的并发处理能力。</li></ul><h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><ul><li>非阻塞，不加锁，直接访问，保证了快速响应。</li><li>在扩容期间也不中断查找，若槽未迁移，则直接从旧数组读取；若已迁移完成，通过扩容线程设置的转发节点指引，从新数组中定位数据，确保了查找操作的连续性和高效性。</li></ul><h1 id="———————并发———————"><a href="#———————并发———————" class="headerlink" title="———————并发———————"></a><div align="center">———————并发———————</div></h1><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405091632962.png" alt="image-20240509163226838" style="zoom: 55%;" /><h1 id="并发概念"><a href="#并发概念" class="headerlink" title="并发概念"></a>并发概念</h1><h2 id="并发、并行的区别"><a href="#并发、并行的区别" class="headerlink" title="并发、并行的区别"></a>并发、并行的区别</h2><ul><li><strong>并发</strong>：两个及两个以上的作业在同一 <strong>时间段</strong> 内执行。</li><li><strong>并行</strong>：两个及两个以上的作业在同一 <strong>时刻</strong> 执行。</li></ul><p>最关键的点是：是否是 <strong>同时</strong> 执行。</p><h2 id="同步、异步的区别"><a href="#同步、异步的区别" class="headerlink" title="同步、异步的区别"></a>同步、异步的区别</h2><ul><li><strong>同步</strong>：发出一个调用之后，在没有得到结果之前， 该调用就不可以返回，一直等待。</li><li><strong>异步</strong>：调用在发出之后，不用等待返回结果，该调用直接返回。</li></ul><h2 id="进程、线程、协程"><a href="#进程、线程、协程" class="headerlink" title="进程、线程、协程"></a>进程、线程、协程</h2><p><strong>进程</strong>是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。</p><p>系统运行一个程序即是一个<strong>进程</strong>从创建，运行到消亡的过程。</p><hr><p><strong>线程</strong>与进程相似，但线程是一个比进程更小的执行单位。</p><p>一个进程在其执行的过程中可以产生多个<strong>线程</strong>。</p><p>多个<strong>线程</strong>共享进程的<strong>堆</strong>和<strong>方法区</strong>资源，但每个线程有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong>。</p><hr><p><strong>协程</strong>（Coroutine）是一种轻量级的线程，它允许在执行中暂停并在之后恢复执行，而无需阻塞线程。</p><p>与线程相比，协程是<strong>用户态调度</strong>，效率更高，因为它不涉及操作系统内核调度。</p><p><strong>协程的特点</strong>：</p><ul><li><strong>轻量级</strong>：与传统线程不同，协程在用户态切换，不依赖内核态的上下文切换，避免了线程创建、销毁和切换的高昂成本。</li><li><strong>非抢占式调度</strong>：协程的切换由程序员控制，可以通过显式的 <code>yield</code> 或 <code>await</code> 来暂停和恢复执行，避免了线程中断问题。</li><li><strong>异步化编程</strong>：协程可以让异步代码写得像同步代码一样，使代码结构更加简洁清晰。</li></ul><p><strong>Java</strong> 一开始没有原生支持协程，但在 <strong>Java 19</strong> 中通过 <strong>Project Loom</strong> 引入了<strong>虚拟线程</strong>（Virtual Threads），最终在 <strong>Java 21</strong> 中确认。它提供了类似协程的功能。虚拟线程可以被认为是 Java 对协程的一种实现，虽然实现原理与传统协程略有不同，但它实现了高效并发。</p><p>示例代码：</p><p>1）<strong>创建虚拟线程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualThreadDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">       <span class="type">Thread</span> <span class="variable">virtualThread</span> <span class="operator">=</span> Thread.ofVirtual().start(() -&gt; &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;This is a virtual thread!&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">       virtualThread.join();  <span class="comment">// 等待虚拟线程结束</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）<strong>虚拟线程执行并发任务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualThreadExecutorDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">// 创建一个虚拟线程执行器</span></span><br><span class="line">       <span class="keyword">try</span> (<span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newVirtualThreadPerTaskExecutor()) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">               executor.submit(() -&gt; &#123;</span><br><span class="line">                   System.out.println(Thread.currentThread());</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3） <strong>与同步 I&#x2F;O 的结合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualThreadWithIO</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">       <span class="type">Thread</span> <span class="variable">vThread</span> <span class="operator">=</span> Thread.ofVirtual().start(() -&gt; &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               Thread.sleep(<span class="number">1000</span>); <span class="comment">// 虚拟线程的阻塞操作不会影响性能</span></span><br><span class="line">               System.out.println(<span class="string">&quot;Completed sleep in virtual thread&quot;</span>);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       vThread.join();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进程、线程的区别"><a href="#进程、线程的区别" class="headerlink" title="进程、线程的区别"></a>进程、线程的区别</h2><ul><li>线程是进程划分成的更小的运行单位。</li><li>各进程是独立的，而各线程则不一定，</li><li>同一进程中的线程极有可能会相互影响。</li><li>线程执行开销小，但不利于资源的管理和保护；而进程正相反。</li></ul><h2 id="协程、线程的区别"><a href="#协程、线程的区别" class="headerlink" title="协程、线程的区别"></a>协程、线程的区别</h2><p><strong>调度方式</strong>：</p><ul><li><strong>线程</strong>：由操作系统调度，切换线程时会涉及上下文切换和内核态的开销。</li><li><strong>协程</strong>：由程序调度，在用户态切换，没有上下文切换的开销，性能更高。</li></ul><p><strong>阻塞与非阻塞</strong>：</p><ul><li><strong>线程</strong>：通常采用阻塞模型（例如，I&#x2F;O 操作会阻塞当前线程）。</li><li><strong>协程</strong>：是非阻塞的，I&#x2F;O 等操作会挂起协程，而不是整个线程，因此不会阻塞其他协程的执行。</li></ul><p><strong>资源占用</strong>：</p><ul><li><strong>线程</strong>：每个线程需要分配栈空间，且栈大小固定，导致线程资源消耗较大。</li><li><strong>协程</strong>：协程的栈空间可以动态增长，内存开销远小于线程。</li></ul><p><strong>协程的应用场景</strong></p><ul><li><strong>高并发服务</strong>：协程特别适合处理大量并发请求的服务，例如 Web 服务、微服务架构等。</li><li><strong>异步 I&#x2F;O 操作</strong>：协程能够有效处理异步 I&#x2F;O 操作而不阻塞主线程，提高 I&#x2F;O 密集型应用的性能。</li><li><strong>游戏开发</strong>：协程常用于游戏开发中的脚本和动画控制，因为协程提供了暂停和恢复执行的能力，能够实现复杂的游戏逻辑。</li></ul><h2 id="乐观锁、悲观锁"><a href="#乐观锁、悲观锁" class="headerlink" title="乐观锁、悲观锁"></a>乐观锁、悲观锁</h2><p><strong>乐观锁</strong>：总是假设最好的情况，认为共享资源每次被访问的时候不会出现问题，线程可以不停地执行，无需加锁也无需等待，只是在提交修改的时候去验证对应的资源（也就是数据）是否被其它线程修改了（<strong>版本号机制</strong>或 <strong>CAS 算法</strong>）。</p><p><strong>悲观锁</strong>：悲观锁总是假设最坏的情况，认为共享资源每次被访问的时候就会出现问题（比如共享数据被修改），所以每次在获取资源操作的时候都会上锁，这样其他线程想拿到这个资源就会阻塞直到锁被上一个持有者释放。也就是说，<strong>共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程</strong>。</p><p>像 Java 中 <strong><code>synchronized</code></strong> 和 <strong><code>ReentrantLock</code></strong> 等独占锁就是悲观锁思想的实现。</p><p><strong>如何实现乐观锁</strong></p><ul><li>版本号机制</li></ul><p>一般是在数据表中加上一个数据版本号 <code>version</code> 字段，表示数据被修改的次数。当数据被修改时，<code>version</code> 值会加一。当线程 A 要更新数据值时，在读取数据的同时也会读取 <code>version</code> 值，在提交更新时，若刚才读取到的 version 值为当前数据库中的 <code>version</code> 值相等时才更新，否则重试更新操作，直到更新成功。</p><ul><li>CAS 算法</li></ul><p>CAS：<strong>Compare And Swap（比较与交换）</strong> ，用于实现乐观锁，保证在无锁情况下保证线程操作共享数据的原子性，被广泛应用于各大框架中。CAS 的思想是用一个预期值和要更新的变量值进行比较，两值相等才会进行更新。</p><p>CAS 是一个原子操作，底层依赖于一条 CPU 的原子指令。</p><p>CAS 涉及到三个操作数：</p><ol><li><strong>V</strong>：要更新的变量值(Var)</li><li><strong>E</strong>：预期值(Expected)</li><li><strong>N</strong>：拟写入的新值(New)</li></ol><p>当且仅当 V 的值等于 E 时，CAS 通过原子方式用新值 N 来更新 V 的值。如果不等，说明已经有其它线程更新了 V，则当前线程放弃更新。</p><ul><li>存在的问题：ABA 问题、循环时间长开销大</li><li>底层：依赖于一个 Unsafe 类来直接调用操作系统底层的 CAS 指令</li></ul><h2 id="公平锁、非公平锁"><a href="#公平锁、非公平锁" class="headerlink" title="公平锁、非公平锁"></a>公平锁、非公平锁</h2><ul><li><strong>公平锁</strong> : 锁被释放之后，先申请的线程先得到锁。性能较差一些，因为公平锁为了保证时间上的绝对顺序，上下文切换更频繁。</li><li><strong>非公平锁</strong>：锁被释放之后，后申请的线程可能会先获取到锁，是随机或者按照其他优先级排序的。性能更好，但可能会导致某些线程永远无法获取到锁。</li></ul><h2 id="共享锁、-独占锁"><a href="#共享锁、-独占锁" class="headerlink" title="共享锁、 独占锁"></a>共享锁、 独占锁</h2><ul><li><strong>共享锁</strong>：一把锁可以被多个线程同时获得。</li><li><strong>独占锁</strong>：一把锁只能被一个线程获得。</li></ul><h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a><a href="#JavaMemoryModel">Java内存模型</a><a id="Return_JavaMemoryModel"></a></h2><h3 id="什么是-Java-的-happens-before-规则？"><a href="#什么是-Java-的-happens-before-规则？" class="headerlink" title="什么是 Java 的 happens-before 规则？"></a>什么是 Java 的 happens-before 规则？</h3><p><strong>happens-before 规则</strong>定义了多线程程序中操作的可见性和顺序性。它通过指定一系列操作之间的顺序关系，确保线程间的操作是有序的，避免由于重排序或线程间数据不可见导致的并发问题。</p><p><strong>happens-before 规则的主要内容：</strong></p><p>1）<strong>程序次序规则</strong>：在一个线程中，代码的执行顺序是按照程序中的书写顺序执行的，即一个线程内，前面的操作 happens-before 后面的操作。</p><p>2）<strong>监视器锁规则</strong>：一个锁的解锁（<code>unlock</code>）操作 happens-before 后续对这个锁的加锁（<code>lock</code>）操作。也就是说，在释放锁之前的所有修改在加锁后对其他线程可见。</p><p>3）<strong>volatile 变量规则</strong>：对一个 <code>volatile</code> 变量的写操作 happens-before 后续对这个 <code>volatile</code> 变量的读操作。它保证 <code>volatile</code> 变量的可见性，确保一个线程修改 <code>volatile</code> 变量后，其他线程能立即看到最新值。</p><p>4） <strong>线程启动规则</strong>：线程 A 执行 <code>Thread.start()</code> 操作后，线程 B 中的所有操作 happens-before 线程 A 的 <code>Thread.start()</code> 调用。</p><p>5）<strong>线程终止规则</strong>：线程 A 执行 <code>Thread.join()</code> 操作后，线程 B 中的所有操作 happens-before 线程 A 从 <code>Thread.join()</code> 返回。</p><p>6）<strong>线程中断规则</strong>：对线程的 <code>interrupt()</code> 调用 happens-before 线程检测到中断事件（通过 <code>Thread.interrupted()</code> 或 <code>Thread.isInterrupted()</code>）。</p><p>7）<strong>对象的构造规则</strong>：对象的构造完成（即构造函数执行完毕） happens-before 该对象的 <code>finalize()</code> 方法调用。</p><h3 id="什么是-Java-中的指令重排？"><a href="#什么是-Java-中的指令重排？" class="headerlink" title="什么是 Java 中的指令重排？"></a>什么是 Java 中的指令重排？</h3><p><strong>指令重排</strong>是 Java 编译器和处理器为了优化性能，在保证单线程程序语义不变的情况下，对指令执行顺序进行调整的过程。在多线程环境下，指令重排可能导致线程之间的操作出现不同步或不可见的现象，因此 Java 提供了内存模型（JMM）和相关机制（如 <code>volatile</code> 和 <code>synchronized</code>）来限制这种行为，确保并发操作的正确性。</p><p><strong>主要原因：</strong></p><ul><li><strong>编译器优化</strong>：编译器会在不影响单线程程序语义的情况下重排序代码，以提升执行效率。</li><li><strong>处理器优化</strong>：现代处理器会进行指令流水线优化，允许多条指令并行执行或重排序。</li></ul><p><strong>重排序的影响：</strong></p><ul><li>单线程情况下不会影响程序执行结果。</li><li>多线程情况下，指令重排可能导致线程之间的数据不一致问题，影响并发的正确性。</li></ul><h3 id="指令重排的三种类型"><a href="#指令重排的三种类型" class="headerlink" title="指令重排的三种类型"></a>指令重排的三种类型</h3><ul><li><strong>编译器重排</strong>：编译器在生成字节码时，根据优化策略调整代码的顺序，前提是不会改变程序的单线程语义。</li><li><strong>CPU 重排</strong>：处理器执行指令时，可能会对指令顺序进行调整，以充分利用 CPU 资源，例如指令流水线和多核并行执行。</li><li><strong>内存系统重排</strong>：不同线程访问共享内存时，内存系统可能会对内存操作顺序进行调整。</li></ul><h3 id="volatile-的作用"><a href="#volatile-的作用" class="headerlink" title="volatile 的作用"></a>volatile 的作用</h3><ul><li><strong>保证线程间的可见性</strong>：用 volatile 修饰共享变量，能够防止编译器等优化发生，让一个线程对共享变量的修改对另一个线程可见。</li><li><strong>禁止进行指令重排序</strong>：用 volatile 修饰共享变量会在读、写共享变量时加入不同的屏障，阻止其他读写操作越过屏障，从而达到阻止重排序的效果。</li></ul><h2 id="如何理解Java中的原子性、可见性、有序性？"><a href="#如何理解Java中的原子性、可见性、有序性？" class="headerlink" title="如何理解Java中的原子性、可见性、有序性？"></a>如何理解Java中的原子性、可见性、有序性？</h2><h3 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h3><p>原子性指的是一个操作或一系列操作要么全部执行成功，要么全部不执行，期间不会被其他线程干扰。</p><ul><li><strong>原子类与锁</strong>：Java 提供了 <code>java.util.concurrent.atomic</code> 包中的原子类，如 <code>AtomicInteger</code>, <code>AtomicLong</code>，来保证基本类型的操作具有原子性。此外，<code>synchronized</code> 关键字和 <code>Lock</code> 接口也可以用来确保操作的原子性。</li><li><strong>CAS（Compare-And-Swap）</strong>：Java 的原子类底层依赖于 CAS 操作来实现原子性。CAS 是一种硬件级的指令，它比较内存位置的当前值与给定的旧值，如果相等则将内存位置更新为新值，这一过程是原子的。CAS 可以避免传统锁机制带来的上下文切换开销。</li></ul><h3 id="可见性（Visibility）"><a href="#可见性（Visibility）" class="headerlink" title="可见性（Visibility）"></a>可见性（Visibility）</h3><p>可见性指的是当一个线程修改了某个共享变量的值，其他线程能够立即看到这个修改。</p><ul><li><strong>volatile</strong>：<code>volatile</code> 关键字是 Java 中用来保证可见性的轻量级同步机制。当一个变量被声明为 <code>volatile</code> 时，所有对该变量的读写操作都会直接从主内存中进行，从而确保变量对所有线程的可见性。</li><li><strong>synchronized</strong>：<code>synchronized</code> 关键字不仅可以保证代码块的原子性，还可以保证进入和退出 <code>synchronized</code> 块的线程能够看到块内变量的最新值。每次线程退出 <code>synchronized</code> 块时，都会将修改后的变量值刷新到主内存中，进入该块的线程则会从主内存中读取最新的值。</li><li><strong>Java Memory Model（JMM）</strong>：JMM 规定了共享变量在不同线程间的可见性和有序性规则。它定义了内存屏障的插入规则，确保在多线程环境下的代码执行顺序和内存可见性。</li></ul><h3 id="有序性（Ordering）"><a href="#有序性（Ordering）" class="headerlink" title="有序性（Ordering）"></a>有序性（Ordering）</h3><p>有序性指的是程序执行的顺序和代码的先后顺序一致。但在多线程环境下，为了优化性能，编译器和处理器可能会对指令进行重排序。</p><ul><li><strong>指令重排序</strong>：为了提高性能，处理器和编译器可能会对指令进行重排序。尽管重排序不会影响单线程中的执行结果，但在多线程环境下可能会导致严重的问题。例如，经典的双重检查锁定（DCL）模式在没有正确同步的情况下，由于指令重排序可能导致对象尚未完全初始化就被另一个线程访问。</li><li><strong>happens-before 原则</strong>：JMM 定义了 <code>happens-before</code> 规则，用于约束操作之间的有序性。如果一个操作 <code>A</code> happens-before 操作 <code>B</code>，那么 <code>A</code> 的结果对于 <code>B</code> 是可见的，且 <code>A</code> 的执行顺序在 <code>B</code> 之前。这为开发者提供了在多线程环境中控制操作顺序的手段。</li><li><strong>内存屏障</strong>：<code>volatile</code> 变量的读写操作会在指令流中插入内存屏障，阻止特定的指令重排序。对于 <code>volatile</code> 变量的写操作，会在写操作前插入一个 StoreStore 屏障，防止写操作与之前的写操作重排序；在读操作之后插入一个 LoadLoad 屏障，防止读操作与之后的读操作重排序。</li></ul><h1 id="并发安全"><a href="#并发安全" class="headerlink" title="并发安全"></a>并发安全</h1><h2 id="使用多线程可能带来的问题"><a href="#使用多线程可能带来的问题" class="headerlink" title="使用多线程可能带来的问题"></a>使用多线程可能带来的问题</h2><p>并发编程的目的就是为了能提高程序的执行效率进而提高程序的运行速度，但是并发编程并不总是能提高程序运行速度的，而且并发编程可能会遇到很多问题，比如：内存泄漏、死锁、线程不安全等等。</p><h2 id="线程安全和不安全"><a href="#线程安全和不安全" class="headerlink" title="线程安全和不安全"></a>线程安全和不安全</h2><p>线程安全和不安全是在多线程环境下对于同一份数据的访问是否能够保证其正确性和一致性的描述。</p><ul><li><strong>线程安全</strong>：在多线程环境下，对于同一份数据，不管有多少个线程同时访问，都能保证这份数据的正确性和一致性。</li><li>面试鸭：<em><strong>线程安全</strong>是指多个线程访问某一共享资源时，能够保证一致性和正确性，即无论线程如何交替执行，程序都能够产生预期的结果，且不会出现数据竞争或内存冲突。在 Java 中，线程安全的实现通常依赖于同步机制和线程隔离技术。</em></li><li><strong>线程不安全</strong>：在多线程环境下，对于同一份数据，多个线程同时访问时可能会导致数据混乱、错误或者丢失。</li></ul><h2 id="常用的线程安全措施"><a href="#常用的线程安全措施" class="headerlink" title="常用的线程安全措施"></a>常用的线程安全措施</h2><ul><li><strong>同步锁</strong>：通过 <code>synchronized</code> 关键字或 <code>ReentrantLock</code> 实现对共享资源的同步控制。</li><li><strong>原子操作类</strong>：Java 提供的 <code>AtomicInteger</code>、<code>AtomicReference</code> 等类确保多线程环境下的原子性操作。</li><li><strong>线程安全容器</strong>：如 <code>ConcurrentHashMap</code>、<code>CopyOnWriteArrayList</code> 等，避免手动加锁。</li><li><strong>局部变量</strong>：线程内独立的局部变量天然是线程安全的，因为每个线程都有自己的栈空间（线程隔离）。</li><li><strong>ThreadLocal</strong>：类似于局部变量，属于线程本地资源，通过线程隔离保证了线程安全。</li><li><strong>CAS（Compare and Swap）操作</strong>：CAS 操作是<strong>硬件级别的原子操作</strong>，它包含三个操作数：内存位置（V）、预期原值（A）和新值（B）。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置的值更新为新值。否则，操作失败，处理器不做任何事情。在 Java 中，CAS 操作通过 <code>Unsafe</code> 类的 <code>compareAndSwapInt</code> 方法来实现。<code>Unsafe</code> 类提供了对底层内存的直接访问和修改能力，这是一个非公开的类，通常通过反射来获取它的实例。</li></ul><h2 id="怎么保证多线程的执行安全？"><a href="#怎么保证多线程的执行安全？" class="headerlink" title="怎么保证多线程的执行安全？"></a>怎么保证多线程的执行安全？</h2><p>导致并发程序出现问题的<strong>根本原因</strong>和<strong>解决办法</strong>：</p><ul><li><p>原子性<strong>synchronized、lock</strong>：一个线程在CPU中操作不可暂停，也不可中断，要不执行完成，要不不执行</p></li><li><p>内存可见性<strong>volatile、synchronized、lock</strong>：让一个线程对共享变量的修改对另一个线程可见</p></li><li><p>有序性<strong>volatile</strong>：处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的</p></li></ul><h2 id="如何判断方法内局部变量是否线程安全？"><a href="#如何判断方法内局部变量是否线程安全？" class="headerlink" title="如何判断方法内局部变量是否线程安全？"></a>如何判断方法内局部变量是否线程安全？</h2><p>两条原则：</p><ul><li>如果局部变量<strong>没有逃离方法的作用范围</strong>，它是线程安全的。</li><li>如果局部变量<strong>引用了对象，并逃离方法的作用范围</strong>，它是线程不安全的。</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    sb1.append(<span class="number">1</span>);</span><br><span class="line">    sb1.append(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程安全</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb2.append(<span class="number">3</span>);</span><br><span class="line">        sb2.append(<span class="number">4</span>);</span><br><span class="line">        System.out.println(sb2);</span><br><span class="line">        <span class="keyword">return</span> sb2;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程不安全</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            sb1.append(<span class="number">3</span>);</span><br><span class="line">            sb1.append(<span class="number">4</span>);</span><br><span class="line">            System.out.println(sb1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何使线程内局部变量线程安全？"><a href="#如何使线程内局部变量线程安全？" class="headerlink" title="如何使线程内局部变量线程安全？"></a>如何使线程内局部变量线程安全？</h2><ol><li>直接用线程安全的类</li><li>确保局部变量线程安全</li></ol><h2 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h2><p><strong>ABA 问题</strong>是指在多线程环境下，某个变量的值在一段时间内经历了从 A 到 B 再到 A 的变化，这种变化可能被线程误认为值没有变化，从而导致错误的判断和操作。ABA 问题常发生在使用 <strong>CAS（Compare-And-Swap）</strong> 操作的无锁并发编程中。</p><h2 id="解决-ABA-问题的方法"><a href="#解决-ABA-问题的方法" class="headerlink" title="解决 ABA 问题的方法"></a><em>解决 ABA 问题的方法</em></h2><p><strong>1）引入版本号</strong>：</p><p>最常见的解决 ABA 问题的方法是使用版本号。在每次更新一个变量时，不仅更新变量的值，还更新一个版本号。CAS 操作在比较时，除了比较值是否一致，还比较版本号是否匹配。这样，即使值回到了初始值，版本号的变化也能检测到修改。</p><p>Java 中的 <code>AtomicStampedReference</code> 提供了版本号机制来避免 ABA 问题。</p><p>**2）使用 <code>AtomicMarkableReference</code>**：</p><p>这是另一种类似的机制，它允许在引用上标记一个布尔值，帮助区分是否发生了特定变化。虽然不直接使用版本号，但标记位可以用来追踪状态的变化。</p><h1 id="——————-并发锁——————"><a href="#——————-并发锁——————" class="headerlink" title="——————-并发锁——————-"></a><div align="center">——————-并发锁——————-</div></h1><h2 id="锁的种类及使用场景"><a href="#锁的种类及使用场景" class="headerlink" title="锁的种类及使用场景"></a><strong>锁的种类及使用场景</strong></h2><ul><li><strong>独占锁（Exclusive Lock）</strong>：如 <code>synchronized</code> 和 <code>ReentrantLock</code>，同一时间只允许一个线程持有锁，适合写操作较多的场景。</li><li><strong>读写锁（ReadWriteLock）</strong>：允许多个线程并发读，但写时需要独占锁，适合读多写少的场景。</li><li><strong>乐观锁和悲观锁</strong>：悲观锁假设会有并发冲突，每次操作都加锁；而乐观锁假设不会有冲突，通过版本号或 CAS 实现冲突检测。</li></ul><h2 id="如何优化-Java-中的锁的使用？"><a href="#如何优化-Java-中的锁的使用？" class="headerlink" title="如何优化 Java 中的锁的使用？"></a>如何优化 Java 中的锁的使用？</h2><p>主要有以下两种常见的优化方法：</p><p>1）<strong>减小锁的粒度（使用的时间）</strong>：</p><ul><li>尽量缩小加锁的范围，减少锁的持有时间。即在必要的最小代码块内使用锁，避免对整个方法或过多代码块加锁。</li><li>使用更细粒度的锁，比如将一个大对象锁拆分为多个小对象锁，以提高并行度（参考 <code>HashTable</code> 和<code>ConcurrentHashMap</code> 的区别）。</li><li>对于读多写少的场景，可以使用<strong>读写锁</strong>（<code>ReentrantReadWriteLock</code>）代替独占锁。</li></ul><p>2）<strong>减少锁的使用</strong>：</p><ul><li>通过<strong>无锁编程</strong>、<strong>CAS</strong>（Compare-And-Swap）操作和<strong>原子类</strong>（如 <code>AtomicInteger</code>、<code>AtomicReference</code>）来避免使用锁，从而减少锁带来的性能损耗。</li><li>通过减少共享资源的使用，避免线程对同一个资源的竞争。例如，使用<strong>局部变量</strong>或<strong>线程本地变量</strong>（<code>ThreadLocal</code>）来减少多个线程对同一资源的访问。</li></ul><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><p>读写锁允许多个线程同时读取共享资源，而在写操作时确保只有一个线程能够进行写操作（读读操作不互斥，读写互斥、写写互斥）。</p><p>读写锁适合<strong>读多写少</strong>的场景，因为它提高了系统的并发性和性能。</p><p>Java 中的 <code>ReadWriteLock</code> 是通过 <code>ReentrantReadWriteLock</code> 实现的，它提供了以下两种锁模式：</p><ul><li><strong>读锁（共享锁）</strong>：允许多个线程同时获取读锁，只要没有任何线程持有写锁。适合读操作频繁而写操作较少的场景。</li><li><strong>写锁（独占锁）</strong>：写锁是独占的，当有线程持有写锁时，其他线程既不能获取写锁，也不能获取读锁。写锁用于保证写操作的独占性，防止数据不一致。</li></ul><h2 id="读写锁的原理"><a href="#读写锁的原理" class="headerlink" title="读写锁的原理"></a>读写锁的原理</h2><ul><li><strong>共享与独占</strong>：读锁是共享锁，多个线程可以同时获取；而写锁是独占锁，在持有写锁期间，其他线程不能获取写锁或读锁。</li><li><strong>锁降级</strong>：<code>ReentrantReadWriteLock</code> 支持锁降级，即持有写锁的线程可以直接获取读锁，从而在写操作完成后不必完全释放锁，但不支持锁升级（即不能从读锁升级为写锁）。</li><li><strong>公平锁与非公平锁</strong>：<code>ReentrantReadWriteLock</code> 提供了公平和非公平模式。在公平模式下，线程将按照请求的顺序获取锁；而在非公平模式下，线程可能会插队，提高吞吐量。</li><li>读写锁也是基于 AQS 实现的，再具体点的实现就是将 state 分为了两部分，高16bit用于标识读状态、低16bit标识写状态。</li></ul><h2 id="synchronized-的锁升级"><a href="#synchronized-的锁升级" class="headerlink" title="synchronized 的锁升级"></a>synchronized 的锁升级</h2><table><thead><tr><th align="center">锁形式</th><th align="center">使用情况</th><th align="center">性能</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">重量级锁</td><td align="center">多线程竞争锁</td><td align="center">性能比较低</td><td align="center">底层使用的Monitor实现，涉及到了<a href="#UserMode">用户态</a>和[内核态](#Kernel Mode)的切换、进程的上下文切换，成本较高。</td></tr><tr><td align="center">轻量级锁</td><td align="center">不同线程交替持有锁</td><td align="center">相对重量级锁性能提升很多</td><td align="center">线程加锁的时间是错开的（也就是没有竞争），可以使用轻量级锁来优化。轻量级修改了对象头的锁标志。通过CAS操作保证原子性。</td></tr><tr><td align="center">偏向锁</td><td align="center">锁只被一个线程持有</td><td align="center">性能最好</td><td align="center">线程第一次获得锁时进行一次CAS操作，之后该线程再获取锁，只需要判断自己是否持有锁</td></tr></tbody></table><ol><li><strong>无锁状态（Unlocked）</strong>：在对象首次被访问时，默认是没有加锁的。此时，多个线程可以并行地访问对象的方法而无需阻塞。</li><li><strong>偏向锁（Biased Locking）</strong>：当第一个线程访问该对象的<code>synchronized</code>方法或代码块时，JVM会将对象头中的Mark Word标记为偏向锁的状态，并记录下当前线程的信息。</li><li><strong>锁撤销（Revocation）</strong>：如果持有偏向锁的线程长时间未访问该对象，或者有其他线程试图获取锁，那么JVM会撤销偏向锁，并将对象的状态恢复到无锁状态。此时，任何线程都可以再次竞争锁。</li><li><strong>轻量级锁（Lightweight Locking）</strong>：当第二个线程尝试访问该对象的<code>synchronized</code>方法时，JVM会尝试使用轻量级锁。轻量级锁是由每个线程在其本地栈中维护的一个名为Lock Record的数据结构来实现的。当线程请求锁时，它会在本地栈中创建一个Lock Record，并尝试使用CAS操作将对象头中的Mark Word更新为指向这个Lock Record的指针。如果CAS操作成功，那么该线程获得了锁；否则，如果对象已经被其他线程锁定，那么当前线程就会进入下一个阶段。</li><li><strong>重量级锁（Heavyweight Locking）</strong>：如果轻量级锁的CAS操作失败，或者轻量级锁尝试了多次仍然无法获得锁，那么JVM会将轻量级锁升级为重量级锁。重量级锁是通过操作系统提供的互斥锁来实现的，这意味着线程在获取锁之前必须挂起，而在释放锁之后才能恢复执行。这会导致更高的性能开销，因此只有在确实需要的时候才会升级为重量级锁。</li></ol><h2 id="synchronized-的实现原理"><a href="#synchronized-的实现原理" class="headerlink" title="synchronized 的实现原理"></a>synchronized 的实现原理</h2><p><code>synchronized</code> 实现原理依赖于 JVM 的 Monitor（监视器锁） 和 对象头（Object Header）。</p><blockquote><p>在HotSpot虚拟机中，对象在内存中存储的布局可分为3块区域：对象头（Header）、实例数据（Instance Data）、对齐填充。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405111720813.png" alt="image-20240511172032734" style="zoom: 40%; float:left;" /></blockquote><p>当 <code>synchronized</code> 修饰在方法或代码块上时，会对特定的对象或类加锁，从而确保同一时刻只有一个线程能执行加锁的代码块。</p><ul><li><strong>synchronized 修饰方法</strong>：方法的常量池会增加一个 <code>ACC_SYNCHRONIZED</code> 标志，当某个线程访问这个方法检查是否有<code>ACC_SYNCHRONIZED</code>标志，若有则需要获得监视器锁才可执行方法，此时就保证了方法的同步。</li><li><strong>synchronized 修饰代码块</strong>：会在代码块的前后插入 <code>monitorenter</code> 和 <code>monitorexit</code> 字节码指令。可以把 <code>monitorenter</code> 理解为加锁，<code>monitorexit</code>理解为解锁。</li></ul><h2 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h2><p>Monitor实现的锁属于重量级锁，里面涉及到了用户态和内核态的切换、进程的上下文切换，<strong>成本较高，性能比较低</strong>。</p><p>在JDK 1.6引入了两种新型锁机制：偏向锁和轻量级锁，它们的引入是为了解决在没有多线程竞争或基本没有竞争的场景下因使用传统锁机制带来的性能开销问题。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405111658920.png" alt="image-20240511165805762" style="zoom:45%;" /><ul><li>Owner：存储当前获取锁的线程的，只能有一个线程可以获取</li><li>EntryList：关联没有抢到锁的线程，处于Blocked状态的线程</li><li>WaitSet：关联调用了wait方法的线程，处于Waiting状态的线程</li></ul><h2 id="面试：说说AQS吧？"><a href="#面试：说说AQS吧？" class="headerlink" title="面试：说说AQS吧？"></a><em>面试：说说AQS吧？</em></h2><blockquote><p>参考回答：</p><p>AQS 将一些操作封装起来，比如入队等基本方法，暴露出方法，便于其他相关 JUC 锁的使用。</p><p>比如 ReentrantLock、CountDownLatch、Semaphore 等等。</p><p>简单来说 AQS 就是起到了一个抽象、封装的作用，将一些排队、入队、加锁、中断等方法提供出来，具体加锁时机、入队时机等都需要实现类自己控制。</p><p>然后面试官会引申问你具体 ReentrantLock 的实现原理是怎样的呢?</p></blockquote><h2 id="AQS的工作机制"><a href="#AQS的工作机制" class="headerlink" title="AQS的工作机制"></a>AQS的工作机制</h2><p>AQS（Abstract Queued Synchronizer），是Java中的一个抽象类，提供了构建锁和其他同步组件的基础框架，用于同步多线程中的队列，ReentrantLock、Semaphore都是基于AQS实现的。</p><p>谈论AQS是公平锁还是非公平锁并不准确，应当说是AQS是一个支持构建公平锁和非公平锁两种模式的同步组件。</p><p><strong>工作机制：</strong></p><ul><li><p>在AQS中维护了一个使用了volatile修饰的<strong>state</strong>属性来表示资源的状态，0表示无锁，1表示有锁，修改state时使用CAS操作保证原子性，确保只能有一个线程修改成功，修改失败的线程将会进入队列中等待。如果队列中的有一个线程修改成功了state为1，则当前线程就相等于获取了资源。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411071516652.png" alt="image.png" style="zoom:50%;" /></li><li><p>AQS内部维护了一个 FIFO 的等待队列，类似于 Monitor 的 EntryList，用于管理等待获取同步状态的线程。每个节点（Node）代表一个等待的线程，节点之间通过 next 和 prev 指针链接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">SHARED</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">EXCLUSIVE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> waitStatus;</span><br><span class="line">    <span class="keyword">volatile</span> Node prev;</span><br><span class="line">    <span class="keyword">volatile</span> Node next;</span><br><span class="line">    <span class="keyword">volatile</span> Thread thread; <span class="comment">// 保存等待的线程</span></span><br><span class="line">    Node nextWaiter;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个线程获取同步状态失败时，它会被添加到等待队列中，并自旋等待或被阻塞，直到前面的线程释放同步状态。</p></li><li><p>独占模式和共享模式</p><ul><li>独占模式：只有一个线程能获取同步状态，例如 ReentrantLock。</li><li>共享模式：多个线程可以同时获取同步状态，例如 Semaphore 和 ReadWriteLock。</li></ul></li></ul><p><strong>AQS支持实现多种类型的锁，包括公平锁和非公平锁</strong>。</p><ul><li>新的线程与队列中的线程共同来抢资源，是非公平锁</li><li>新的线程到队列中等待，只让队列中的head线程获取锁，是公平锁</li></ul><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p>ReentrantLock是基于AQS实现的一个互斥锁，它可以被配置为公平锁或非公平锁，通过构造函数的参数来决定。</p><p>ReentrantLock相对于synchronized它具备以下特点：</p><ul><li>可中断</li><li>可设置超时时间</li><li>可设置公平锁</li><li>支持多个条件变量</li><li>与synchronized一样，都支持重入</li></ul><h2 id="ReentrantLock-的结构"><a href="#ReentrantLock-的结构" class="headerlink" title="ReentrantLock 的结构"></a>ReentrantLock 的结构</h2><p><strong>ReentrantLock主要利用CAS+AQS队列来实现</strong>。它支持公平锁和非公平锁，两者的实现类似，构造方法接受一个可选的公平参数（默认非公平锁），当设置为true时，表示公平锁，否则为非公平锁。公平锁体现在按照先后顺序获取锁，非公平体现在不在排队的线程也可以抢锁</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405112311695.png" alt="image-20240511231128610" style="zoom:40%;" /><h2 id="ReentrantLock-的工作原理"><a href="#ReentrantLock-的工作原理" class="headerlink" title="ReentrantLock 的工作原理"></a>ReentrantLock 的工作原理</h2><ul><li>线程来抢锁后使用CAS操作修改<code>state</code>状态，修改状态成功为1，则让<code>exclusiveOwnerThread</code>属性指向当前线程，获取锁成功</li><li>假如修改状态失败，则会进入双向队列中等待，<code>head</code>指向双向队列头部，<code>tail</code>指向双向队列尾部</li><li>当<code>exclusiveOwnerThread</code>为null的时候，则会唤醒在双向队列中等待的线程</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411071516567.png" alt="image.png" style="zoom:75%;" /><h2 id="synchronized-与-AQS-的区别"><a href="#synchronized-与-AQS-的区别" class="headerlink" title="synchronized 与 AQS 的区别"></a>synchronized 与 AQS 的区别</h2><table><thead><tr><th>区别</th><th align="center">AQS</th><th align="center">synchronized</th></tr></thead><tbody><tr><td>实现语言</td><td align="center">Java 语言实现</td><td align="center">C++ 语言实现</td></tr><tr><td>类型</td><td align="center">悲观锁，手动开启和关闭</td><td align="center">悲观锁，自动释放锁</td></tr><tr><td>性能</td><td align="center">锁竞争激烈的情况下，提供了多种解决方案</td><td align="center">锁竞争激烈都是重量级锁，性能差</td></tr></tbody></table><h2 id="synchronized-与-Lock-有什么区别"><a href="#synchronized-与-Lock-有什么区别" class="headerlink" title="synchronized 与 Lock 有什么区别 ?"></a>synchronized 与 Lock 有什么区别 ?</h2><table><thead><tr><th align="center">特点</th><th align="center">synchronized</th><th align="center">Lock</th></tr></thead><tbody><tr><td align="center"><strong>语法层面</strong></td><td align="center">关键字，源码在 JVM 中，用 C++ 实现<br />使用时，退出同步代码块锁会自动释放</td><td align="center">接口，源码由 JDK 提供，用 Java 语言实现<br />使用时，需要手动调用 <code>unlock</code> 方法释放锁</td></tr><tr><td align="center"><strong>功能层面</strong></td><td align="center">悲观锁，具备互斥、同步、锁重入功能</td><td align="center">悲观锁，具备互斥、同步、锁重入功能<br />提供了更多功能，如获取等待状态、公平锁、可打断、可超时、多条件<code>Condition</code>变量<br />有适合不同场景的实现，如 <code>ReentrantLock</code>，<code>ReentrantReadWriteLock</code></td></tr><tr><td align="center"><strong>性能层面</strong></td><td align="center">在没有竞争时，做了很多优化，如偏向锁、轻量级锁</td><td align="center">在竞争激烈时，通常会提供更好的性能</td></tr></tbody></table><h2 id="synchronized-与-ReentrantLock-有什么区别"><a href="#synchronized-与-ReentrantLock-有什么区别" class="headerlink" title="synchronized 与 ReentrantLock 有什么区别 ?"></a>synchronized 与 ReentrantLock 有什么区别 ?</h2><table><thead><tr><th align="center">特性</th><th align="center">synchronized</th><th align="center">ReentrantLock</th></tr></thead><tbody><tr><td align="center"><strong>类别</strong></td><td align="center">Java关键字</td><td align="center">Java中的一个类</td></tr><tr><td align="center"><strong>锁类型</strong></td><td align="center">JVM层面的锁</td><td align="center">Java API层面的锁</td></tr><tr><td align="center"><strong>加锁&#x2F;解锁方式</strong></td><td align="center">自动加锁与释放锁</td><td align="center">需要手动加锁与释放锁</td></tr><tr><td align="center"><strong>获取当前线程是否上锁</strong></td><td align="center">不可获取</td><td align="center">可获取 (<code>isHeldByCurrentThread()</code>)</td></tr><tr><td align="center"><strong>公平性</strong></td><td align="center">默认非公平锁</td><td align="center">公平锁或非公平锁</td></tr><tr><td align="center"><strong>中断支持</strong></td><td align="center">不可中断</td><td align="center">可中断 (<code>tryLock()</code>, <code>lockInterruptibly()</code>)</td></tr><tr><td align="center"><strong>锁的对象</strong></td><td align="center">锁的是对象，锁信息保存在对象头中</td><td align="center">int类型的state标识来标识锁的状态</td></tr><tr><td align="center"><strong>锁升级</strong></td><td align="center">底层有锁升级过程</td><td align="center">没有锁升级过程</td></tr></tbody></table><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411071516196.png" alt="img" style="zoom: 80%;" /><h1 id="—————-并发工具类—————"><a href="#—————-并发工具类—————" class="headerlink" title="—————-并发工具类—————-"></a><div align="center">—————-并发工具类—————-</div></h1><h2 id="AtomicInteger-的实现原理"><a href="#AtomicInteger-的实现原理" class="headerlink" title="AtomicInteger 的实现原理"></a>AtomicInteger 的实现原理</h2><p><code>AtomicInteger</code> 的实现基于 CAS（Compare and Swap）操作，这是一种无锁的同步算法。</p><p><strong>实现原理</strong>：</p><ol><li><code>AtomicInteger</code> 的 <code>value</code> 字段是一个 <code>int</code> 变量，通过 <code>volatile</code> 保证了可见性和有序性。</li><li><code>AtomicInteger</code> 使用 <code>Unsafe</code> 类来进行 CAS 操作，以确保对 <code>value</code> 字段的原子性更新。</li></ol><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>CountDownLatch 可以用来进行线程同步协作，一个线程（或多个）等待所有线程完成倒计时。</p><ul><li>其中构造参数用来初始化等待计数值</li><li>await() 用来等待计数归零</li><li>countDown() 用来让计数减一</li></ul><p>应用场景：</p><ul><li>批量导入：使用了线程池+CountDownLatch批量把数据库中的数据导入到了ES中，避免OOM</li><li>数据汇总：调用多个接口来汇总数据，如果所有接口（或部分接口）的没有依赖关系，就可以使用线程池+future来提升性能</li><li>异步线程（线程池）：为了避免下一级方法影响上一级方法（性能考虑），可使用异步线程调用下一个方法（不需要下一级方法返回值），可以提升方法响应时间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计数器为 3，表示需要等待 3 个任务完成</span></span><br><span class="line"><span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 3 个线程来执行任务</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 执行任务&quot;</span>);</span><br><span class="line">        latch.countDown();  <span class="comment">// 每个线程执行完任务后递减计数器</span></span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;等待所有任务完成...&quot;</span>);</span><br><span class="line">latch.await();  <span class="comment">// 主线程等待所有任务完成</span></span><br><span class="line">System.out.println(<span class="string">&quot;所有任务已完成，继续执行主线程&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="CountDownLatch-的实现原理"><a href="#CountDownLatch-的实现原理" class="headerlink" title="CountDownLatch 的实现原理"></a>CountDownLatch 的实现原理</h2><p><code>CountDownLatch</code> 的内部维护了一个计数器，计数器的递减操作是通过 <strong>AbstractQueuedSynchronizer (AQS)</strong> 来实现的。</p><p>当调用 <code>countDown()</code> 时，内部的 <code>state</code> 值减少，并在 <code>await()</code> 中通过检查 <code>state</code> 是否为 0 来决定是否唤醒等待线程。</p><p><strong>注意</strong>：<code>CountDownLatch</code> 无法重用，它适合用于一次性的任务完成同步。如果需要重复使用，需要使用 <code>CyclicBarrier</code> 或其他机制。</p><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><ul><li><strong>作用：</strong> 让一组线程到达一个共同的同步点，然后一起继续执行。常用于分阶段任务执行。</li><li><strong>用法：</strong> 适用于需要所有线程在某个点都完成后再继续的场景。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CyclicBarrier</span> <span class="variable">barrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">3</span>, () -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;所有线程都到达了屏障点&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行任务</span></span><br><span class="line">        barrier.await(); <span class="comment">// 等待其他线程</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(task).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(task).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(task).start();</span><br></pre></td></tr></table></figure><h2 id="CyclicBarrier-的原理"><a href="#CyclicBarrier-的原理" class="headerlink" title="CyclicBarrier 的原理"></a>CyclicBarrier 的原理</h2><p><code>CyclicBarrier</code> 是基于 <strong>ReentrantLock</strong> 和 <strong>Condition</strong> 实现的。</p><p><code>CyclicBarrier</code> 内部维护了一个计数器，即达到屏障的线程数量，当线程调用 await 的时候计数器会减一，如果计数器减一不等于 0 的时候，线程会调用 condition.await 进行阻塞等待。</p><p>如果计数器减一的值等于 0，说明最后一个线程也到达了屏障，于是如果有 barrierAction 就执行 barrierAction ，然后调用 condition.signalAll 唤醒之前等待的线程，并且重置计数器，然后开启下一代，所以它可以循环使用。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411071517936.png" alt="img" style="zoom:75%;" /><h2 id="Semaphore-的使用场景"><a href="#Semaphore-的使用场景" class="headerlink" title="Semaphore 的使用场景"></a>Semaphore 的使用场景</h2><p>Semaphore  可以用来限制线程的执行数量，达到限流的效果。</p><p>当一个线程执行时先通过其方法进行获取许可操作，获取到许可的线程继续执行业务逻辑，当线程执行完成后进行释放许可操作，未获取达到许可的线程进行等待或者直接结束。</p><p>Semaphore 两个重要的方法：</p><p><code>acquire()</code>： 请求一个信号量，这时候的信号量个数-1（一旦没有可使用的信号量，也即信号量个数变为负数时，再次请求的时候就会阻塞，直到其他线程释放了信号量）</p><p><code>release()</code>：释放一个信号量，此时信号量个数+1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">5</span>);  <span class="comment">// 允许最多5个线程同时执行任务</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            semaphore.acquire();</span><br><span class="line">            <span class="comment">// 执行任务</span></span><br><span class="line">            <span class="comment">// do something...</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            semaphore.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>ThreadLocal 是多线程中对于解决线程安全的一个操作类，本质是一个<strong>线程内部存储类</strong>，让多个线程只操作自己内部的值，从而实现线程数据隔离。</p><p><strong>常见应用场景</strong></p><ul><li><strong>数据库连接管理</strong>：每个线程拥有自己的数据库连接，避免了多个线程共享同一个连接导致的线程安全问题。</li><li><strong>用户上下文管理</strong>：在处理用户请求时，每个线程拥有独立的用户上下文（如用户ID、Session信息），在并发环境中确保正确的用户数据。</li></ul><h2 id="ThreadLocal-的实现原理"><a href="#ThreadLocal-的实现原理" class="headerlink" title="ThreadLocal 的实现原理"></a>ThreadLocal 的实现原理</h2><p><code>ThreadLocal</code> 通过<strong>为每个线程创建一个独立的变量副本来实现线程本地化存储</strong>，这个变量副本就是 <code>ThreadLocalMap</code>，而 <code>ThreadLocalMap</code> 是每个线程内部持有的结构。</p><p><code>ThreadLocalMap</code> 的键是 <code>Thread </code>对象，值是线程独立的变量副本。当线程访问 <code>ThreadLocal.get()</code> 时，它会根据当前线程在自己的 <code>ThreadLocalMap</code> 中找到对应的变量副本。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410072307889.png" alt="image-20241007230716670" style="zoom:45%;" /><p>以下是一个简化的访问流程：</p><blockquote><p>线程A访问 <code>ThreadLocal.get()</code> 时，从自己独立的 <code>ThreadLocalMap</code> 中找到与该 <code>ThreadLocal</code> 对象对应的值。</p><p>线程B访问 <code>ThreadLocal.get()</code> 时，也从自己独立的 <code>ThreadLocalMap </code>中获取的是与其自身相关的值，互不干扰。</p></blockquote><p>ThreadLocal 三个主要方法：</p><ul><li>set(value) 设置值</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405142004066.png" alt="image-20240514200431014" style="zoom: 80%;" /><ul><li>get() 获取值 &#x2F; remove() 清除值</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405142004819.png" alt="image-20240514200437775" style="zoom: 80%;" /><h2 id="ThreadLocal-的内存泄露问题"><a href="#ThreadLocal-的内存泄露问题" class="headerlink" title="ThreadLocal 的内存泄露问题"></a>ThreadLocal 的内存泄露问题</h2><blockquote><p>Java对象中的四种引用类型：强引用、软引用、弱引用、虚引用</p><ul><li><p>强引用：最为普通的引用方式，表示一个对象处于有用且必须的状态，如果一个对象具有强引用，则GC并不会回收它。即便堆中内存不足了，宁可出现OOM，也不会对其进行回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br></pre></td></tr></table></figure></li><li><p>弱引用：表示一个对象处于可能有用且非必须的状态。在GC线程扫描内存区域时，一旦发现弱引用，就会回收到弱引用相关联的对象。对于弱引用的回收，无关内存区域是否足够，一旦发现则会被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="type">WeakReference</span> <span class="variable">weakReference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeakReference</span>(user);</span><br></pre></td></tr></table></figure></li></ul></blockquote><p>每一个Thread维护的ThreadLocalMap中的<strong>Entry对象继承了WeakReference</strong>，其中<strong>key为使用弱引用的ThreadLocal实例，value为线程变量的副本</strong>。</p><p>ThreadLocalMap 中的 key 是弱引用，值为强引用； key 会被GC 释放内存，关联 value 的内存并不会释放。建议主动 remove 释放 key，value</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405142052855.png" alt="image-20240514205228790" style="zoom: 40%;" /><h2 id="为什么-ThreadLocal-的-key-是弱引用的？"><a href="#为什么-ThreadLocal-的-key-是弱引用的？" class="headerlink" title="为什么 ThreadLocal 的 key 是弱引用的？"></a>为什么 ThreadLocal 的 key 是弱引用的？</h2><p><strong>弱引用的原因</strong></p><ol><li><strong>避免占用过多内存</strong>：ThreadLocal 的 <code>ThreadLocalMap</code> 会在垃圾回收时自动清理无效的条目，确保不会占用过多内存。</li><li><strong>防止内存泄漏</strong>：如果 ThreadLocal 的 key 是强引用，那么即使 ThreadLocal 变量被回收，<code>ThreadLocalMap</code> 中的条目仍然会保留，导致内存泄漏。使用弱引用可以避免这种情况，因为当 ThreadLocal 变量被回收时，对应的条目也会被垃圾回收器清理。</li></ol><h2 id="如何避免-ThradLocal-的内存泄露？"><a href="#如何避免-ThradLocal-的内存泄露？" class="headerlink" title="如何避免 ThradLocal 的内存泄露？"></a>如何避免 ThradLocal 的内存泄露？</h2><p><strong>尽管 <code>ThreadLocal</code> 使用弱引用来存储 key，但仍存在内存泄漏的风险。但通过及时移除 <code>ThreadLocal</code> 变量、使用 try-finally 块、自定义 <code>ThreadLocal</code> 类以及在线程池中进行特殊处理，可以有效避免这些问题。这些措施可以确保 <code>ThreadLocal</code> 变量在不再需要时被及时清除，从而避免内存泄漏。</strong></p><h2 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a><em>Timer</em></h2><p>Timer是一个用于调度任务的工具类。适用于简单的定时任务，如定时更新、定期发送报告等。</p><p><code>Timer</code> 类一般与 <code>TimerTask</code> 搭配使用，<code>TimerTask</code> 是一个需要执行的任务，它是一个实现了 <code>Runnable</code> 接口的抽象类，必须通过继承并实现其 <code>run()</code> 方法。</p><p><strong>基本使用</strong>：</p><ul><li>使用 <code>Timer.schedule(TimerTask task, long delay)</code> 在指定的延迟之后执行任务。</li><li>使用 <code>Timer.scheduleAtFixedRate(TimerTask task, long delay, long period)</code> 周期性地执行任务。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line"><span class="type">TimerTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Task executed!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line">timer.schedule(task, <span class="number">2000</span>);  <span class="comment">// 2 秒后执行任务</span></span><br></pre></td></tr></table></figure><h2 id="Timer的原理"><a href="#Timer的原理" class="headerlink" title="Timer的原理"></a><em>Timer的原理</em></h2><p>Timer 可以实现延时任务，也可以实现周期性任务。</p><p>实现原理是：<strong>用优先队列维持一个小顶堆</strong>，即最快需要执行的任务排在优先队列的第一个，根据堆的特性我们知道插入和删除的时间复杂度都是 O(logn)。</p><p>然后有个 TimerThread 线程不断地拿排着的第一个任务的执行时间和当前时间做对比。</p><p>如果时间到了先看看这个任务是不是周期性执行的任务，如果是则修改当前任务时间为下次执行的时间，如果不是周期性任务则将任务从优先队列中移除。最后执行任务。如果时间还未到则调用 <code>wait()</code> 等待。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410081506278.png" style="zoom:90%;" /><h2 id="Timer-的弊端和替代方案"><a href="#Timer-的弊端和替代方案" class="headerlink" title="Timer 的弊端和替代方案"></a><em>Timer 的弊端和替代方案</em></h2><p>优先队列的插入和删除的时间复杂度是O(logn)，当数据量大的时候，频繁的入堆出堆性能有待考虑。</p><p>并且是<strong>单线程执行</strong>，那么如果一个任务执行的时间过久则会影响下一个任务的执行时间(当然你任务的run要是异步执行也行)。</p><p>并且从它对异常没有做什么处理，<strong>所以一个任务出错的时候会导致之后的任务都无法执行</strong>。</p><p>推荐使用 <strong>ScheduledExecutorService</strong> 替代 <strong>Timer</strong>。</p><h2 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h2><p><strong>ScheduledExecutorService</strong> 是 Java 5 引入的 <strong>Timer</strong> 的替代方案，功能更强大。支持多线程并行调度任务，能更好地处理任务调度的复杂场景。</p><p>因为使用线程池进行任务调度，所以不会因某个任务的异常终止而导致其他任务停止。并且它提供了更灵活的 API，可以更精细地控制任务的执行周期和策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ScheduledExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 延迟3秒后执行任务</span></span><br><span class="line">    executor.schedule(</span><br><span class="line">        () -&gt; System.out.println(<span class="string">&quot;Task running... &quot;</span>),</span><br><span class="line">        <span class="number">3</span>,</span><br><span class="line">        TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始延迟1秒后开始执行任务，之后每2秒执行一次</span></span><br><span class="line">    executor.scheduleAtFixedRate(</span><br><span class="line">        () -&gt; System.out.println(<span class="string">&quot;Task executed at &quot;</span> + System.currentTimeMillis()),  <span class="comment">// Runnable</span></span><br><span class="line">        <span class="number">1</span>,    <span class="comment">// initialDelay</span></span><br><span class="line">        <span class="number">2</span>,    <span class="comment">// period</span></span><br><span class="line">        TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟长时间运行，实际应用中应该有一个条件来决定何时关闭线程池</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>); <span class="comment">// 让主线程等待10秒</span></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例：超时关闭不付款的订单"><a href="#例：超时关闭不付款的订单" class="headerlink" title="例：超时关闭不付款的订单"></a>例：超时关闭不付款的订单</h2><p>比如说这样一个场景，一个用户下单商品后一直不付款，那么30分钟就需要关闭这个订单，怎么做？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ScheduledExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">isPaid</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 模拟系统关闭订单</span></span><br><span class="line">    ScheduledFuture&lt;?&gt; closeOrderTask = scheduleTask(<span class="number">12345L</span>, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">// 模拟用户付款</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">6</span> * <span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        isPaid = <span class="literal">true</span>; <span class="comment">// 标记订单为已付款</span></span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户完成付款，取消关闭订单的任务</span></span><br><span class="line">    <span class="keyword">if</span> (closeOrderTask.isDone()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isPaid) &#123;</span><br><span class="line">            cancelCloseOrder(closeOrderTask);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;订单已付款，无需关闭&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭线程池</span></span><br><span class="line">    executor.shutdown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调度一个任务，在指定时间后关闭订单。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orderId 订单ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delay   延迟时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> unit    时间单位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> ScheduledFuture 对象，用于取消任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledFuture&lt;?&gt; scheduleTask(Long orderId, <span class="type">long</span> delay, TimeUnit unit) &#123;</span><br><span class="line">    <span class="keyword">return</span> executor.schedule(</span><br><span class="line">        () -&gt; &#123;</span><br><span class="line">            <span class="comment">// 检查用户是否已经付款</span></span><br><span class="line">            <span class="keyword">if</span> (isPaid) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Order with ID: &quot;</span> + orderId + <span class="string">&quot; is paid successfully.&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 这里可以添加关闭订单的业务逻辑</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Order with ID: &quot;</span> + orderId + <span class="string">&quot; is closed due to timeout.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> isPaid;</span><br><span class="line">        &#125;,</span><br><span class="line">        delay,</span><br><span class="line">        unit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消关闭订单的任务。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> closeOrderTask 要取消的任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cancelCloseOrder</span><span class="params">(ScheduledFuture&lt;?&gt; closeOrderTask)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (closeOrderTask.cancel(<span class="literal">true</span>)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Order closing cancelled successfully.&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Order closing cancelled error.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><ul><li><strong>作用：</strong> 是一个线程安全的队列，支持阻塞操作，适用于生产者-消费者模式。</li><li><strong>用法：</strong> 生产者线程将元素放入队列，消费者线程从队列中取元素，队列为空时消费者线程阻塞。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line"><span class="type">Runnable</span> <span class="variable">producer</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        queue.put(<span class="string">&quot;item&quot;</span>); <span class="comment">// 放入元素</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Runnable</span> <span class="variable">consumer</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> queue.take(); <span class="comment">// 取出元素</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(producer).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(consumer).start();</span><br></pre></td></tr></table></figure><h2 id="BlockingQueue-的阻塞特性原理"><a href="#BlockingQueue-的阻塞特性原理" class="headerlink" title="BlockingQueue 的阻塞特性原理"></a>BlockingQueue 的阻塞特性原理</h2><p><strong>核心机制</strong>：</p><p><strong>1. 锁（Lock）</strong>：<code>BlockingQueue</code> 的实现中会使用锁来确保线程安全。当多个线程试图访问队列时，锁可以确保同一时刻只有一个线程能够执行某些操作（如 <code>put</code> 或 <code>take</code>）。</p><p><strong>2. 条件变量（Condition）</strong>：条件变量允许一个或多个线程在一个特定条件得到满足之前等待。在 <code>BlockingQueue</code> 的实现中，条件变量用于等待队列变得非空（对于 <code>take</code> 操作）或非满（对于 <code>put</code> 操作）。</p><p><strong>如何实现阻塞</strong>：</p><p><strong>1. put 操作</strong>：当向 <code>BlockingQueue</code> 中添加元素时，如果队列已满，则 <code>put</code> 方法会阻塞当前线程，并调用 <code>Condition</code> 的 <code>await</code> 方法，使得当前线程等待，直到队列空出位置后再添加元素。</p><p><strong>2. take 操作</strong>：当从 <code>BlockingQueue</code> 中取出元素时，如果队列为空，则 <code>take</code> 方法将阻塞当前线程，调用条件变量的 <code>await</code> 方法，使得当前线程等待，直到队列中有元素为止。</p><p>具体代码操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayBlockingQueue</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractQueue</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">BlockingQueue</span>&lt;E&gt;, java.io.Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notEmpty</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notFull</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 其他成员变量定义 ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (count == items.length)</span><br><span class="line">                notFull.await(); <span class="comment">// 如果队列已满，则等待</span></span><br><span class="line">            insert(e);</span><br><span class="line">            notEmpty.signal(); <span class="comment">// 通知等待的消费者线程</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (count == <span class="number">0</span>)</span><br><span class="line">                notEmpty.await(); <span class="comment">// 如果队列为空，则等待</span></span><br><span class="line">            <span class="type">E</span> <span class="variable">x</span> <span class="operator">=</span> remove();</span><br><span class="line">            notFull.signal(); <span class="comment">// 通知等待的生产者线程</span></span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 其他方法 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="———————线程———————"><a href="#———————线程———————" class="headerlink" title="———————线程———————"></a><div align="center">———————线程———————</div></h1><h2 id="如何创建线程？"><a href="#如何创建线程？" class="headerlink" title="如何创建线程？"></a>如何创建线程？</h2><p>一般来说，创建线程有很多种方式，例如继承<code>Thread</code>类、实现<code>Runnable</code>接口、实现<code>Callable</code>接口、利用<code>Callable</code>接口和<code>Future</code>接口方式、使用线程池、使用<code>CompletableFuture</code>类等等。</p><p>不过，这些方式其实并没有真正创建出线程。准确点来说，这些都属于是在 Java 代码中使用多线程的方法。</p><p>严格来说，Java 就只有一种方式可以创建线程，那就是通过<code>new Thread().start()</code>创建。不管是哪种方式，最终还是依赖于<code>new Thread().start()</code>。</p><table><thead><tr><th align="center">创建方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td align="center">继承Thread类</td><td>编程比较简单，可以直接使用Thread类中的方法</td><td>不能再继承其他的类扩展性较差</td></tr><tr><td align="center">实现Runnable接口</td><td>扩展性强，实现该接口的同时还可以继承其他的类</td><td>编程相对复杂，不能直接使用Thread类中的方法</td></tr><tr><td align="center">实现Callable接口</td><td>可以获取多线程运行过程中的结果；扩展性强，实现该接口的同时还可以继承其他的类</td><td>编程相对复杂，不能直接使用Thread类中的方法</td></tr><tr><td align="center">线程池创建</td><td>易于管理</td><td>编程复杂，占用更多资源</td></tr></tbody></table><h2 id="主线程如何知晓创建的子线程是否执行成功？"><a href="#主线程如何知晓创建的子线程是否执行成功？" class="headerlink" title="主线程如何知晓创建的子线程是否执行成功？"></a>主线程如何知晓创建的子线程是否执行成功？</h2><p>1）**使用 <code>Thread.join()</code>**：</p><ul><li>主线程通过调用 <code>join()</code> 方法等待子线程执行完毕。子线程正常结束，说明执行成功，若抛出异常则需要捕获处理。</li></ul><p>2）**使用 <code>Callable</code> 和 <code>Future</code>**：</p><ul><li>通过 <code>Callable</code> 创建可返回结果的任务，并通过 <code>Future.get()</code> 获取子线程的执行结果或捕获异常。<code>Future.get()</code> 会阻塞直到任务完成，若任务正常完成，返回结果，否则抛出异常。</li></ul><p>3）<strong>使用回调机制</strong>：</p><ul><li>可以通过自定义回调机制，主线程传入一个回调函数，子线程完成后调用该函数并传递执行结果。这样可以非阻塞地通知主线程任务完成情况。</li></ul><p>4）<strong>使用 <code>CountDownLatch</code>或其他 JUC 相关类</strong>：</p><ul><li>主线程通过 <code>CountDownLatch</code> 来等待子线程完成。当子线程执行完毕后调用 <code>countDown()</code>，主线程通过 <code>await()</code> 等待子线程完成任务。</li></ul><h2 id="线程的生命周期和状态"><a href="#线程的生命周期和状态" class="headerlink" title="线程的生命周期和状态"></a>线程的生命周期和状态</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410142308560.png" alt="image-20240510161617583" style="zoom:50%;" /><p>Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态：</p><table><thead><tr><th>线程状态</th><th>具体含义</th></tr></thead><tbody><tr><td>NEW</td><td>初始状态，线程被创建出来，但没有被调用 <code>start()</code></td></tr><tr><td>RUNNABLE</td><td>运行状态，线程被调用了 <code>start()</code>等待运行的状态</td></tr><tr><td>BLOCKED</td><td>阻塞状态，需要等待锁释放</td></tr><tr><td>WAITING</td><td>等待状态，表示该线程需要等待其他线程做出一些特定动作（通知或中断）</td></tr><tr><td>TIMED_WAITING</td><td>超时等待状态，造成限时等待状态的原因有三种：<code>Thread.sleep(long)</code>、<code>Object.wait(long)</code>、<code>join(long)</code></td></tr><tr><td>TERMINATED</td><td>终止状态，表示该线程已经运行完毕&#x3D;</td></tr></tbody></table><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404061226955.png" alt="Java 线程状态变迁图" style="zoom: 85%;" /><p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404231254196.png" alt="image-20240423125407032" style="zoom:50%;display: inline-block;" /><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404231301568.png" alt="image-20240423130126469" style="zoom:50%;display: inline-block;" /></p><h2 id="runnable-和-callable-有什么区别？"><a href="#runnable-和-callable-有什么区别？" class="headerlink" title="runnable 和 callable  有什么区别？"></a><code>runnable</code> 和 <code>callable </code> 有什么区别？</h2><ol><li>Runnable 接口run方法没有返回值</li><li>Callable接口call方法有返回值，是个泛型，和Future、FutureTask配合可以用来获取异步执行的结果</li><li>Callable接口的call()方法允许抛出异常；而Runnable接口的run()方法的异常只能在内部消化，不能继续上抛</li></ol><h2 id="run-和-start-有什么区别？"><a href="#run-和-start-有什么区别？" class="headerlink" title="run() 和 start() 有什么区别？"></a><code>run()</code> 和 <code>start()</code> 有什么区别？</h2><ul><li><code>start()</code>: 用来启动线程，通过该线程调用run方法执行run方法中所定义的逻辑代码。<strong>只能被调用一次</strong>。</li><li><code>run()</code>: 封装了要被线程执行的代码，<strong>可以被调用多次。</strong></li></ul><h2 id="notify-和-notifyAll-有什么区别？"><a href="#notify-和-notifyAll-有什么区别？" class="headerlink" title="notify() 和 notifyAll() 有什么区别？"></a><code>notify()</code> 和 <code>notifyAll()</code> 有什么区别？</h2><ul><li><code>notifyAll()</code>：唤醒所有阻塞状态的线程</li><li><code>notify()</code>：顺序唤醒一个阻塞状态的线程</li></ul><h2 id="wait-、-sleep-和-yield-有什么区别？"><a href="#wait-、-sleep-和-yield-有什么区别？" class="headerlink" title="wait() 、 sleep() 和 yield() 有什么区别？"></a><code>wait()</code> 、 <code>sleep()</code> 和 <code>yield()</code> 有什么区别？</h2><p>共同点：都是让当前线程暂时放弃 CPU 的使用权，进入阻塞状态</p><p>不同点：</p><ol><li>方法归属不同<ul><li><code>sleep(long)</code> 是 Thread 的静态方法</li><li><code>wait()</code>和<code>wait(long)</code> 都是 Object 的成员方法</li></ul></li><li>醒来时机不同<ul><li>执行 <code>sleep(long)</code> 和 <code>wait(long)</code> 的线程都会在等待相应毫秒后醒</li><li><code>wait(long)</code> 和 <code>wait()</code> 还可以被 notify 唤醒</li><li>它们都可以被打断唤醒</li></ul></li><li>锁特性不同（重点）<ul><li><code>wait()</code> 和<code>wait(long)</code> 方法的调用必须先获取wait对象的锁，而 <code>sleep()</code> 则无此限制</li><li><strong><code>wait()</code>和 <code>wait(long)</code> 方法执行后会释放对象锁，允许其它线程获得该对象锁</strong></li><li><strong><code>sleep()</code> 如果在同步代码块中执行，并不会释放对象锁</strong></li></ul></li></ol><p><strong>总结：</strong></p><blockquote><ul><li>**<code>Thread.yield()</code>**：用于提示当前线程愿意放弃当前的CPU时间片，但不释放锁，也不阻塞当前线程。</li><li>**<code>Thread.sleep()</code>**：使当前线程进入暂停状态，但不释放锁、会阻塞当前线程。</li><li>**<code>Object.wait()</code>**：使当前线程进入等待状态，会释放锁，但会阻塞当前线程，直到被其他线程唤醒。</li></ul></blockquote><h2 id="Thread-sleep-0-的作用是什么？"><a href="#Thread-sleep-0-的作用是什么？" class="headerlink" title="Thread.sleep(0) 的作用是什么？"></a><code>Thread.sleep(0)</code> 的作用是什么？</h2><p>看起来 Thread.sleep(0) 很奇怪，让线程睡眠 0 毫秒？那不是等于没睡眠吗？</p><p>是的，确实没有睡眠，但是调用了 Thread.sleep(0) 当前的线程会暂时出让 CPU ，这使得 CPU 的资源短暂的空闲出来别的线程有机会得到 CPU 资源。</p><p>所以，在一些大循环场景，如果害怕这段逻辑一直占用 CPU 资源，则可以调用 Thread.sleep(0) 让别的线程有机会使用 CPU。</p><p>实际上 Thread.yield() 这个命令也可以让当前线程主动放弃 CPU 使用权，使得其他线程有机会使用 CPU。</p><h2 id="如何中断-x2F-停止正在运行的线程？"><a href="#如何中断-x2F-停止正在运行的线程？" class="headerlink" title="如何中断&#x2F;停止正在运行的线程？"></a>如何中断&#x2F;停止正在运行的线程？</h2><ol><li><p><strong>调用<code>interrupt()</code>方法</strong>:<br>使用<code>Thread.interrupt()</code>方法中断线程。线程需要在适当的地方检查中断状态（如通过<code>Thread.currentThread().isInterrupted()</code>或捕获<code>InterruptedException</code>）并做出响应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">            <span class="comment">// 可能需要在适当的地方检查中断，尤其是阻塞操作前</span></span><br><span class="line">            <span class="comment">// 执行任务...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="comment">// 线程在等待/睡眠/ join等操作时可能被中断</span></span><br><span class="line">        <span class="comment">// 清理工作</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 清理工作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在其他地方调用以请求中断</span></span><br><span class="line">myThread.interrupt();</span><br></pre></td></tr></table></figure></li><li><p><strong>使用volatile布尔标记</strong>:<br>创建一个volatile类型的布尔标记，作为线程是否应该继续运行的指示器。线程在运行过程中定期检查这个标记，如果标记变为<code>false</code>，则线程自行结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">running</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (running) &#123;</span><br><span class="line">        <span class="comment">// 执行任务...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清理工作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stopThread</span><span class="params">()</span> &#123;</span><br><span class="line">    running = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>利用<code>Future</code>和<code>ExecutorService</code></strong>:<br>如果使用<code>ExecutorService</code>来管理线程，可以通过取消相关的<code>Future</code>任务来间接停止线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">Future&lt;?&gt; future = executor.submit(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 执行任务...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求取消任务</span></span><br><span class="line">future.cancel(<span class="literal">true</span>); <span class="comment">// true表示应该中断正在执行的任务</span></span><br><span class="line">executor.shutdownNow(); <span class="comment">// 尝试停止所有活动的执行任务</span></span><br></pre></td></tr></table></figure></li></ol><p>避免使用已废弃的<code>Thread.stop()</code>、<code>Thread.suspend()</code>和<code>Thread.resume()</code>方法，因为这些方法可能会导致数据不一致性、死锁或其他不可预料的问题。正确的线程结束策略应当确保线程能够清理资源、释放锁并以一种安全的方式终止。</p><h2 id="线程间的通信方式"><a href="#线程间的通信方式" class="headerlink" title="线程间的通信方式"></a>线程间的通信方式</h2><p>在 Java 中，线程之间的通信是指<strong>多个线程协同工作</strong>，主要实现方式包括：</p><p>1）<strong>共享变量</strong>：</p><ul><li>线程可以通过访问共享内存变量来交换信息（需要注意同步问题，防止数据竞争和不一致）。</li><li>共享的也可以是文件，例如写入同一个文件来进行通信。</li></ul><p>2）<strong>同步机制</strong>：</p><ul><li>**<code>synchronized</code>**：Java 中的同步关键字，用于确保同一时刻只有一个线程可以访问共享资源，利用 Object 类提供的 <code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code>实现线程之间的等待&#x2F;通知机制</li><li>**<code>ReentrantLock</code>**：配合 Condition 提供了类似于 wait()、notify() 的等待&#x2F;通知机制</li><li>**<code>BlockingQueue</code>**：通过阻塞队列实现生产者-消费者模式</li><li>**<code>CountDownLatch</code>**：可以允许一个或多个线程等待，直到在其他线程中执行的一组操作完成</li><li>**<code>CyclicBarrier</code>**：可以让一组线程互相等待，直到到达某个公共屏障点</li><li>**<code>Semaphore</code>**：信号量，可以控制对特定资源的访问线程数</li><li>**<code>volatile</code>**：Java 中的关键字，确保变量的可见性，防止指令重排</li><li>**<code>AtomicInteger</code>**：可以用于实现线程安全的计数器或其他共享变量。</li></ul><p>补充 Object 中的方法说明：</p><ul><li><strong>Object 和 synchronized</strong>——wait()、notify()、notifyAll()：使线程进入等待状态，释放锁。唤醒单个等待线程。唤醒所有等待线程。</li><li><strong>Lock 和 Condition</strong>——await()、signal()：使持有ReentranLock锁的线程等待。唤醒持有ReentranLock锁的线程。</li><li><strong>BlockingQueue</strong>——put()、take()：将元素放入阻塞队列。从队列中获取取元素</li></ul><h2 id="如果一个线程在被调用两次-start-方法会发生什么？"><a href="#如果一个线程在被调用两次-start-方法会发生什么？" class="headerlink" title="如果一个线程在被调用两次 start() 方法会发生什么？"></a><em>如果一个线程在被调用两次 start() 方法会发生什么？</em></h2><p>会报错！因为在 Java 中，一个线程只能被启动一次！所以尝试第二次调用 start() 方法时，会抛出 IllegalThreadStateException 异常。</p><p>这是因为<strong>一旦线程已经开始执行，它的状态不能再回到初始状态</strong>。线程的生命周期不允许它从终止状态回到可运行状态。</p><h2 id="死锁产生的条件是什么？如何避免死锁？如何诊断死锁？"><a href="#死锁产生的条件是什么？如何避免死锁？如何诊断死锁？" class="headerlink" title="死锁产生的条件是什么？如何避免死锁？如何诊断死锁？"></a>死锁产生的条件是什么？如何避免死锁？<em>如何诊断死锁？</em></h2><p><strong>死锁</strong>：一个线程需要同时获取多把锁，这时就容易发生死锁</p><p><strong>死锁产生的条件</strong>：</p><ol><li><strong>互斥条件</strong>：每个资源只能被一个线程占用。</li><li><strong>占有和等待</strong>：线程在持有至少一个资源的同时，等待获取其他资源。</li><li><strong>不可抢占</strong>：线程所获得的资源在未使用完毕之前不能被其他线程抢占。</li><li><strong>循环等待</strong>：多个线程形成一种头尾相接的循环等待资源关系。</li></ol><p><strong>避免死锁的方法</strong>：</p><ol><li><strong>按序申请资源</strong>：确保所有线程在获取多个锁时，按照相同的顺序获取锁。</li><li><strong>尽量减少锁的范围</strong>：将锁的粒度尽可能缩小，减少持有锁的时间。可以通过拆分锁或使用更细粒度的锁来实现。</li><li><strong>使用尝试锁机制</strong>：使用 <code>ReentrantLock</code> 的 <code>tryLock</code> 方法，尝试在一段时间内获取锁，如果无法获取，则可以选择放弃或采取其他措施，避免死锁。</li><li><strong>设置超时等待时间</strong>：为锁操作设置超时，防止线程无限期地等待锁。</li><li><strong>避免嵌套锁</strong>：尽量避免在一个锁的代码块中再次尝试获取另一个锁。</li></ol><p><em><strong>死锁诊断</strong>：</em></p><p><em>使用jdk自带的工具：jps和 jstack</em></p><ol><li><em>使用 <code>jps</code> 查看运行的线程</em></li><li><em>第二：使用<code>jstack -l &lt;进程ID&gt;</code>查看线程运行的情况</em></li></ol><p><em>其他解决工具，可视化工具</em></p><ul><li><em>jconsole</em></li></ul><p><em>用于对jvm的内存，线程，类的监控，是一个基于 jmx 的 GUI 性能监控工具</em></p><p><em>打开方式：java 安装目录 bin目录下 直接启动 jconsole.exe 就行</em></p><ul><li><em>VisualVM：故障处理工具</em></li></ul><p><em>能够监控线程，内存情况，查看方法的CPU时间和内存中的对 象，已被GC的对象，反向查看分配的堆栈</em></p><p><em>打开方式：java 安装目录 bin目录下 直接启动 jvisualvm.exe就行</em></p><h2 id="如何创建多线程？"><a href="#如何创建多线程？" class="headerlink" title="如何创建多线程？"></a>如何创建多线程？</h2><p>常见有以下五种方式创建使用多线程：</p><p>1）<strong>实现 <code>Runnable</code> 接口</strong>：</p><ul><li>实现 <code>Runnable</code> 接口的 <code>run()</code> 方法，使用 <code>Thread</code> 类的构造函数传入 <code>Runnable</code> 对象，调用 <code>start()</code> 方法启动线程。</li><li>例子：<code>Thread thread = new Thread(new MyRunnable()); thread.start();</code></li></ul><p>2）<strong>继承 <code>Thread</code> 类</strong>：</p><ul><li>继承 <code>Thread</code> 类并重写 <code>run()</code> 方法，直接创建 <code>Thread</code> 子类对象并调用 <code>start()</code> 方法启动线程。</li><li>例子：<code>MyThread thread = new MyThread(); thread.start();</code></li></ul><p>3）**使用 <code>Callable</code> 和 <code>FutureTask</code>**：</p><ul><li>实现 <code>Callable</code> 接口的 <code>call()</code> 方法，使用 <code>FutureTask</code> 包装 <code>Callable</code> 对象，再通过 <code>Thread</code> 启动。</li><li>例子：<code>FutureTask&lt;Integer&gt; task = new FutureTask&lt;&gt;(new MyCallable()); Thread thread = new Thread(task); thread.start();</code></li></ul><p>4）<strong>使用线程池（<code>ExecutorService</code>）</strong>：</p><ul><li>通过 <code>ExecutorService</code> 提交 <code>Runnable</code> 或 <code>Callable</code> 任务，不直接创建和管理线程，适合管理大量并发任务。</li><li>例子：<code>ExecutorService executor = Executors.newFixedThreadPool(10); executor.submit(new MyRunnable());</code></li></ul><p>5）<strong>CompletableFuture（本质也是线程池，默认 forkjoinpool）</strong>：</p><ul><li>Java 8 引入的功能，非常方便地进行异步任务调用，且通过 <code>thenApply</code>、<code>thenAccept</code> 等方法可以轻松处理异步任务之间的依赖关系。</li><li><code>CompletableFuture&lt;Void&gt; future1 = CompletableFuture.runAsync(() -&gt; &#123;&#125;);</code></li></ul><h2 id="CompletableFuture-的使用"><a href="#CompletableFuture-的使用" class="headerlink" title="CompletableFuture 的使用"></a><code>CompletableFuture</code> 的使用</h2><h3 id="Future-和-CompletableFuture-对比"><a href="#Future-和-CompletableFuture-对比" class="headerlink" title="Future 和 CompletableFuture 对比"></a><code>Future</code> 和 <code>CompletableFuture</code> 对比</h3><ol><li><strong>Future</strong>：表示异步计算的结果，可以查询结果是否可用，等待结果完成或取消计算。</li><li><strong>CompletableFuture</strong>：表示异步计算的一个阶段，可以与其他阶段组合形成复杂的异步流程。</li></ol><h3 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h3><ul><li><strong>runAsync</strong>：异步执行一个不返回结果的任务。</li><li><strong>supplyAsync</strong>：异步执行一个返回结果的任务。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个不返回结果的异步任务</span></span><br><span class="line">CompletableFuture&lt;Void&gt; future1 = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;future1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个返回结果的异步任务</span></span><br><span class="line">CompletableFuture&lt;String&gt; future2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;future2&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="任务回调"><a href="#任务回调" class="headerlink" title="任务回调"></a><strong>任务回调</strong></h3><ul><li><strong>thenApply</strong>：在前一个任务完成后，**返回一个新的 <code>CompletableFuture</code>**。</li><li><strong>thenAccept</strong>：在前一个任务完成后，<strong>消费结果，不返回新结果</strong>。</li><li><strong>thenRun</strong>：在前一个任务完成后，<strong>执行一个不返回结果的操作</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; future3 = future2.thenApply(result -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> result + <span class="string">&quot; Welcome!&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">future3.thenAccept(System.out::println); <span class="comment">// 输出: future2 Welcome!</span></span><br></pre></td></tr></table></figure><h3 id="组合任务"><a href="#组合任务" class="headerlink" title="组合任务"></a>组合任务</h3><ul><li><strong>thenCombine</strong>：合并两个 CompletableFuture 的结果。</li><li><strong>thenCompose</strong>：将一个 CompletableFuture 的结果作为另一个 CompletableFuture 的输入。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; future1 = CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">CompletableFuture&lt;String&gt; future2 = CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;World&quot;</span>);</span><br><span class="line">CompletableFuture&lt;String&gt; combinedFuture2 = future1.thenCombine(future2, (result1, result2) -&gt; result1 + <span class="string">&quot;, &quot;</span> + result2);</span><br><span class="line">combinedFuture2.thenAccept(System.out::println);  <span class="comment">// Hello, World</span></span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;Hello&quot;</span>).thenCompose(result -&gt; CompletableFuture.supplyAsync(() -&gt; result + <span class="string">&quot;, World&quot;</span>));</span><br><span class="line">future.thenAccept(System.out::println);  <span class="comment">// Hello, World   （效果和上面一样）</span></span><br></pre></td></tr></table></figure><h3 id="并行处理任务"><a href="#并行处理任务" class="headerlink" title="并行处理任务"></a>并行处理任务</h3><ul><li><strong>allOf</strong>：等待所有 <code>CompletableFuture</code> 完成。</li><li><strong>anyOf</strong>：等待任何一个 <code>CompletableFuture</code> 完成。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; future4 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Task 1&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; future5 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Task 2&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Void&gt; allFutures = CompletableFuture.allOf(future4, future5);</span><br><span class="line">allFutures.thenRun(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;All tasks completed&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Object&gt; anyFuture = CompletableFuture.anyOf(future4, future5);</span><br><span class="line">anyFuture.thenAccept(result -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;First completed task: &quot;</span> + result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><ol><li><strong>exceptionally</strong>：在任务异常时执行一个回调函数。</li><li><strong>handle</strong>：无论任务是否异常，都会执行一个回调函数。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Object&gt; future6 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Something went wrong&quot;</span>);</span><br><span class="line">&#125;).exceptionally(ex -&gt; <span class="string">&quot;Exception occurred: &quot;</span> + ex.getMessage());</span><br><span class="line">future6.thenAccept(System.out::println);   <span class="comment">// Exception occurred: java.lang.RuntimeException: Something went wrong</span></span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Object&gt; future7 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Something went wrong&quot;</span>);</span><br><span class="line">&#125;).handle((result, ex) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (ex != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ex.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">future7.thenAccept(System.out::println);  <span class="comment">// java.lang.RuntimeException: Something went wrong</span></span><br></pre></td></tr></table></figure><h1 id="——————-线程池——————"><a href="#——————-线程池——————" class="headerlink" title="——————-线程池——————-"></a><div align="center">——————-线程池——————-</div></h1><h2 id="ForkJoinPool"><a href="#ForkJoinPool" class="headerlink" title="ForkJoinPool"></a>ForkJoinPool</h2><p><strong>ForkJoinPool</strong> 是Java 7引入的一个<strong>专门用于并行执行任务</strong>的线程池，它采用“<strong>分而治之</strong>”（divide and conquer）算法来解决大规模的并行问题。</p><p><strong>核心机制</strong>：</p><ol><li><strong>Fork（分解）</strong>：任务被递归分解为更小的子任务，直到达到不可再分的程度。</li><li><strong>Join（合并）</strong>：子任务执行完毕后，将结果合并，形成最终的解决方案。</li></ol><p><strong>工作窃取算法</strong>：ForkJoinPool使用了一种称为工作窃取的调度算法。空闲的工作线程会从其他繁忙线程的工作队列中“窃取”未完成的任务以保持资源高效利用。</p><p><strong>关键类</strong>：</p><ol><li><code>ForkJoinPool</code>：表示Fork&#x2F;Join框架中的线程池。</li><li><code>ForkJoinTask</code>：任务的基础抽象类，子类如<code>RecursiveTask</code>和<code>RecursiveAction</code>分别用于有返回值和无返回值的任务。</li></ol><h2 id="ForkJoinPool-与普通线程池的区别"><a href="#ForkJoinPool-与普通线程池的区别" class="headerlink" title="ForkJoinPool 与普通线程池的区别"></a>ForkJoinPool 与普通线程池的区别</h2><p>有两方面的区别：</p><ul><li><strong>任务分解与合并</strong>：传统的线程池一般<strong>处理相对独立的任务</strong>，而ForkJoinPool则擅长<strong>处理可以分解的任务，最终将结果合并</strong>。</li><li><strong>线程调度策略</strong>：普通的线程池通常<strong>由中央队列管理任务</strong>，而ForkJoinPool中的<strong>每个工作线程都维护着自己的双端队列，并通过工作窃取来平衡任务</strong>。</li></ul><h2 id="ForkJoinPool-与并行流的关系"><a href="#ForkJoinPool-与并行流的关系" class="headerlink" title="ForkJoinPool 与并行流的关系"></a>ForkJoinPool 与并行流的关系</h2><p>ForkJoinPool 是并行流的<strong>爹</strong>！</p><p>Java 8中的并行流（Parallel Streams）底层是基于ForkJoinPool实现的。</p><p>Java 8中通过<code>parallelStream()</code>方法，可以轻松地利用ForkJoinPool来实现并行操作，从而提高处理效率。</p><h2 id="线程池的原理、任务提交流程"><a href="#线程池的原理、任务提交流程" class="headerlink" title="线程池的原理、任务提交流程"></a>线程池的原理、任务提交流程</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410012141947.png" alt="image-20241001214029098" style="zoom: 67%; float: left;" /><ol><li>默认情况下线程不会预创建，任务提交之后才会创建线程。<em>（不过设置 prestartAllCoreThreads 可以预创建核心线程）</em></li><li>如果工作线程少于<code>corePoolSize</code>，则<strong>创建新线程来处理请求</strong></li><li>如果工作线程等于或多于<code>corePoolSize</code>，则<strong>将任务加入队列</strong></li><li>如果无法将请求加入队列，则<strong>创建新的线程来处理请求</strong></li><li>如果创建新线程使当前运行的线程超出<code>maximumPoolSize</code>，则<strong>任务将被拒绝</strong></li></ol><h2 id="线程池的-7-个核心参数"><a href="#线程池的-7-个核心参数" class="headerlink" title="线程池的 7 个核心参数"></a>线程池的 7 个核心参数</h2><p>用 <code>ThreadPoolExecutor</code> 类创建线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPoolDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">            <span class="number">2</span>,                                   <span class="comment">// 参数一：核心线程数量</span></span><br><span class="line">            <span class="number">5</span>,                                   <span class="comment">// 参数二：最大线程数</span></span><br><span class="line">            <span class="number">2</span>,                                   <span class="comment">// 参数三：空闲线程最大存活时间</span></span><br><span class="line">            TimeUnit.SECONDS,                    <span class="comment">// 参数四：存活时间单位</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10</span>),        <span class="comment">// 参数五：任务队列</span></span><br><span class="line">            Executors.defaultThreadFactory(),    <span class="comment">// 参数六：线程工厂</span></span><br><span class="line">            <span class="comment">//r -&gt; new Thread(r, name:&quot;myThread&quot; + c.getAndIncrement(),</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy() <span class="comment">// 参数七：任务的拒绝策略</span></span><br><span class="line">        );</span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411071519543.png" alt="image.png" style="zoom:50%;" /><h2 id="任务拒绝策略"><a href="#任务拒绝策略" class="headerlink" title="任务拒绝策略"></a>任务拒绝策略</h2><table><thead><tr><th>任务拒绝策略</th><th>说明</th></tr></thead><tbody><tr><td>ThreadPoolExecutor.<strong>AbortPolicy</strong></td><td>丢弃任务并抛出<code>RejectedExecutionException</code>异常（默认）</td></tr><tr><td>ThreadPoolExecutor.<strong>DiscardPolicy</strong></td><td>丢弃任务，但是不抛出异常（不推荐）</td></tr><tr><td>ThreadPoolExecutor.<strong>DiscardoldestPolicy</strong></td><td>丢弃队列最前面的任务，然后重新尝试执行任务</td></tr><tr><td>ThreadPoolExecutor.<strong>CallerRunsPolicy</strong></td><td>由调用线程处理该任务</td></tr></tbody></table><h2 id="自定义任务拒绝策略"><a href="#自定义任务拒绝策略" class="headerlink" title="自定义任务拒绝策略"></a><em>自定义任务拒绝策略</em></h2><p>可以实现 RejectedExecutionHandler 接口来定义自定义的拒绝策略。例如，记录日志或将任务重新排队。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomRejectedExecutionHandler</span> <span class="keyword">implements</span> <span class="title class_">RejectedExecutionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mianshiya.com Task &quot;</span> + r.toString() + <span class="string">&quot; rejected&quot;</span>);</span><br><span class="line">        <span class="comment">// 可以在这里实现日志记录或其他逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程池可选用的阻塞队列"><a href="#线程池可选用的阻塞队列" class="headerlink" title="线程池可选用的阻塞队列"></a>线程池可选用的阻塞队列</h2><p>workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务</p><p>比较常见workQueue 的有4个，用的最多是<strong>ArrayBlockingQueue</strong>和<strong>LinkedBlockingQueue</strong></p><p>1.<strong>ArrayBlockingQueue：数组结构的有界阻塞队列。</strong></p><p>2.<strong>LinkedBlockingQueue：链表结构的阻塞队列，大小无限。</strong></p><p>3.DelayedWorkQueue ：带优先级的无界阻塞队列。可以将执行时间最靠前的任务出队。</p><p>4.SynchronousQueue：不存储任务，直接将任务提交给线程。</p><p><strong>ArrayBlockingQueue 和 LinkedBlockingQueue区别</strong></p><table><thead><tr><th align="center"></th><th align="center"><strong>ArrayBlockingQueue</strong></th><th align="center"><strong>LinkedBlockingQueue</strong></th></tr></thead><tbody><tr><td align="center"><strong>长度</strong></td><td align="center"><strong>有界</strong></td><td align="center"><strong>默认无界，支持有界</strong></td></tr><tr><td align="center"><strong>底层数据结构</strong></td><td align="center">数组</td><td align="center">链表</td></tr><tr><td align="center"><strong>创建方式</strong></td><td align="center">提前初始化 Node  数组，Node 需要是提前创建好的</td><td align="center">懒性队列，添加数据的时候创建节点，入队会生成新 Node</td></tr><tr><td align="center"><strong>加锁方式</strong></td><td align="center"><strong>只有一把锁，读和写公用，性能较差</strong></td><td align="center"><strong>头尾两把锁，一把读、一把写，性能较好</strong></td></tr></tbody></table><h2 id="线程池的-5-种状态"><a href="#线程池的-5-种状态" class="headerlink" title="线程池的 5 种状态"></a>线程池的 5 种状态</h2><p>线程池的生命周期通常包括以下几个状态：</p><ul><li><code>RUNNING</code>：接受新的任务并且处理队列中的任务。</li><li><code>SHUTDOWN</code>：不再接受新任务，但是会继续处理队列中的任务。（调用shutdown()方法）</li><li><code>STOP</code>：不再接受新任务并且不处理队列中的任务，中断正在执行的任务。（调用shutdownNow()方法）</li><li><code>TIDYING</code>：所有的任务都已完成，正在执行终止前的清理工作。</li><li><code>TERMINATED</code>：线程池已完成清理工作，处于结束状态。</li></ul><p><strong>1. 线程池状态说明：</strong></p><ul><li><code>RUNNING</code>：默认状态，可以正常接收任务并执行，处理工作队列的任务。</li><li><code>SHUTDOWN</code>：不再接受新任务，但会继续处理等待队列中的任务。</li><li><code>STOP</code>：既不接受新任务也不处理等待队列中的任务，中断正在执行的任务。</li><li><code>TIDYING</code>：所有任务结束，工作线程数为0，是一种过渡状态。</li><li><code>TERMINATED</code>：线程池终止状态，表示terminated()钩子函数调用完毕。</li></ul><p><strong>2. 状态之间的转换：</strong></p><ul><li><code>RUNNING -&gt; SHUTDOWN</code>：调用shutdown()方法导致线程池变为SHUTDOWN状态。</li><li><code>(RUNNING 或 SHUTDOWN) -&gt; STOP</code>：调用shutdownNow()方法导致线程池变为STOP状态。</li><li><code>SHUTDOWN -&gt; TIDYING</code>：当等待队列为空且工作线程数为0时，线程池从SHUTDOWN转为TIDYING状态。</li><li><code>STOP -&gt; TIDYING</code>：同上，等待队列为空时，线程池从STOP转为TIDYING状态。</li><li><code>TIDYING -&gt; TERMINATED</code>：调用terminated()钩子函数后，线程池从TIDYING转为TERMINATED状态。</li></ul><h2 id="Java中的-4-种默认线程池"><a href="#Java中的-4-种默认线程池" class="headerlink" title="Java中的 4 种默认线程池"></a>Java中的 4 种默认线程池</h2><p>使用<code>ExecutorService</code>可以创建许多类型的线程池：</p><ul><li><p><strong><code>FixedThreadPool</code><strong>：固定线程数量的线程池，可控制线程最大并发数，超出的线程会在队列中等待，</strong>允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM</strong></p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405131641783.png" alt="image-20240513164118730" style="zoom: 80%;"/></li><li><p><strong><code>SingleThreadExecutor</code><strong>：单线程化的线程池，保证所有任务按照指定顺序执行，</strong>允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM</strong></p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405131641155.png" alt="image-20240513164133123" style="zoom: 80%;"/></li><li><p><strong><code>CachedThreadPool</code><strong>：可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程，</strong>允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM</strong></p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405131646303.png" alt="image-20240513164601273" style="zoom: 80%;"/></li><li><p>**<code>ScheduledThreadPool</code>**：可以执行延迟任务的线程池，支持定时及周期性任务执行</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202405131641651.png" alt="image-20240513164158611" style="zoom: 80%;"/></li><li><p>**<code>WorkStealingPool</code>**：基于任务窃取算法的线程池。线程池中的每个线程维护一个双端队列（deque），线程可以从自己的队列中取任务执行。如果线程的任务队列为空，它可以从其他线程的队列中”窃取”任务来执行，达到负载均衡的效果。适合大量小任务并行执行，特别是递归算法或大任务分解成小任务的场景。</p></li></ul><h2 id="如何确定线程池的线程数？"><a href="#如何确定线程池的线程数？" class="headerlink" title="如何确定线程池的线程数？"></a>如何确定线程池的线程数？</h2><blockquote><p>一般而言：</p><p>核心线程数 &#x3D; CPU核心数</p><p>最大线程数 &#x3D; CPU核心数 * 2</p></blockquote><p>① CPU密集型任务：</p><ul><li>高并发、任务执行时间短 –&gt;<strong>（ CPU核数 + 1 ）</strong>，减少线程上下文的切换</li></ul><p>② 资源密集型任务：</p><ul><li><p>IO密集型的任务 –&gt; <strong>(CPU核数 * 2)</strong></p></li><li><p>计算密集型任务 –&gt; <strong>（ CPU核数 + 1 ）</strong></p></li></ul><p>③ 并发高、业务执行时间长：</p><ul><li>关键不在于线程池而在于整体架构的设计，而是要通过缓存、服务器进行优化，通过压测来确定最优的线程池参数。</li></ul><h2 id="线程池调整原则"><a href="#线程池调整原则" class="headerlink" title="线程池调整原则"></a>线程池调整原则</h2><ul><li>动态调整线程池大小时，需要确保新的配置不会导致系统资源耗尽。比如，过大的线程池可能会占用过多的 CPU 和内存，反而影响性能。</li><li>当系统负载发生变化时，可以使用动态调整来优化线程池的资源使用率，例如在系统负载增加时，临时提高核心线程数以应对突发流量,当系统负载下降时，可以减少核心线程数以节省资源。</li><li>当任务队列长度过长时，可以临时增加核心线程数，以加快任务的处理速度。</li></ul><h2 id="线程池监控与调整"><a href="#线程池监控与调整" class="headerlink" title="线程池监控与调整"></a><strong>线程池监控与调整</strong></h2><ul><li>在实际生产环境中，可以通过监控线程池的状态（如当前活跃线程数、队列长度等）来决定是否动态调整线程池大小。</li><li>可以使用 JMX（Java Management Extensions）来监控 <code>ThreadPoolExecutor</code>，结合指标来自动调整线程池大小以优化性能。</li></ul><h2 id="底层原理：线程池的execute-运行原理"><a href="#底层原理：线程池的execute-运行原理" class="headerlink" title="底层原理：线程池的execute()运行原理"></a>底层原理：线程池的<code>execute()</code>运行原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="literal">null</span>) </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get(); <span class="comment">// 获取线程池的状态和工作线程数量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断当前工作线程数量是否小于核心线程数</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; </span><br><span class="line">        <span class="comment">// 创建核心线程并执行任务</span></span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="literal">true</span>))</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 创建成功，任务由核心线程处理</span></span><br><span class="line">        c = ctl.get(); <span class="comment">// 不成功则重新获取ctl</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 核心线程已达预期数量，尝试将任务分配给工作队列</span></span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">recheck</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (!isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="literal">false</span>)) <span class="comment">// 工作牌队列已满，分配非核心线程（临时线程）处理</span></span><br><span class="line">        reject(command); <span class="comment">// 分配失败或非核心线程创建失败，执行拒绝策略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="底层原理：线程池的动态调整是如何保证线程安全的？"><a href="#底层原理：线程池的动态调整是如何保证线程安全的？" class="headerlink" title="底层原理：线程池的动态调整是如何保证线程安全的？"></a>底层原理：线程池的动态调整是如何保证线程安全的？</h2><p><strong>1. 使用 <code>volatile</code> 修饰 核心线程数 和 最大线程数</strong></p><p>核心线程数<code>corePoolSize</code> 和最大线程数 <code>maximumPoolSize</code> 都是用 <code>volatile</code> 修饰的，保证了当这些字段被修改时，其他线程能够看到最新的值，而且不会发生指令重排序，确保了多线程环境下的可见性和有序性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">volatile</span> <span class="type">int</span> corePoolSize;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">volatile</span> <span class="type">int</span> maximumPoolSize;</span><br></pre></td></tr></table></figure><p><strong>2. 使用原子类记录关键信息</strong></p><p>使用了 <code>ctl</code> 字段来保存线程池的一些关键状态信息，包括当前活跃线程数、线程池的状态等。这个字段是一个 <code>long</code> 类型，通过位操作来保存不同的状态信息。在修改线程池状态时，<code>ThreadPoolExecutor</code> 使用了 CAS（Compare and Swap）操作来保证原子性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">long</span> ctl;</span><br></pre></td></tr></table></figure><p>例如，在创建新线程时，<code>addWorker</code> 方法会使用 <code>compareAndSetWorkerCount</code> 来更新线程池的当前线程数，这个操作是原子的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">compareAndSetWorkerCount</span><span class="params">(<span class="type">int</span> expect, <span class="type">int</span> update)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ctl.compareAndSet(ctlOf(expect), ctlOf(update));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>线程池状态<code>ctl</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">ctl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> Integer.SIZE - <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_MASK</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runState存储在高位</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RUNNING</span>    <span class="operator">=</span> -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SHUTDOWN</span>   <span class="operator">=</span>  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STOP</span>       <span class="operator">=</span>  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TIDYING</span>    <span class="operator">=</span>  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TERMINATED</span> <span class="operator">=</span>  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包和解包ctl</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">runStateOf</span><span class="params">(<span class="type">int</span> c)</span>     &#123; <span class="keyword">return</span> c &amp; ~COUNT_MASK; &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">workerCountOf</span><span class="params">(<span class="type">int</span> c)</span>  &#123; <span class="keyword">return</span> c &amp; COUNT_MASK; &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ctlOf</span><span class="params">(<span class="type">int</span> rs, <span class="type">int</span> wc)</span> &#123; <span class="keyword">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure><p><strong><code>workerCountOf</code> 方法</strong></p><p><code>workerCountOf</code> 方法是从 <code>ctl</code> 字段中提取当前活动线程的数量。<code>ctl</code> 字段是一个 <code>volatile long</code> 类型的变量，包含了线程池的一些状态信息，包括当前活动线程的数量。</p><p><code>ctl</code> 的高几位表示线程池的状态信息，而低几位表示当前活动线程的数量。具体来说，<code>ctl</code> 的低 3 位（0-2）表示当前活动线程的数量。</p><p><strong><code>interruptIdleWorkers</code> 方法</strong></p><p><code>interruptIdleWorkers</code> 方法用来中断那些处于空闲状态的线程。该方法遍历所有工作线程，并中断那些处于空闲状态的线程。如果当前活动线程数仍然大于新的最大线程数，则会再次检查并中断空闲线程。</p><p><strong>3. 使用锁</strong></p><p>使用锁来保护共享资源的访问。</p><p>例如，在 <code>interruptIdleWorkers</code> 方法中，当需要中断空闲线程时，会获取 <code>mainLock</code> 来保护对 <code>workers</code> 集合的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">interruptIdleWorkers</span><span class="params">(<span class="type">boolean</span> onlyOne)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 使用并发集合</strong></p><p>使用了 <code>ConcurrentHashMap</code> 来管理 <code>Worker</code> 对象，这些对象代表了正在工作的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;Integer, Worker&gt; workers = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="底层原理：核心线程数的动态修改原理"><a href="#底层原理：核心线程数的动态修改原理" class="headerlink" title="底层原理：核心线程数的动态修改原理"></a>底层原理：核心线程数的动态修改原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCorePoolSize</span><span class="params">(<span class="type">int</span> corePoolSize)</span> &#123;</span><br><span class="line">    <span class="comment">// 对传入的 corePoolSize 进行校验</span></span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> || maximumPoolSize &lt; corePoolSize)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="comment">// 更新当前的核心线程数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">delta</span> <span class="operator">=</span> corePoolSize - <span class="built_in">this</span>.corePoolSize;</span><br><span class="line">    <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="comment">// 如果新的 corePoolSize 小于当前的核心线程数，那么需要中断那些处于空闲状态的线程</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(ctl.get()) &gt; corePoolSize)</span><br><span class="line">        interruptIdleWorkers();</span><br><span class="line">    <span class="comment">// 如果新的 corePoolSize 大于当前的核心线程数，并且任务队列中有任务等待执行，那么需要预启动一些新的线程来处理这些任务</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (delta &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> Math.min(delta, workQueue.size());</span><br><span class="line">        <span class="keyword">while</span> (k-- &gt; <span class="number">0</span> &amp;&amp; addWorker(<span class="literal">null</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (workQueue.isEmpty())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="底层原理：最大线程数的动态修改原理"><a href="#底层原理：最大线程数的动态修改原理" class="headerlink" title="底层原理：最大线程数的动态修改原理"></a>底层原理：最大线程数的动态修改原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaximumPoolSize</span><span class="params">(<span class="type">int</span> maximumPoolSize)</span> &#123;</span><br><span class="line">    <span class="comment">// 对传入的 maximumPoolSize 进行校验</span></span><br><span class="line">    <span class="keyword">if</span> (maximumPoolSize &lt;= <span class="number">0</span> || maximumPoolSize &lt; corePoolSize)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="comment">// 更新当前的最大线程数</span></span><br><span class="line">    <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="comment">// 如果新的 maximumPoolSize 小于当前的最大线程数，并且当前活动线程数大于新的 maximumPoolSize，则需要中断那些处于空闲状态的线程</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(ctl.get()) &gt; maximumPoolSize)</span><br><span class="line">        interruptIdleWorkers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何避免线程池的线程被无限占用？"><a href="#如何避免线程池的线程被无限占用？" class="headerlink" title="如何避免线程池的线程被无限占用？"></a>如何避免线程池的线程被无限占用？</h2><p><strong>结合 <code>awaitTermination</code>：</strong></p><p>无论是 <code>shutdown()</code> 还是 <code>shutdownNow()</code>，可以配合 <code>awaitTermination()</code> 方法等待线程池完全终止。<code>awaitTermination()</code> 会阻塞调用线程，直到线程池终止或超时。</p><p>比如以下的使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">threadPool.shutdown();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (!threadPool.awaitTermination(<span class="number">60</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">       threadPool.shutdownNow();</span><br><span class="line">   &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">   threadPool.shutdownNow();</span><br><span class="line">   Thread.currentThread().interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种组合方式常用于确保线程池能够在合理时间内关闭，避免无限等待或资源泄漏。</p><h2 id="多次调用-shutdown-、shutdownNow-会怎样？"><a href="#多次调用-shutdown-、shutdownNow-会怎样？" class="headerlink" title="多次调用 shutdown()、shutdownNow() 会怎样？"></a>多次调用 <code>shutdown()</code>、<code>shutdownNow()</code> 会怎样？</h2><p>再次调用不会有额外效果，只会在第一次调用时有效果。</p><p>而且，即使线程池进入 <code>SHUTDOWN</code> 状态，相关资源不会立即释放。必须等待所有线程完成任务，线程池进入 <code>TERMINATED</code> 状态后，资源才会释放。</p><h2 id="Java-线程池内部任务出异常后，如何知道是哪个线程出了异常？"><a href="#Java-线程池内部任务出异常后，如何知道是哪个线程出了异常？" class="headerlink" title="Java 线程池内部任务出异常后，如何知道是哪个线程出了异常？"></a>Java 线程池内部任务出异常后，如何知道是哪个线程出了异常？</h2><p>在Java中，线程池内部的任务如果抛出未捕获的异常，默认情况下这些异常会被记录到日志中，并且任务会被中断，但不会影响线程池本身继续执行其他任务。</p><p>如果你只需要处理个别任务的异常，那么包装任务或者使用<code>Future.get()</code>可能是更好的选择。</p><p><strong>1. 使用<code>Future</code>和<code>get()</code>方法</strong></p><p>任务到线程池后获取一个<code>Future</code>对象，调用<code>Future.get()</code>方法等待任务完成，并且如果任务执行过程中抛出异常，这个异常会被封装成<code>ExecutionException</code>重新抛出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">Future&lt;?&gt; future = executor.submit(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 模拟任务</span></span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;任务出错！&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    future.get(); <span class="comment">// 等待任务完成</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    Thread.currentThread().interrupt();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;捕获到异常：&quot;</span> + e.getCause());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想对所有任务的异常进行统一处理，可以考虑使用自定义<code>ThreadFactory</code>或重写<code>afterExecute</code>方法。</p><p><strong>2. 自定义<code>ThreadFactory</code></strong></p><p>可以通过自定义<code>ThreadFactory</code>来创建线程，并设置异常处理器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>, <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        t.setUncaughtExceptionHandler((thread, throwable) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程 &quot;</span> + thread.getName() + <span class="string">&quot; 抛出异常：&quot;</span> + throwable.getMessage());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>3. 使用<code>ThreadPoolExecutor</code>的<code>afterExecute</code>方法</strong></p><p>可以重写<code>ThreadPoolExecutor.afterExecute()</code>方法来捕获任务执行后的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">    <span class="number">10</span>, <span class="number">10</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">executor.afterExecute = (r, e) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务抛出异常：&quot;</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java, all in one！</summary>
    
    
    
    <category term="学习" scheme="https://01petard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://01petard.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>My Java Guide - 数据库</title>
    <link href="https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2024-10-14T16:23:00.000Z</published>
    <updated>2024-10-14T16:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="——————-数据库——————"><a href="#——————-数据库——————" class="headerlink" title="——————-数据库——————-"></a><div align="center">——————-数据库——————-</div></h1><h1 id="MySQL支持的存储引擎及其区别"><a href="#MySQL支持的存储引擎及其区别" class="headerlink" title="MySQL支持的存储引擎及其区别"></a>MySQL支持的存储引擎及其区别</h1><p><strong>存储引擎</strong>就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式 。存储引擎是基于表的，而不是基于库的，所以存储引擎也可被称为表类型。</p><p>在MySQL中提供了很多的存储引擎，比较常见有<strong>InnoDB</strong>、<strong>MyISAM</strong>、<strong>Memory</strong></p><ul><li><code>InnoDB</code>：存储引擎是mysql5.5之后是默认的引擎，它支持事务、外键、表级锁和行级锁。DML操作遵循ACID模型，支持事务。有行级锁，提高并发访问性能。支持外键，保证数据的完整性和正确性。</li><li><code>MyISAM</code>：不支持事务、外键，只有表级锁，用的不多</li><li><code>Memory</code>：不支持事务、外键，只有表级锁，用的也不多，特点是能把数据存储在内存里</li></ul><table><thead><tr><th><strong>特性</strong></th><th><strong>InnoDB</strong></th><th><strong>MyISAM</strong></th><th><strong>Memory</strong></th></tr></thead><tbody><tr><td>事务安全</td><td><strong>支持</strong></td><td>不支持</td><td>不支持</td></tr><tr><td>锁机制</td><td><strong>表锁</strong>&#x2F;<strong>行锁</strong></td><td>表锁</td><td>表锁</td></tr><tr><td>外键</td><td><strong>支持</strong></td><td>不支持</td><td>不支持</td></tr></tbody></table><h1 id="PostgreSQL-的唯一存储引擎：Heap"><a href="#PostgreSQL-的唯一存储引擎：Heap" class="headerlink" title="PostgreSQL 的唯一存储引擎：Heap"></a>PostgreSQL 的唯一存储引擎：Heap</h1><p><strong>Heap 存储引擎</strong>是 PostgreSQL 的默认存储引擎，也是唯一内置的存储引擎。它具有以下特点：</p><ol><li><strong>事务支持</strong>：支持 ACID、MVCC，支持多种隔离级别，如读已提交（Read Committed）、可重复读（Repeatable Read）和序列化（Serializable）。</li><li><strong>索引支持</strong>：支持 B-Tree、Hash、GiST（通用搜索树）、SP-GiST（空间分区通用搜索树）、GIN（通用倒排索引）和 BRIN（块范围索引）。</li><li><strong>数据类型支持</strong>：支持自定义数据类型。支持整数、浮点数、字符串、日期时间、UUID、JSON、XML、数组、范围类型等。</li><li><strong>扩展性</strong>：支持插件和扩展，可以添加新的功能和模块。支持外部表（Foreign Tables），可以访问其他数据源的数据。</li><li><strong>备份和恢复</strong>：支持物理备份和逻辑备份。支持点-in-time 恢复（PITR）。</li><li><strong>性能优化</strong>：支持查询优化器，可以生成高效的查询计划。支持分区表，可以将大表分成多个小表，提高查询性能。</li></ol><p><strong>PostgreSQL 的扩展</strong>：虽然 PostgreSQL 只有一种默认的存储引擎，但它通过扩展机制支持其他存储层和功能。以下是一些常见的扩展：</p><ol><li><strong>TimescaleDB</strong>：<ul><li>一个专门为<strong>时间序列数据</strong>设计的 PostgreSQL 扩展。</li><li>支持高效的时间序列数据存储和查询。</li></ul></li><li><strong>Citus</strong>：<ul><li>一个用于<strong>水平扩展</strong> PostgreSQL 的扩展，支持分布式查询和数据分片。</li><li>适用于大数据和高并发场景。</li></ul></li><li><strong>PostGIS</strong>：<ul><li>一个用于<strong>地理空间数据</strong>的扩展，支持 GIS（地理信息系统）功能。</li><li>支持空间索引、空间操作和地理数据类型。</li></ul></li><li><strong>pg_stat_statements</strong>：<ul><li>一个用于<strong>收集和报告查询统计</strong>信息的扩展。</li><li>帮助优化查询性能和识别慢查询。</li></ul></li><li><strong>pg_partman</strong>：<ul><li>一个用于<strong>管理和维护分区表</strong>的扩展。</li><li>支持自动分区和维护分区表的生命周期。</li></ul></li></ol><h1 id="SQL语句的执行过程（MySQL）"><a href="#SQL语句的执行过程（MySQL）" class="headerlink" title="SQL语句的执行过程（MySQL）"></a>SQL语句的执行过程（MySQL）</h1><p>（参数映射、sql解析、执行和结果处理）</p><ul><li><strong>连接器：</strong> 身份认证和权限相关(登录 MySQL 的时候)。</li><li><strong>查询缓存：</strong> 执行查询语句的时候，会先查询缓存（MySQL 8.0 版本后移除，因为这个功能不太实用）。</li><li><strong>分析器：</strong> 没有命中缓存的话，SQL 语句就会经过分析器，分析器说白了就是要先看你的 SQL 语句要干嘛，再检查你的 SQL 语句语法是否正确。</li><li><strong>优化器：</strong> 按照 MySQL 认为最优的方案去执行。</li><li><strong>执行器：</strong> 执行语句，然后从存储引擎返回数据。</li></ul><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/mysql%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B.png" alt="查询语句执行流程" style="zoom:80%;" /><h1 id="终极SQL分析——Hikvision"><a href="#终极SQL分析——Hikvision" class="headerlink" title="终极SQL分析——Hikvision"></a>终极SQL分析——Hikvision</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> Sales_Summary <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">-- 计算每个产品类别在不同地区的总销售额，并为其分配排名</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        p.product_category <span class="keyword">AS</span> Product_Category,</span><br><span class="line">        s.region <span class="keyword">AS</span> Region,</span><br><span class="line">        <span class="built_in">SUM</span>(s.sale_amount) <span class="keyword">AS</span> Total_Sales_Region,</span><br><span class="line">        <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> p.product_category <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">SUM</span>(s.sale_amount) <span class="keyword">DESC</span>, s.region <span class="keyword">ASC</span>) <span class="keyword">AS</span> rn</span><br><span class="line">    <span class="keyword">FROM</span> products_info p</span><br><span class="line">    <span class="keyword">JOIN</span> sales_info s <span class="keyword">ON</span> p.product_id <span class="operator">=</span> s.product_id</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> p.product_category, s.region</span><br><span class="line">),</span><br><span class="line">Product_Summary <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">-- 计算每个产品类别的销售总额和不同产品ID的数量</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        p.product_category <span class="keyword">AS</span> Product_Category,</span><br><span class="line">        <span class="built_in">SUM</span>(s.sale_amount) <span class="keyword">AS</span> Total_Sales,</span><br><span class="line">        <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> s.product_id) <span class="keyword">AS</span> Number_of_Different_Product_IDs</span><br><span class="line">    <span class="keyword">FROM</span> products_info p</span><br><span class="line">    <span class="keyword">JOIN</span> sales_info s <span class="keyword">ON</span> p.product_id <span class="operator">=</span> s.product_id</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> p.product_category</span><br><span class="line">),</span><br><span class="line">Satisfaction_Averages <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">-- 计算每个产品类别的平均满意度</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        p.product_category <span class="keyword">AS</span> Product_Category,</span><br><span class="line">        ROUND(<span class="built_in">AVG</span>(c.satisfaction_score),<span class="number">2</span>) <span class="keyword">AS</span> Average_Satisfaction_Score</span><br><span class="line">    <span class="keyword">FROM</span> products_info p</span><br><span class="line">    <span class="keyword">JOIN</span> customer_satisfaction_info c <span class="keyword">ON</span> p.product_id <span class="operator">=</span> c.product_id</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> p.product_category</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    ps.Product_Category,</span><br><span class="line">    ps.Total_Sales,</span><br><span class="line">    ps.Number_of_Different_Product_IDs,</span><br><span class="line">    sa.Average_Satisfaction_Score,</span><br><span class="line">    ss.Region <span class="keyword">AS</span> Top_Sales_Region</span><br><span class="line"><span class="keyword">FROM</span> Product_Summary ps</span><br><span class="line"><span class="keyword">JOIN</span> Satisfaction_Averages sa <span class="keyword">ON</span> ps.Product_Category <span class="operator">=</span> sa.Product_Category</span><br><span class="line"><span class="keyword">JOIN</span> Sales_Summary ss <span class="keyword">ON</span> ps.Product_Category <span class="operator">=</span> ss.Product_Category <span class="keyword">AND</span> ss.rn <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ps.Product_Category <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p>这段 SQL 语句是一个较为复杂的查询，使用了多个公共表表达式（Common Table Expressions，简称 CTE），主要用于汇总和分析不同产品类别的销售数据、产品数量以及客户满意度，并找出每个产品类别中销售额最高的地区。下面是对这段 SQL 的详细分析：</p><h2 id="SQL-语句分析"><a href="#SQL-语句分析" class="headerlink" title="SQL 语句分析"></a>SQL 语句分析</h2><p>这段 SQL 使用 CTE 可以使查询语句更加简洁、清晰，并且提高了可维护性和可读性。</p><p><strong>1. <code>Sales_Summary</code> CTE</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> Sales_Summary <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">-- 计算每个产品类别在不同地区的总销售额，并为其分配排名</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        p.product_category <span class="keyword">AS</span> Product_Category,</span><br><span class="line">        s.region <span class="keyword">AS</span> Region,</span><br><span class="line">        <span class="built_in">SUM</span>(s.sale_amount) <span class="keyword">AS</span> Total_Sales_Region,</span><br><span class="line">        <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> p.product_category <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">SUM</span>(s.sale_amount) <span class="keyword">DESC</span>, s.region <span class="keyword">ASC</span>) <span class="keyword">AS</span> rn</span><br><span class="line">    <span class="keyword">FROM</span> products_info p</span><br><span class="line">    <span class="keyword">JOIN</span> sales_info s <span class="keyword">ON</span> p.product_id <span class="operator">=</span> s.product_id</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> p.product_category, s.region</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><strong>作用</strong>：计算每个产品类别在不同地区的总销售额，并为每个地区分配一个排名。</li><li><strong>字段说明</strong>：<ul><li><code>Product_Category</code>：产品类别。</li><li><code>Region</code>：地区。</li><li><code>Total_Sales_Region</code>：该地区内的总销售额。</li><li><code>rn</code>：在相同产品类别下，按总销售额降序排列的地区排名。</li></ul></li></ul><p><strong>2. <code>Product_Summary</code> CTE</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Product_Summary <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">-- 计算每个产品类别的销售总额和不同产品ID的数量</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        p.product_category <span class="keyword">AS</span> Product_Category,</span><br><span class="line">        <span class="built_in">SUM</span>(s.sale_amount) <span class="keyword">AS</span> Total_Sales,</span><br><span class="line">        <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> s.product_id) <span class="keyword">AS</span> Number_of_Different_Product_IDs</span><br><span class="line">    <span class="keyword">FROM</span> products_info p</span><br><span class="line">    <span class="keyword">JOIN</span> sales_info s <span class="keyword">ON</span> p.product_id <span class="operator">=</span> s.product_id</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> p.product_category</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><strong>作用</strong>：计算每个产品类别的销售总额和不同产品的数量。</li><li><strong>字段说明</strong>：<ul><li><code>Product_Category</code>：产品类别。</li><li><code>Total_Sales</code>：该产品类别的总销售额。</li><li><code>Number_of_Different_Product_IDs</code>：该产品类别下不同产品的数量。</li></ul></li></ul><p><strong>3. <code>Satisfaction_Averages</code> CTE</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Satisfaction_Averages <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">-- 计算每个产品类别的平均满意度</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        p.product_category <span class="keyword">AS</span> Product_Category,</span><br><span class="line">        ROUND(<span class="built_in">AVG</span>(c.satisfaction_score),<span class="number">2</span>) <span class="keyword">AS</span> Average_Satisfaction_Score</span><br><span class="line">    <span class="keyword">FROM</span> products_info p</span><br><span class="line">    <span class="keyword">JOIN</span> customer_satisfaction_info c <span class="keyword">ON</span> p.product_id <span class="operator">=</span> c.product_id</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> p.product_category</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><strong>作用</strong>：计算每个产品类别的平均客户满意度。</li><li><strong>字段说明</strong>：<ul><li><code>Product_Category</code>：产品类别。</li><li><code>Average_Satisfaction_Score</code>：该产品类别的平均满意度得分（保留两位小数）。</li></ul></li></ul><p><strong>4. 主查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    ps.Product_Category,</span><br><span class="line">    ps.Total_Sales,</span><br><span class="line">    ps.Number_of_Different_Product_IDs,</span><br><span class="line">    sa.Average_Satisfaction_Score,</span><br><span class="line">    ss.Region <span class="keyword">AS</span> Top_Sales_Region</span><br><span class="line"><span class="keyword">FROM</span> Product_Summary ps</span><br><span class="line"><span class="keyword">JOIN</span> Satisfaction_Averages sa <span class="keyword">ON</span> ps.Product_Category <span class="operator">=</span> sa.Product_Category</span><br><span class="line"><span class="keyword">JOIN</span> Sales_Summary ss <span class="keyword">ON</span> ps.Product_Category <span class="operator">=</span> ss.Product_Category <span class="keyword">AND</span> ss.rn <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ps.Product_Category <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>作用</strong>：最终查询结果，展示每个产品类别的总销售额、不同产品的数量、平均满意度以及销售额最高的地区。</li><li><strong>字段说明</strong>：<ul><li><code>ps.Product_Category</code>：产品类别。</li><li><code>ps.Total_Sales</code>：该产品类别的总销售额。</li><li><code>ps.Number_of_Different_Product_IDs</code>：该产品类别下不同产品的数量。</li><li><code>sa.Average_Satisfaction_Score</code>：该产品类别的平均满意度得分。</li><li><code>ss.Region AS Top_Sales_Region</code>：销售额最高的地区。</li></ul></li></ul><h2 id="WITH-AS-用法解释"><a href="#WITH-AS-用法解释" class="headerlink" title="WITH ... AS 用法解释"></a><code>WITH ... AS</code> 用法解释</h2><p><code>WITH ... AS</code> 是 SQL 中的一个构造，用于定义公共表表达式（CTE）。CTE 是一个临时的结果集，只存在于包含它的查询中。它可以简化复杂的查询语句，使其更易读和维护。</p><p><strong>优点</strong></p><ol><li><strong>提高可读性</strong>：通过将复杂的查询拆分为多个CTE，可以使查询更加模块化和清晰。</li><li><strong>减少重复</strong>：可以多次引用同一个CTE，避免重复编写相同的子查询。</li><li><strong>提高性能</strong>：CTE 只执行一次，并且只在主查询需要时才执行，可以减少不必要的计算。</li></ol><p><strong>语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> CTE_Name (Column1, Column2, ...)</span><br><span class="line"><span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> ...</span><br><span class="line">    <span class="keyword">FROM</span> ...</span><br><span class="line">    <span class="keyword">WHERE</span> ...</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">FROM</span> CTE_Name</span><br><span class="line"><span class="keyword">JOIN</span> ...</span><br><span class="line"><span class="keyword">ON</span> ...</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="SQL优化方案"><a href="#SQL优化方案" class="headerlink" title="SQL优化方案"></a>SQL优化方案</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>表的设计优化</p><blockquote><p>根据实际情况选择合适的数值类型（tinyint、int、bigint）</p><p>根据实际情况选择合适的字符串类型（char、varchar）</p></blockquote></li><li><p>索引优化</p><blockquote><p>对数据量打的表创建索引</p><p>对常作为查询条件、排序、分组的字段创建索引</p><p>尽量创建联合索引</p><p>控制索引的数量</p><p>……</p></blockquote></li><li><p>SQL语句优化</p><blockquote><p>合理编写SQL语句（避免直接使用select *、用union all代替union、能用inner join 就不用left join、right join、避免在where子句中对字段进行表达式操作）</p><p>避免SQL语句造成索引失效的写法（使用函数或表达式处理索引列、隐式类型转换、使用不等于（&lt;&gt; 或 !&#x3D;）操作……）</p></blockquote></li><li><p>主从复制、读写分离</p></li><li><p>分库分表</p></li></ul><h2 id="定位慢查询的方法"><a href="#定位慢查询的方法" class="headerlink" title="定位慢查询的方法"></a>定位慢查询的方法</h2><blockquote><p>SQL执行很慢，可能有一下原因：聚合查询、多表查询、表数据量过大查询、深度分页查询</p></blockquote><p>需要在MySQL的配置文件（&#x2F;etc&#x2F;my.cnf）中配置如下信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启MySQL慢日志查询开关</span></span><br><span class="line"><span class="string">slow_query_log=1</span></span><br><span class="line"><span class="comment"># 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span></span><br><span class="line"><span class="string">long_query_time=2</span></span><br></pre></td></tr></table></figure><p>配置完毕之后，通过以下指令重新启动MySQL服务器进行测试，查看慢日志文件中记录的信息 <code>/var/lib/mysql/localhost-slow.log</code></p><p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404071534117.png" alt="image-20240407153408047"></p><p>当然，也有相关的工具：</p><blockquote><p>调试工具：Arthas<br>运维工具：Prometheus 、Skywalking</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404071534566.png" alt="image-20240407153456512"></p><h2 id="分析SQL语句"><a href="#分析SQL语句" class="headerlink" title="分析SQL语句"></a>分析SQL语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span> 直接在<span class="keyword">select</span>语句之前加上关键字 explain <span class="operator">/</span> <span class="keyword">desc</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件 ;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404071537829.png" alt="image-20240407153708794" style="zoom: 67%;" /><p>然后需要关注以下字段：</p><ul><li><p><strong>type：当前sql的连接的类型</strong>，性能由好到差为NULL、system、const、eq_ref、ref、range、 <strong>index</strong>、<strong>all</strong></p><blockquote><p>system：查询系统中的表<br>const：根据主键查询<br>eq_ref：主键索引查询或唯一索引查询<br>ref：索引查询<br>range：范围查询<br><strong>index：索引树扫描</strong><br><strong>all：全盘扫描</strong></p></blockquote></li><li><p><strong><code>possible_key</code>：当前sql可能会使用到的索引</strong></p></li><li><p><strong><code>key</code>：当前sql实际命中的索引</strong></p></li><li><p><code>key_len </code>：索引占用的大小</p></li><li><p><code>Extra</code>：额外的优化建议</p><blockquote><p>Using where; Using Index：查找使用了索引，需要的数据都在索引列中能找到，不需要回表查询数据<br>Using index condition：查找使用了索引，但是需要回表查询数据</p></blockquote></li></ul><h2 id="例：给-JSON-类型字段添加虚拟列"><a href="#例：给-JSON-类型字段添加虚拟列" class="headerlink" title="*例：给 JSON 类型字段添加虚拟列"></a>*例：给 JSON 类型字段添加虚拟列</h2><p>eg. 以一张用户信息表为例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `stu_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `stu_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;名字&#x27;</span>,</span><br><span class="line">  `extra` json <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line"><span class="comment">--  `v_request_id` varchar(32) GENERATED ALWAYS AS (json_unquote(json_extract(`extra`,&#x27;$.request_id&#x27;))) VIRTUAL,</span></span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`stu_id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line"><span class="comment">--  KEY `idx_v_requiest_id` (`v_request_id`)</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">7</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><p>查询 json 类型的字段会走全表索引，耗时比较长，因此这时可以用<strong>虚拟列</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student </span><br><span class="line">( stu_name, extra ) </span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">( &quot;张三&quot;,<span class="string">&#x27;&#123; &quot;age&quot; : 18, &quot;gender&quot; : &quot;男&quot;, &quot;request_id&quot;:&quot;123&quot; &#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> v_request_id <span class="operator">=</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> v_request_id <span class="operator">=</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><p><strong>创建虚拟列及其索引</strong>，虚拟列的值会与 json字段中的指定的键值对匹配更新，如果没有就为null，非常省心</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student </span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> `v_request_id` <span class="type">VARCHAR</span>(<span class="number">32</span>) </span><br><span class="line">GENERATED ALWAYS <span class="keyword">AS</span> (JSON_UNQUOTE(JSON_EXTRACT(`extra`, <span class="string">&#x27;$.request_id&#x27;</span>))) VIRTUAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_v_requiest_id <span class="keyword">ON</span> test_json (v_request_id)</span><br></pre></td></tr></table></figure><p>再分析sql性能，发现已经走虚拟列索引了（如果没走索引还是走全表，可能是数据量太少了）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> v_request_id <span class="operator">=</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> v_request_id <span class="operator">=</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><h1 id="底层原理：order-by-的实现原理（MySQL-5-7）"><a href="#底层原理：order-by-的实现原理（MySQL-5-7）" class="headerlink" title="底层原理：order by 的实现原理（MySQL 5.7）"></a>底层原理：order by 的实现原理（MySQL 5.7）</h1><p>这涉及到两种排序规则：</p><ol><li>全字段排序（有主键的情况走这种，几乎所有情况都是这样的）</li><li>row id排序（没有主键的情况走这种，不太常见）</li></ol><p>假设有以下SQL语句，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,age,city </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span> </span><br><span class="line"><span class="keyword">where</span> city <span class="operator">=</span> <span class="string">&#x27;深圳&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age </span><br><span class="line">LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h2 id="全字段排序加载过程"><a href="#全字段排序加载过程" class="headerlink" title="全字段排序加载过程"></a>全字段排序加载过程</h2><p>最普遍的情况，有主键的情况下采用全字段排序</p><ol><li>根据索引从<strong>聚集索引树</strong>中找到对应的ID；</li><li>在聚集索引树找到对应的整行数据；</li><li>将<strong>查询字段</strong>（很多人会用<code>*</code>，导致内存消耗很大）和<strong>排序字段</strong>加载到sort buff；</li><li>在sort buff中根据关键字进行排序；</li><li>取出前10条数据，返回结果集。</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409131555048.png" alt="image-20240913155516920" style="zoom: 50%;" /><h2 id="row-id排序加载过程"><a href="#row-id排序加载过程" class="headerlink" title="row id排序加载过程"></a>row id排序加载过程</h2><p>row id排序比全字段排序多了一次回表，但是比全排序占用更少的内存</p><ol><li>根据索引从<strong>非聚集索引树</strong>中找到对应的ID；</li><li>在聚集索引树找到对应的整行数据；</li><li>将<strong>数据的主键</strong>（省内存的原因）和<strong>排序字段</strong>加载到sort buff；</li><li>在sort buff中根据关键字进行排序；</li><li>取出前10条数据，再去进行一次回表查询得到整行数据；</li><li>根据查询的字段值，返回结果集。</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409131554966.png" alt="image-20240913155436825" style="zoom:55%;" /><h2 id="拓展：sort-buffer"><a href="#拓展：sort-buffer" class="headerlink" title="拓展：sort buffer"></a>拓展：sort buffer</h2><h3 id="sort-buffer的作用"><a href="#sort-buffer的作用" class="headerlink" title="sort buffer的作用"></a>sort buffer的作用</h3><p><code>sort buffer</code> 指的是用于排序操作的内存缓冲区。当执行排序操作时，例如使用 <code>ORDER BY</code> 子句对结果集进行排序，数据库可能会使用一个或多个排序缓冲区来存储数据。</p><ol><li><strong>减少I&#x2F;O操作</strong>：通过在内存中暂存要排序的数据，可以减少从磁盘读取数据的次数，从而提高排序速度。</li><li><strong>提高排序效率</strong>：在内存中进行排序通常比在磁盘上进行排序更高效。因此，使用 <code>sort buffer</code> 可以帮助加快排序过程。</li></ol><h3 id="sort-buffer的工作原理"><a href="#sort-buffer的工作原理" class="headerlink" title="sort buffer的工作原理"></a>sort buffer的工作原理</h3><ul><li><strong>数据加载</strong>：当数据库需要对查询结果进行排序时，它首先会将部分数据加载到 <code>sort buffer</code> 中。</li><li><strong>排序操作</strong>：数据加载完成后，数据库会在 <code>sort buffer</code> 内执行排序算法。如果数据量超过了 <code>sort buffer</code> 的容量，则可能需要将部分数据写入临时文件，并进行外部排序。</li><li><strong>结果输出</strong>；排序完成后，数据库会将排好序的数据返回给客户端或用于进一步处理。</li></ul><h3 id="如何配置-sort-buffer"><a href="#如何配置-sort-buffer" class="headerlink" title="如何配置 sort buffer"></a>如何配置 sort buffer</h3><p>在MySQL中，<code>sort_buffer_size</code>是一个全局或会话级别的系统变量，用于控制每个客户端连接可用的 <code>sort buffer</code> 的大小。</p><p>可以通过以下命令查看或修改该参数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;sort_buffer_size&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> SESSION sort_buffer_size <span class="operator">=</span> <span class="keyword">value</span>;  <span class="comment">-- `value` 是以字节为单位的大小</span></span><br></pre></td></tr></table></figure><p>调整 <code>sort_buffer_size</code> 可以影响排序操作的性能。如果设置得过小，可能导致频繁地将数据写入磁盘，从而降低性能；如果设置得过大，则可能消耗过多内存资源。</p><h1 id="对-last-updated-字段意义的思考"><a href="#对-last-updated-字段意义的思考" class="headerlink" title="对 last_updated 字段意义的思考"></a>对 <code>last_updated</code> 字段意义的思考</h1><ol><li><strong>数据同步和一致性。</strong>在主从同步中，从数据库同步主数据库时，通过对比本地的 <code>last_updated</code> 和主节点的 <code>last_updated</code>，可以知道需要同步哪些数据</li><li><strong>审计和追踪。</strong><code>last_updated</code> 字段可以帮助定位最后一次更新的时间，进而确定变动的来源和责任人。</li><li><strong>并发控制（乐观锁）</strong>。不必单独设置一个字段 <code>version</code>，但需要手动维护<code>last_updated</code></li><li><strong>数据备份和恢复</strong>。在数据备份和恢复过程中，<code>last_updated</code> 字段可以用来判断哪些数据是最新的，哪些数据需要恢复。特别是在系统发生故障或数据丢失时，备份数据可能并非实时更新，因此需要依赖last_updated字段来进行增量恢复。</li><li><strong>数据预热</strong>。在处理定期批量更新操作时，系统只需要查询那些 <code>last_updated</code> 字段在某个时间范围内的数据，而不必每次都处理所有数据，减少了不必要的查询负担。</li></ol><h1 id="———-数据库-索引（MySQL）———"><a href="#———-数据库-索引（MySQL）———" class="headerlink" title="———-数据库-索引（MySQL）———-"></a><div align="center">———-数据库-索引（MySQL）———-</div></h1><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="索引创建原则"><a href="#索引创建原则" class="headerlink" title="索引创建原则"></a>索引创建原则</h2><ol><li><strong>数据量较大，且查询比较频繁的表</strong></li><li><strong>常作为查询条件、排序、分组的字段</strong></li><li>字段内容区分度高</li><li>内容较长，使用前缀索引</li><li><strong>尽量创建联合索引</strong></li><li><strong>控制索引的数量</strong></li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它</li></ol><h2 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h2><ol><li>违反最左前缀法则</li><li>范围查询右边的列</li><li>在索引列上进行运算操作</li><li>字符串不加单引号</li><li>以%开头的Like模糊查询</li></ol><h2 id="索引不一定有效的原因"><a href="#索引不一定有效的原因" class="headerlink" title="索引不一定有效的原因"></a>索引不一定有效的原因</h2><ol><li><strong>选择性差</strong>：如果索引列包含大量重复值（即选择性差），则查询优化器可能会决定全表扫描比使用索引更高效。</li><li><strong>索引列少</strong>：如果查询涉及到多个条件，而索引只覆盖了部分条件，则可能不会被使用。</li><li><strong>索引列顺序不当</strong>：对于复合索引，如果最左边的列不是查询中最常过滤的列，则索引可能不会被有效地利用。</li><li><strong>数据范围广</strong>：如果查询返回的数据行接近整个表的大小，那么索引可能没有帮助，因为查询优化器可能会认为全表扫描更优。</li><li><strong>未使用合适的访问类型</strong>：如使用 <code>LIKE</code> 开头字符匹配或 <code>IN</code> 子句等，可能导致 MySQL 无法使用索引。</li><li><strong>统计信息过时</strong>：MySQL 使用统计信息来决定是否使用索引，如果数据分布发生变化，需要更新统计信息。</li></ol><h2 id="B-树索引"><a href="#B-树索引" class="headerlink" title="B+树索引"></a>B+树索引</h2><blockquote><p>除了B+树类型的索引，还有全表索引、哈希索引……只是不太常用</p></blockquote><p><strong>索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构</strong>。</p><p><strong>特点</strong>：</p><ul><li>索引是帮助MySQL高效获取数据的数据结构（有序）</li><li>提高数据检索的效率，降低数据库的IO成本（不需要全表扫描）</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗</li></ul><p><strong>优点</strong>：</p><ul><li>阶数更多，路径更短</li><li>磁盘读写代价B+树更低，非叶子节点只存储指针，叶子阶段存储数据</li><li>B+树便于扫库和区间查询，叶子节点是一个双向链表</li><li>使用索引可以大大加快数据的检索速度（大大减少检索的数据量）, 这也是创建索引的最主要的原因。</li><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li></ul><p><strong>缺点</strong>：</p><ul><li>创建、维护索引或对表进行操作需要重构索引。</li><li>索引需要使用物理文件存储，也会耗费一定空间。</li></ul><h2 id="B树与B-树的区别是什么？"><a href="#B树与B-树的区别是什么？" class="headerlink" title="B树与B+树的区别是什么？"></a>B树与B+树的区别是什么？</h2><blockquote><p>B+树比B树查找效率更高的原因：</p><ol><li>B+树的所有的数据都会出现在叶子节点，所以查找时首先只需考虑如何找到索引值，而不需要比较值；</li><li>B+树叶子节点是一个有序的双向链表，适合进行范围区间查询。</li></ol></blockquote><ul><li>B树</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404071548218.png" alt="image-20240407154800153" style="zoom: 60%;" /><ul><li>B+树</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404071548743.png" alt="image-20240407154859696" style="zoom: 80%;" /><h2 id="聚索引-amp-非聚集索引"><a href="#聚索引-amp-非聚集索引" class="headerlink" title="聚索引 &amp; 非聚集索引"></a>聚索引 &amp; 非聚集索引</h2><p><code>聚集索引</code>：非叶子节点存储主键id，叶子节点存放主键id和整行数据。一张表有且只有一个聚集索引。</p><p><code>非聚集索引</code>：非叶子节点存放索引字段，叶子节点存放索引字段和主键id。一张表可以有多个非聚集索引。</p><p>聚集索引选取规则：</p><ul><li><p>如果存在主键，主键索引就是聚集索引。</p></li><li><p>如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。</p></li><li><p>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。</p></li><li><p><code>聚簇索引</code> 和 <code>非聚簇索引</code> 有的时候又称为 <code>主索引树</code> 和  <code>辅助索引树</code></p></li></ul><h2 id="回表查询"><a href="#回表查询" class="headerlink" title="回表查询"></a>回表查询</h2><p><code>回表查询</code>：通过二级索引找到对应的主键值，到聚集索引中查找整行数据，这个过程就是回表。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404071555382.png" alt="image-20240407155539271" style="zoom: 50%;" /><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><p><code>覆盖索引</code>：是指二级索引中包含了查询所需的所有字段，从而使查询可以仅通过访问二级索引而不需要访问实际的表数据（主键索引）。</p><ul><li>使用id查询，直接走聚集索引查询，一次索引扫描，直接返回数据，性能高。</li><li>如果返回的列中没有创建索引，有可能会触发回表查询，尽量避免使用<code>select *</code></li></ul><h2 id="超大分页处理方案"><a href="#超大分页处理方案" class="headerlink" title="超大分页处理方案"></a>超大分页处理方案</h2><p>在数据量比较大时，limit分页查询，需要对数据进行排序，效率低，通过创建<code>覆盖索引</code>能够比较好地提高性能，可以通过<strong>覆盖索引+子查询</strong>形式进行优化。</p><blockquote><p>例如，该查询语句可以这样优化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">9000000</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> u,</span><br><span class="line">(<span class="keyword">select</span> id <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">9000000</span>,<span class="number">10</span>) a </span><br><span class="line"><span class="keyword">where</span> u.id <span class="operator">=</span> a.id;</span><br></pre></td></tr></table></figure><p>解释：采用子查询通过主键索引查询到了第9000000行的数据，接着顺序读取10行得到10个id，然后将这10行id与外部sql做一个自连接，通过主键索引树查询直接得到了第9000000后的10行数据。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409151350492.png" alt="image-20240915135034179" style="zoom:50%;" /><h1 id="索引的维护"><a href="#索引的维护" class="headerlink" title="索引的维护"></a>索引的维护</h1><h2 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h2><p>首先通过两个类实现B+树非叶子节点和叶子结点：</p><ol><li><p>非叶子节点类<code>InternalNode</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;AbstractTreeNode&lt;K, V&gt;&gt; childrenNodes;  <span class="comment">// 孩子节点</span></span><br></pre></td></tr></table></figure></li><li><p>叶子节点类<code>LeafNode</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;K&gt; keys;         <span class="comment">// 叶子节点中的键，即主键索引值</span></span><br><span class="line"><span class="keyword">private</span> List&lt;V&gt; values;       <span class="comment">// 叶子节点中的值，即整行数据</span></span><br><span class="line"><span class="keyword">private</span> LeafNode&lt;K, V&gt; next;  <span class="comment">// 下一个叶子节点的指针</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="B-树的增删查改操作"><a href="#B-树的增删查改操作" class="headerlink" title="B+树的增删查改操作"></a>B+树的增删查改操作</h2><ul><li><p>**查 (Search)**：从根节点开始二分查找，B+树中使用二分查找可能在一个节点中找不到对应的结点，所以需要根据键值去子节点的孩子节点中遍历查找，直到找到叶子节点中对应的key和整行数据。</p><img src="https://pic.code-nav.cn/mianshiya/question_picture/1772087337535152129/BrfHAAlY_image_mianshiya.png" alt="img" style="zoom: 50%;" /></li><li><p>**改 (Update)**：先去查询，如果键已存在，更新其值；如果键不存在，则修改失败。</p></li><li><p>**删 (Delete)**：先去查询，进行删除，可以用<code>逻辑删除</code>或<code>删除-合并</code>：</p><ul><li><code>逻辑删除</code>：只清空整行记录，不清除键，保持B+树的形状。</li><li><code>删除-合并</code>：删除后如果节点元素过少，需要进行合并。</li></ul></li><li><p>**增 (Insert)**：先去查询，查找插入位置，插入后判断是否需要分裂。分裂算法：new一个新的叶子节点，将当前叶子节点一半的键和键对应的值移动到新的叶子节点，然后将新的叶子节点插入到原本的叶子节点链表中。之后更新父节点的索引，将新的叶子节点中最小 的 key 传递给父节点，父节点插入这个新的 key 作为索引。如果父节点也超出了最大容量，同样会进行分裂并向上传递。当一个非叶子节点分裂时，都需要将分裂产生的新的 key 上移到父节点。如果父节点也满了，继续分裂并将 <code>key</code> 递归上传。</p></li></ul><h2 id="主键索引的维护"><a href="#主键索引的维护" class="headerlink" title="主键索引的维护"></a>主键索引的维护</h2><p>例如在执行下面这句话时：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> id<span class="operator">=</span>id<span class="operator">+</span><span class="number">1</span> <span class="keyword">where</span> age<span class="operator">=</span><span class="number">18</span>;</span><br></pre></td></tr></table></figure><p>数据库会从 <code>id</code> 索引找到对应的数据行，然后更新 <code>id</code> 值。对于主键索引来说，更新主键值可能导致数据页移动，因为主键值是数据页的物理位置标识。</p><h2 id="非主键索引的维护"><a href="#非主键索引的维护" class="headerlink" title="非主键索引的维护"></a>非主键索引的维护</h2><p>非聚集索引的叶子节点存储了指向实际数据行的指针，如果修改了索引列的值，那么非聚集索引对应的叶子节点也会相应更新。</p><p>例如在执行下面这句话时：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> money<span class="operator">=</span><span class="number">1000</span> <span class="keyword">where</span> age<span class="operator">=</span><span class="number">18</span>;</span><br></pre></td></tr></table></figure><ol><li>根据 <code>age</code> 主键索引去查询符合条件的的记录，对找到的行上排他锁 (X lock)，保证并发事务的安全性和一致性，避免脏读、不可重复读等问题；</li><li>对找到的行进行更新操作，去 <code>money</code> 的非主键索引树修改 <code>money</code> 的数据。数据库会先删除原来的数据，然后按序将之前修改删除的索引结点插入在某个叶子结点后面；</li><li>更新完成后，会释放所持有的锁，并提交事务。</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409201355831.png" alt="image-20240920135558697" style="zoom:60%;" /><h1 id="———-数据库-事务（InnoDB）———"><a href="#———-数据库-事务（InnoDB）———" class="headerlink" title="———-数据库-事务（InnoDB）———-"></a><div align="center">———-数据库-事务（InnoDB）———-</div></h1><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h2><p>表级锁是最粗粒度的锁，会对<strong>整个表</strong>进行锁定，导致并发性能较差。MyISAM 支持以下两种类型的锁：</p><ol><li><strong>读锁（READ LOCK）</strong>：当 SELECT 语句执行时，会自动获得读锁，此时其他事务可以读取数据，但不能修改数据。</li><li><strong>写锁（WRITE LOCK）</strong>：当 INSERT、UPDATE 或 DELETE 语句执行时，会自动获得写锁，此时其他事务既不能读也不能写。</li></ol><p>由于 MyISAM 已经不再推荐使用，并且在新版本的 MySQL 中逐渐被淘汰，因此表级锁的使用也逐渐减少。</p><h2 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h2><p>行级锁对表中的<strong>行</strong>进行锁定，而不是整个表，这样可以大大提高并发性能。InnoDB 支持以下几种类型的锁：</p><ol><li><strong>共享锁（Shared Locks, S-Locks）</strong>：当 SELECT 语句带有 FOR SHARE 或者事务处于可重复读隔离级别时，会请求共享锁。共享锁允许其他事务读取数据，但阻止其他事务修改同一行数据。</li><li><strong>排他锁（Exclusive Locks, X-Locks）</strong>：当事务需要写入数据时，会请求排他锁。排他锁不允许其他事务读取或修改同一行数据。</li></ol><h2 id="其他类型的锁"><a href="#其他类型的锁" class="headerlink" title="其他类型的锁"></a><em>其他类型的锁</em></h2><p><em>除了上述的锁类型外，InnoDB 还有一些特殊的锁机制：</em></p><ol><li><em><strong>意向锁（Intention Locks）</strong>：这是一种元锁，它并不锁住具体的行，而是表明事务打算对表中的行加锁。例如，意向共享锁（IS）表明事务打算对某行加共享锁，意向排他锁（IX）表明事务打算对某行加排他锁。</em></li><li><em><strong>间隙锁（Gap Locks）</strong>：间隙锁锁定的是索引项之间的“间隙”，防止其他事务插入新的行到这个间隙中。在可重复读RR隔离级别下，InnoDB 默认会使用间隙锁。</em></li><li><em><strong>Next-Key Locks</strong>：Next-Key 锁是 InnoDB 默认使用的锁类型，它是共享锁或排他锁与间隙锁的组合。它不仅锁住索引项本身，还会锁住索引项之间的间隙，以防止幻读现象。</em></li></ol><h2 id="死锁检测的基本原理"><a href="#死锁检测的基本原理" class="headerlink" title="死锁检测的基本原理"></a>死锁检测的基本原理</h2><ol><li><strong>定时检测</strong>：使用定时检测。如果发现<strong>等待队列</strong>（Wait Queue）增长到一定长度时，就会触发一次死锁检测。</li><li><strong>图算法</strong>：使用图算法。它构建了一个<strong>等待图</strong>（Wait-for Graph），在等待图中，<strong>节点代表事务，边表示事务间的等待关系</strong>。如果有环路（Cycle）存在，那么就表示发生了死锁。</li></ol><h2 id="死锁解决机制"><a href="#死锁解决机制" class="headerlink" title="死锁解决机制"></a>死锁解决机制</h2><p>一旦检测到死锁，InnoDB 就会采取措施来解决它。具体做法如下：</p><ol><li><strong>选择牺牲者</strong>：当检测到死锁时，InnoDB 会选择一个或多个事务作为“牺牲者”，这些事务将被回滚，以解除死锁。</li><li><strong>选择标准</strong>：InnoDB 根据一定的标准来选择牺牲者。一般情况下，InnoDB 会选取一个最小的事务作为牺牲者。这个最小事务通常是基于事务的开始时间、事务的大小（即所持有的锁的数量）等因素来决定的。</li><li><strong>通知用户</strong>：InnoDB 在回滚了某个事务后，会生成一条错误信息（如 Error 1213 Deadlock found when trying to get lock），并通过客户端 API 返回给应用程序。应用程序可以根据这个错误信息来进行相应的处理。</li></ol><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="事务的ACID特性？事务的并发解决方案？"><a href="#事务的ACID特性？事务的并发解决方案？" class="headerlink" title="事务的ACID特性？事务的并发解决方案？"></a>事务的ACID特性？事务的并发解决方案？</h2><ul><li><strong>事务的特性</strong>：<ul><li>原子性（<strong>A</strong>tomicity）：<strong>事务</strong>是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li><strong>一致性</strong>（<strong>C</strong>onsistency）：<strong>事务</strong>完成时，必须使所有的数据都保持一致状态。</li><li><strong>隔离性</strong>（<strong>I</strong>solation）：保证<strong>事务</strong>在不受外部并发操作影响的独立环境下运行。</li><li>持久性（<strong>D</strong>urability）：<strong>事务</strong>一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul></li><li><strong>事务并发的问题</strong>：</li></ul><table><thead><tr><th align="center"><strong>问题</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">脏读</td><td align="center">一个事务读到另外一个事务还没有提交的数据。</td></tr><tr><td align="center">不可重复读</td><td align="center">并发更新时，另一个事务前后查询相同数据时的数据不符合预期。</td></tr><tr><td align="center">幻读</td><td align="center">并发新增、删除这种会产生数量变化的操作时，另一个事务前后查询相同数据时的不符合预期</td></tr></tbody></table><ul><li><strong>事务的并发解决方案</strong>：对事务进行隔离</li></ul><table><thead><tr><th align="left">隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="left"><strong>R</strong>ead <strong>U</strong>ncommitted 读未提交：可以直接读取到其他事务未提交的事务</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="left"><strong>R</strong>ead <strong>C</strong>ommitted 读已提交：要等待其他事务提交后才能读取</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="left"><strong>R</strong>ead <strong>R</strong>epeatable 可重复读 (默认) ：通过MVCC机制确保一个事务内多次执行相同的查询会得到相同的结果</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="left">Serializable 串行化：加入读锁，阻塞式处理事务</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr></tbody></table><h2 id="长事务可能会导致哪些问题？"><a href="#长事务可能会导致哪些问题？" class="headerlink" title="长事务可能会导致哪些问题？"></a>长事务可能会导致哪些问题？</h2><p>会有<strong>性能问题</strong>，具体如下：</p><ol><li><strong>锁定资源</strong>：可能会占用大量的锁资源。</li><li><strong>死锁（Deadlock）</strong>：存在两个或更多事务互相等待对方释放资源。</li><li><strong>内存消耗</strong>：长事务占用较多的内存资源，特别是回滚段（undo segment）的空间，从而影响系统的性能。</li><li><strong>日志文件增长</strong>：长事务会导致日志文件快速增长，这需要更多的磁盘空间，并且在恢复时需要更多的时间。</li></ol><h2 id="底层原理：TRANSACTION语法的意义"><a href="#底层原理：TRANSACTION语法的意义" class="headerlink" title="底层原理：TRANSACTION语法的意义"></a>底层原理：TRANSACTION语法的意义</h2><h2 id="START-TRANSACTION"><a href="#START-TRANSACTION" class="headerlink" title="START TRANSACTION;"></a>START TRANSACTION;</h2><p>当执行 <code>START TRANSACTION;</code> 命令时，MySQL 将当前的会话设置为非自动提交模式。这意味着任何随后的 SQL 操作都不会自动持久化到磁盘上，而是保存在事务的内存缓冲区中。在这个阶段，数据库会记录每一步操作的日志到redo log和undo log中，以备提交或回滚。</p><p><strong>底层原理：</strong></p><ol><li><strong>事务开启</strong>：创建一个事务记录，并<strong>初始化事务的状态为活动状态</strong>。</li><li><strong>非自动提交模式</strong>：**设置会话的自动提交标志为 <code>false</code>**，这样后续的 SQL 操作不会立即生效。</li><li><strong>记录日志</strong>：对于每一个 SQL 操作，都会<strong>记录对应的重做日志（Redo Log）</strong>，用于事务提交时的数据恢复。</li></ol><h2 id="COMMIT"><a href="#COMMIT" class="headerlink" title="COMMIT;"></a>COMMIT;</h2><p>执行 <code>COMMIT;</code> 命令表示事务已经成功完成，所有的事务操作都应该被永久地保存到数据库中。此时，数据库将确保所有事务中的更改都已正确地应用，并且任何后续的操作都不能影响到这些更改。</p><p><strong>底层原理：</strong></p><ol><li><strong>事务提交</strong>：事务进入提交阶段，数据库系统会将事务中的所有更改标记为永久有效。</li><li><strong>写入磁盘</strong>：<strong>将事务期间记录的所有重做日志（redo Log）写入到磁盘上的日志文件中</strong>，确保即使在系统崩溃的情况下也能恢复数据。</li><li><strong>释放资源</strong>：事务完成后，释放事务期间占用的资源，如锁定的行或表等。</li><li><strong>通知监听器</strong>：事务提交后，可能会通知正在等待该事务完成的其他事务或监听器。</li></ol><h2 id="ROLLBACK"><a href="#ROLLBACK" class="headerlink" title="ROLLBACK;"></a>ROLLBACK;</h2><p>执行 <code>ROLLBACK;</code> 命令表示事务中的所有操作都将被撤销，数据库将回到事务开始前的状态。这意味着事务中所做的任何更改都不会被保存到数据库中。</p><p><strong>底层原理：</strong></p><ol><li><strong>事务回滚</strong>：事务进入回滚阶段，数据库系统会恢复到事务开始前的状态。</li><li><strong>撤销更改</strong>：<strong>通过事务日志（undo Log）来撤销事务期间所做的更改</strong>。</li><li><strong>释放资源</strong>：事务回滚后，同样会释放事务期间占用的资源，如锁定的行或表等。</li></ol><h1 id="WAL"><a href="#WAL" class="headerlink" title="WAL"></a>WAL</h1><p><strong>WAL（预写日志，Write-Ahead Logging）是一种数据保护机制</strong>，它在对数据进行实际写操作之前，先将这些操作记录到日志文件中，确保在数据库对外部变化（如崩溃、电源中断等）进行恢复时，数据的<strong>一致性</strong>和<strong>持久性</strong>。</p><h2 id="WAL-的工作过程"><a href="#WAL-的工作过程" class="headerlink" title="WAL 的工作过程"></a>WAL 的工作过程</h2><ol><li><strong>日志条目的写入</strong>：当数据库要进行更改时，不是直接更改数据文件，而是先将这些更改记录到 WAL 文件中。只有在这些日志条目已经安全地存储到磁盘之后，数据库才会开始更新实际的数据。这种方法允许数据库在意外崩溃之后，通过查阅 WAL 文件来恢复所有未完成的事务，进而恢复到一致的状态。</li><li><strong>检查点机制</strong>：为了保障 WAL 文件不会无限制地增长，数据库会定期创建检查点。这些检查点允许删除旧的 WAL 文件，并减少恢复所需的时间。</li></ol><h2 id="WAL-的优点"><a href="#WAL-的优点" class="headerlink" title="WAL 的优点"></a>WAL 的优点</h2><ol><li><strong>数据恢复</strong>：WAL 是保证数据一致性的重要手段。它提供了一种在出现故障时快速恢复数据库的方法。通过读取 WAL 文件，数据库可以重做（redo）在崩溃前进行的所有操作，从而恢复到崩溃时的状态。</li><li><strong>写性能优化</strong>：由于可以将多个更改合并成一个大块进行写入，WAL 有助于优化磁盘写入性能。这减少了对磁盘的频繁小量写操作。</li><li><strong>异步备份</strong>：WAL 文件可以用于进行异步日志传输，提供了数据库的备份和恢复方案，支持只读副本和灾难恢复。</li></ol><h2 id="WAL-与-MVCC"><a href="#WAL-与-MVCC" class="headerlink" title="WAL 与 MVCC"></a>WAL 与 MVCC</h2><ol><li>MVCC 机制用来管理并发事务，</li><li>WAL 文件则用来记录事务的更改历史。</li></ol><p>在故障恢复时，<strong>先使用 WAL 恢复未提交的事务，然后根据 MVCC 的版本控制进行数据的回滚</strong>。</p><h1 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h1><h2 id="MVCC是如何保证数据的可恢复性的？"><a href="#MVCC是如何保证数据的可恢复性的？" class="headerlink" title="MVCC是如何保证数据的可恢复性的？"></a>MVCC是如何保证数据的可恢复性的？</h2><p>MVCC需要保障如下两条原则：</p><ol><li><p><strong>正在进行的事务</strong>不会读取<strong>未提交的事务</strong>产生的数据。</p></li><li><p><strong>正在进行的事务</strong>不会修改<strong>未提交的事务</strong>修改或产生的数据。</p></li></ol><p>于是，MVCC就通过如下步骤实现了数据回滚：</p><p>MVCC通过维护每个事务的开始时间和版本号来判断是否需要回滚。当事务试图读取或修改数据时，系统会比较当前数据版本与事务的开始时间。如果事务尝试访问的版本<strong>在其开始时间之后已被其他事务提交</strong>，那么该事务会被标记为需要回滚，因为它基于过时的数据进行操作。这种机制确保了数据的一致性和隔离性。</p><h2 id="行的可见性判定"><a href="#行的可见性判定" class="headerlink" title="行的可见性判定"></a>行的可见性判定</h2><p>每一行都有两个特殊的字段：</p><ul><li><code>xmin</code> ：创建这个行的事务 ID</li><li><code>xmax</code>：删除&#x2F;更新它的事务 ID</li></ul><p>当一个事务读取数据时，它会根据 <code>xmin</code> 和<code>xmax</code> 判断当前事务的可见性。</p><p>那么一条记录什么时候是可见的呢？</p><p>满足如下两个条件：</p><ol><li><code>xmin</code> 对应的事务已经提交</li><li><code>xmax</code> 对应的事务未提交或未开始</li></ol><h2 id="什么是事务日志-x2F-redo-log，undo-log？"><a href="#什么是事务日志-x2F-redo-log，undo-log？" class="headerlink" title="什么是事务日志 &#x2F; redo log，undo log？"></a>什么是事务日志 &#x2F; redo log，undo log？</h2><p>总结：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redo log: 记录的是数据页的物理变化，服务宕机可用来同步数据</span><br><span class="line">undo log ：记录的是逻辑日志，当事务回滚时，通过逆操作恢复原来的数据</span><br><span class="line">redo log保证了事务的持久性，undo log保证了事务的原子性和一致性</span><br></pre></td></tr></table></figure><p><strong><code>redo log</code><strong>：重做日志，确保了</strong>已提交的事务</strong>在数据库崩溃重启后，能够保持数据的<strong>持久性</strong>和<strong>一致性</strong>。<code>redo log</code>是物理日志，它包含以下两种类型的信息：</p><ol><li><strong>物理页的变化</strong>：某些数据库系统（如Oracle）可能直接记录数据页变化后的状态。这意味着在重做日志中，你会看到一个数据页在某次操作之后的样子。</li><li><strong>操作的描述</strong>：另一些数据库系统（如MySQL的InnoDB存储引擎）则记录了如何重做某个特定操作的信息，即记录了需要对哪些页进行什么样的更新才能重现这些页在事务提交后的状态。</li></ol><p><strong><code>undo log</code><strong>：回滚日志，确保了</strong>未提交的事务</strong>在数据库崩溃重启后，不会对数据库的数据造成影响，实现<strong>隔离性</strong>。此外在可重复读取隔离等级下，undo log 还可以维持读取视图的一致性，即保证同一个查询在事务内多次执行时返回相同的结果。undo log是逻辑日志，它的基本结构特点如下：</p><ol><li><strong>版本链（Version Chain）</strong>：<ul><li>在 InnoDB 存储引擎中，每个数据页都有一个版本链，其中包含了该页上所有行的多个版本。这些版本信息是由 Undo Log 维护的。</li></ul></li><li><strong>重做片段（Undo Segments）</strong>：<ul><li>Undo Log 通常被组织成 Undo Segments，每一个 Undo Segment 包含一个或多个 Undo Records。Undo Segments 可以进一步分为两类：Insert Undo Segments 和 General Undo Segments。<ul><li><strong>Insert Undo Segments</strong> 主要用于插入操作的事务，当事务只包含插入操作时，可以使用 Insert Undo Segments。一旦事务提交，这部分 Undo Log 就不再需要，可以被重用。</li><li><strong>General Undo Segments</strong> 用于包含删除、更新等操作的事务，这类事务提交后，Undo Log 需要保留一段时间，直到不再有活跃事务需要访问这些旧版本。</li></ul></li></ul></li><li><strong>重做记录（Undo Records）</strong>：<ul><li>每个 Undo Record 包含了数据项在某个时间点的值，以及指向其前后版本的指针。这样可以构建出一个版本链，用于追踪数据项的历史版本。</li></ul></li><li><strong>回滚指针（Rollback Pointer）</strong>：<ul><li>每个事务都有一个 Rollback Pointer 指向 Undo Log 中的一个位置，这个位置标识了事务开始时的数据状态。当事务需要回滚时，系统可以根据 Rollback Pointer 从该位置开始恢复数据到事务开始前的状态。</li></ul></li><li><strong>时间戳（Timestamps）</strong>：<ul><li>Undo Log 中还包括时间戳信息，这有助于判断版本的有效性，特别是在 MVCC 环境下，用于决定哪个版本对于给定的查询是可见的。</li></ul></li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404071627255.png" alt="image-20240407162732189" style="zoom:60%;" /><h2 id="MVCC-实现一致性和隔离性的原理"><a href="#MVCC-实现一致性和隔离性的原理" class="headerlink" title="MVCC 实现一致性和隔离性的原理"></a><em>MVCC 实现一致性和隔离性的原理</em></h2><p>MVCC机制下一条记录会有多个版本，每次修改记录都会存储这条记录被修改之前的版本。多版本之间串联起来就形成了一条<strong>版本链</strong>，这样不同时刻启动的事务可以<strong>无锁</strong>地获得不同版本的数据（普通读）。此时读（普通读）写操作不会阻塞，写操作可以继续写，无非就是多加了一个版本，历史版本记录可供已经启动的事务读取。</p><p>这一切的实现主要依赖于每条记录中的<strong>隐式字段</strong>、<strong>undo log日志</strong>、<strong>ReadView</strong>。</p><p><strong>1. 隐式字段</strong></p><table><thead><tr><th>隐藏字段</th><th>含义</th></tr></thead><tbody><tr><td>DB_TRX_ID</td><td>最近修改<strong>事务ID</strong>，记录插入这条记录或最后一次修改该记录的事务ID。</td></tr><tr><td>DB_ROLL_PTR</td><td><strong>回滚指针</strong>，指向这条记录的上一个版本，用于配合undo log，指向上一个版本。</td></tr><tr><td>(DB_ROW_ID)</td><td>（<strong>隐藏主键</strong>，如果表结构没有指定主键，将会生成该隐藏字段。）</td></tr></tbody></table><p><strong>2. undo log</strong></p><ul><li><p>回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。</p></li><li><p>undo log版本链：不同事务或相同事务对同一条记录进行修改，会导致该记录的undo log生成一条<strong>记录版本链表</strong>，链表的头部是最新的旧记录，链表尾部是最早的旧记录</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404071636491.png" alt="image-20240407163613418" style="zoom:60%;" /></li></ul><p><strong>3. ReadView 读取视图</strong></p><p>ReadView解决了一个事务查询选择版本的问题，根据ReadView的匹配规则和当前的一些事务id判断该访问那个版本的数据。</p><p>ReadView是一个事务在开始时可见的数据快照。每当一个事务启动时，系统会创建一个ReadView，记录当前活跃事务的列表和事务的时间戳。通过这个视图，事务可以访问在其开始时已经提交的版本，而忽略后续提交的变更。这确保了事务的隔离性，使得它在执行过程中看到的数据始终保持一致，避免了幻读和脏读问题。</p><p>不同的隔离级别快照读：RC(读已提交)：每一次执行快照读时生成ReadView、RR(可重复读)：仅在事务中第一次执行快照读时生成ReadView，后续复用。</p><ul><li><p>工作过程：<strong>快照读</strong>SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交的）id。</p></li><li><p><strong>当前读</strong>：写操作时（update、insert、delete(排他锁)，<em>select … lock in share mode(共享锁)，select … for update</em>），读取的是记录的<strong>最新版本</strong>，读取时会对读取的记录进行加锁，保证其他并发事务不能修改当前记录。</p></li><li><p><strong>快照读</strong>：<strong>select</strong>时，<strong>非阻塞式</strong>地读取记录数据的可见版本，<strong>有可能是历史数据</strong>。</p><ul><li>Read Committed：每次执行select，都生成一个<strong>快照读</strong>，这个新生成的快照读可能会造成<strong>不可重复读</strong>。</li><li>Repeatable Read（默认）：仅在事务开始时生成ReadView，<strong>后续复用</strong>。</li></ul></li><li><p><em>ReadView是一个数据结构，包含了四个核心字段：</em></p><table><thead><tr><th align="center"><strong>字段</strong></th><th align="center"><strong>含义</strong></th></tr></thead><tbody><tr><td align="center">m_ids</td><td align="center">当前活跃的事务ID集合</td></tr><tr><td align="center">min_trx_id</td><td align="center">最小活跃事务ID</td></tr><tr><td align="center">max_trx_id</td><td align="center">预分配的事务ID，当前最大事务ID+1</td></tr><tr><td align="center">creator_trx_id</td><td align="center">ReadView创建者的事务ID</td></tr></tbody></table></li></ul><h1 id="—————-分布式数据库—————"><a href="#—————-分布式数据库—————" class="headerlink" title="—————-分布式数据库—————-"></a><div align="center">—————-分布式数据库—————-</div></h1><h1 id="数据库集群"><a href="#数据库集群" class="headerlink" title="数据库集群"></a>数据库集群</h1><h2 id="主从同步的原理"><a href="#主从同步的原理" class="headerlink" title="主从同步的原理"></a>主从同步的原理</h2><p>主从复制的核心就是<strong>二进制日志</strong></p><p>主从复制步骤：</p><ol><li>Master 主库在事务提交时，会把数据变更记录在二进制日志文件<strong>Binlog</strong>中。</li><li>从库读取主库的二进制日志文件<strong>Binlog</strong>，写入到从库的中继日志<strong>Relay Log</strong>。</li><li>Slave重做中继日志中的事件，将改变反映它自己的数据。</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404071648188.png" alt="image-20240407164836130" style="zoom: 50%;" /><h2 id="如何保证主从的数据一致性？"><a href="#如何保证主从的数据一致性？" class="headerlink" title="如何保证主从的数据一致性？"></a>如何保证主从的数据一致性？</h2><ol><li>利用读写分离框架特性，如ShardingJDBC可以要求下一条SELECT强制走主库。但会增大主库压力，可能出现性能瓶颈。</li><li>采用MGR（MySQL Group Replication）全同步复制，强一致数据同步没完成主从同步之前，jdbc.insert()方法无法得到结果新项目推荐：无需改代码，真正的一致性方案，老项目不推荐，传统应用集群向MGR迁移成本高、风险大</li></ol><h2 id="分库分表时机"><a href="#分库分表时机" class="headerlink" title="分库分表时机"></a>分库分表时机</h2><ol><li>项目业务数据逐渐增多，或业务发展比较迅速</li><li>优化已解决不了性能问题（主从读写分离、查询索引…）</li><li>IO瓶颈（磁盘IO、网络IO）、CPU瓶颈（聚合查询、连接数太多）</li></ol><h2 id="分表分库策略"><a href="#分表分库策略" class="headerlink" title="分表分库策略"></a>分表分库策略</h2><ol><li>垂直分库，根据业务进行拆分，高并发下提高磁盘IO和网络连接数</li><li>垂直分表，冷热数据分离，多表互不影响</li><li>水平分库，将一个库的数据拆分到多个库中，解决海量数据存储和高并发的问题</li><li>水平分表，解决单表存储和性能的问题</li></ol><h1 id="分库"><a href="#分库" class="headerlink" title="分库"></a>分库</h1><p>分库（Database Sharding）是指将一个大的数据库拆分成多个小的数据库，每个数据库称为一个“分片”（Shard）。每个分片包含部分数据，通过某种策略将数据分布到不同的分片中。</p><h2 id="分库策略"><a href="#分库策略" class="headerlink" title="分库策略"></a>分库策略</h2><ol><li><strong>范围分片</strong>：根据某个字段的值范围进行分片，例如按用户 ID 的范围。</li><li><strong>哈希分片</strong>：根据某个字段的哈希值进行分片，例如按用户 ID 的哈希值。</li><li><strong>列表分片</strong>：根据某个字段的具体值进行分片，例如按城市名称。</li></ol><h2 id="分库的实现方式"><a href="#分库的实现方式" class="headerlink" title="分库的实现方式"></a>分库的实现方式</h2><ol><li><strong>应用层分片</strong>：在应用层实现分片逻辑，通过路由算法将请求分发到不同的数据库分片。</li><li><strong>中间件分片</strong>：使用数据库中间件（如 MyCAT、<strong>ShardingSphere</strong>）来管理分片，提供透明的分片和路由功能。</li></ol><h2 id="优点、缺点"><a href="#优点、缺点" class="headerlink" title="优点、缺点"></a>优点、缺点</h2><ul><li><p><strong>提高性能</strong>：通过将数据分散到多个数据库中，可以减少单个数据库的负载，提高查询和写入性能。</p></li><li><p><strong>增加可伸缩性</strong>：可以轻松地通过增加更多的分片来扩展系统。</p></li><li><p><strong>提高可用性</strong>：即使某个分片出现故障，其他分片仍然可以正常工作，提高了系统的可用性。</p></li><li><p><strong>复杂性增加</strong>：需要管理多个数据库实例，增加了系统的复杂性。</p></li><li><p><strong>跨分片查询</strong>：跨分片的查询和事务管理更加复杂，可能需要额外的中间件支持。</p></li><li><p><strong>数据迁移</strong>：随着数据量的增长，可能需要重新分片，数据迁移和维护成本较高。</p></li></ul><h1 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h1><p>分表（Table Partitioning）是指将一个大的表拆分成多个小的表，每个小表称为一个“分区”（Partition）。每个分区包含部分数据，通过某种策略将数据分布到不同的分区中。</p><h2 id="分表策略"><a href="#分表策略" class="headerlink" title="分表策略"></a>分表策略</h2><ol><li><strong>范围分区</strong>：根据某个字段的值范围进行分区，例如按日期范围。</li><li><strong>列表分区</strong>：根据某个字段的具体值进行分区，例如按地区代码。</li><li><strong>哈希分区</strong>：根据某个字段的哈希值进行分区，例如按用户 ID 的哈希值。</li><li><strong>复合分区</strong>：结合多种分区策略，例如先按日期范围分区，再按地区代码分区。</li></ol><h2 id="分表的实现方式"><a href="#分表的实现方式" class="headerlink" title="分表的实现方式"></a>分表的实现方式</h2><ol><li><strong>物理分区</strong>：在数据库中创建多个物理表，每个表存储部分数据。</li><li><strong>逻辑分区</strong>：使用数据库的分区功能（如 PostgreSQL 的表分区、MySQL 的分区表）来创建逻辑分区。</li></ol><h2 id="优点、缺点-1"><a href="#优点、缺点-1" class="headerlink" title="优点、缺点"></a>优点、缺点</h2><ul><li><p><strong>提高查询性能</strong>：通过将数据分散到多个分区中，可以减少单个分区的数据量，提高查询性能。</p></li><li><p><strong>优化存储</strong>：可以将冷数据和热数据分开存储，优化存储空间和访问效率。</p></li><li><p><strong>简化维护</strong>：可以单独对某个分区进行维护操作，如备份、索引重建等。</p></li><li><p><strong>复杂性增加</strong>：需要管理多个表分区，增加了系统的复杂性。</p></li><li><p><strong>跨分区查询</strong>：跨分区的查询和事务管理更加复杂，可能需要额外的优化和索引支持。</p></li><li><p><strong>分区管理</strong>：需要定期维护分区，例如添加新的分区、删除旧的分区等。</p></li></ul><h1 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h1><p>分片（Database Sharding）涵盖了分库和分表的概念。分片是指将数据分散到多个节点或分区中，每个节点或分区包含部分数据，通过某种策略将数据分布到不同的节点或分区中。</p><h2 id="分片的类型"><a href="#分片的类型" class="headerlink" title="分片的类型"></a>分片的类型</h2><ol><li><strong>水平分割</strong>：数据库分片是指将数据库中的数据水平地分割成多个部分，并将这些部分分布到不同的物理数据库服务器上。这意味着每台服务器上只存储一部分数据，而不是全部数据。</li><li><strong>垂直分割</strong>：与水平分割相对的是垂直分割（Vertical Partitioning），即将不同的表分割到不同的服务器上。然而，垂直分割通常不是我们讨论的“分片”的主要内容，而是另一种优化策略。</li></ol><h2 id="分片的目的"><a href="#分片的目的" class="headerlink" title="分片的目的"></a>分片的目的</h2><ul><li><strong>提高性能</strong>：通过将数据分布在多个服务器上，可以并行处理更多的请求，从而提高整体性能。</li><li><strong>负载均衡</strong>：分片可以将负载均衡到多个服务器上，避免单点过载。</li><li><strong>提高可用性</strong>：如果一个分片服务器宕机，其他分片服务器仍然可以继续提供服务，提高了系统的可用性。</li><li><strong>数据地理分布</strong>：分片还允许将数据存储在不同的地理位置，以减少延迟并满足数据驻留法规要求。</li></ul><h2 id="分片的实现方式"><a href="#分片的实现方式" class="headerlink" title="分片的实现方式"></a>分片的实现方式</h2><ul><li><strong>应用层分片</strong>：在应用层实现分片逻辑，通过路由算法将请求分发到不同的节点或分区。</li><li><strong>中间件分片</strong>：使用数据库中间件（如 MyCAT、<strong>ShardingSphere</strong>）来管理分片，提供透明的分片和路由功能。</li></ul><h2 id="分片带来的挑战"><a href="#分片带来的挑战" class="headerlink" title="分片带来的挑战"></a>分片带来的挑战</h2><ol><li><strong>数据一致性</strong>：在分布式环境中，保持数据的一致性是一个挑战，需要使用如分布式事务、分布式锁等技术来保证。</li><li><strong>数据迁移</strong>：当需要增加或移除分片时，涉及到大量的数据迁移工作。</li><li><strong>查询复杂性</strong>：跨分片的查询变得复杂，可能需要在多个分片上执行查询并合并结果。</li><li><strong>故障恢复</strong>：分片系统需要设计有效的故障恢复机制，以确保在某个分片失效时系统仍然可以正常运行。</li></ol><h1 id="分库、分表、分片的示例"><a href="#分库、分表、分片的示例" class="headerlink" title="分库、分表、分片的示例"></a>分库、分表、分片的示例</h1><h2 id="分库示例"><a href="#分库示例" class="headerlink" title="分库示例"></a>分库示例</h2><p>假设你有一个电商系统，用户分布在不同的城市。可以按城市进行分库：</p><ul><li><strong>数据库1</strong>：北京用户</li><li><strong>数据库2</strong>：上海用户</li><li><strong>数据库3</strong>：广州用户</li></ul><h2 id="分表示例"><a href="#分表示例" class="headerlink" title="分表示例"></a>分表示例</h2><p>假设你有一个订单表，订单数据按日期进行分表：</p><ul><li><strong>订单表1</strong>：2023年1月的数据</li><li><strong>订单表2</strong>：2023年2月的数据</li><li><strong>订单表3</strong>：2023年3月的数据</li></ul><h2 id="分片示例"><a href="#分片示例" class="headerlink" title="分片示例"></a>分片示例</h2><p>假设你有一个全球用户系统，用户分布在不同的国家和地区。可以按国家和城市进行分片：</p><ul><li><strong>分片1</strong>：中国北京用户</li><li><strong>分片2</strong>：中国上海用户</li><li><strong>分片3</strong>：美国纽约用户</li><li><strong>分片4</strong>：英国伦敦用户</li></ul><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>分库</strong>：适用于大规模数据和高并发场景，通过将数据分散到多个数据库中，提高系统的可伸缩性和性能。</li><li><strong>分表</strong>：适用于单个表数据量过大的场景，通过将数据分散到多个表中，提高查询性能和存储效率。</li><li><strong>分片</strong>：涵盖了分库和分表的概念，通过将数据分散到多个节点或分区中，提高系统的性能和可伸缩性。</li></ul><h1 id="怎么设计数据库分片？"><a href="#怎么设计数据库分片？" class="headerlink" title="怎么设计数据库分片？"></a>怎么设计数据库分片？</h1><h2 id="分片键"><a href="#分片键" class="headerlink" title="分片键"></a>分片键</h2><p>确定分片键（Sharding Key），这将决定数据如何分配到不同分片。</p><p>常见的分片键包括：</p><ul><li><strong>用户ID</strong>：适用于社交网络、电子商务等场景。</li><li><strong>地理位置</strong>：适用于需要根据地理位置存储数据的应用。</li><li><strong>时间戳</strong>：适用于日志记录、历史数据存储等场景。</li></ul><h2 id="分片算法"><a href="#分片算法" class="headerlink" title="分片算法"></a>分片算法</h2><p>根据选定的分片键，设计分片算法。</p><p>常见的分片算法包括：</p><ul><li><p><strong>范围分片</strong>：根据某个字段的值范围进行分片，例如按用户 ID 的范围。</p><ul><li>数据根据某个字段（如用户ID）的值范围分配到不同的分片上。</li><li>优点是可以根据数据的自然分布来进行分片，易于理解和实现。</li><li>缺点是如果数据分布不均，可能导致某些分片负载过高。</li></ul></li><li><p><strong>哈希分片</strong>：根据某个字段的哈希值进行分片，例如按用户 ID 的哈希值。</p><ul><li>数据根据一个或多个字段的哈希值分配到不同的分片上。</li><li>优点是哈希值的均匀分布可以较好地平衡各分片的负载。</li><li>缺点是当增加或移除分片时，需要重新哈希分配数据，可能导致大规模的数据迁移。</li></ul></li><li><p><strong>列表分片</strong>：根据某个字段的具体值进行分片，例如按城市名称。</p></li><li><p><strong>复合分片</strong>：结合多种分片策略，例如先按日期范围分片，再按地区代码分片。</p></li></ul><h2 id="一致性哈希算法"><a href="#一致性哈希算法" class="headerlink" title="一致性哈希算法"></a>一致性哈希算法</h2><ul><li><p>一种特殊的哈希分片算法，用于解决哈希分片在动态调整分片数量时的问题。</p></li><li><p>通过<strong>虚拟节点</strong>来模拟<strong>环形拓扑结构</strong>，使得在添加或移除分片时，只需要重新分配受影响的数据部分。</p></li></ul><h1 id="如何保证数据的分布一致性？"><a href="#如何保证数据的分布一致性？" class="headerlink" title="如何保证数据的分布一致性？"></a>如何保证数据的分布一致性？</h1><h2 id="数据映射规则"><a href="#数据映射规则" class="headerlink" title="数据映射规则"></a>数据映射规则</h2><p>需要定义一个映射规则，将数据映射到具体的分片上。</p><p>例如，可以使用模运算来实现哈希分片：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">shardId</span> <span class="operator">=</span> userId.hashCode() % numberOfShards;</span><br></pre></td></tr></table></figure><h2 id="分片存储"><a href="#分片存储" class="headerlink" title="分片存储"></a>分片存储</h2><p>每个分片存储在不同的数据库实例上，需要确保每个实例上的数据是相互独立的。可以使用如下方法来实现：</p><ul><li><strong>使用不同的数据库实例</strong>：每个分片对应一个数据库实例。</li><li><strong>使用同一个数据库实例的不同表或Schema</strong>：适合数据量不大，且对性能要求不高的场景。</li></ul><h1 id="如何保证分片数据的一致性？"><a href="#如何保证分片数据的一致性？" class="headerlink" title="如何保证分片数据的一致性？"></a>如何保证分片数据的一致性？</h1><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><p>分片后，跨分片的事务处理变得更加复杂。需要使用分布式事务来保证数据的一致性。常用的方法包括：</p><ul><li><strong>两阶段提交（Two-Phase Commit, 2PC）</strong>：协调多个分片上的事务。</li><li><strong>三阶段提交（Three-Phase Commit, 3PC）</strong>：在2PC的基础上增加了预准备阶段，提高了可靠性。</li><li><strong>最终一致性（Eventual Consistency）</strong>：通过消息队列或事件驱动的方式，在事务完成后异步同步数据。</li></ul><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>在并发场景下，需要使用分布式锁来保证数据的一致性。常用的技术包括：</p><ul><li><strong>ZooKeeper</strong>：提供分布式锁服务。</li><li><strong>Redis</strong>：使用Redis的SETNX等命令实现分布式锁。</li></ul><h2 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h2><p>对于需要实时同步的数据，可以使用以下方法：</p><ul><li><strong>主从复制（Master-Slave Replication）</strong>：将数据从主分片复制到其他分片。</li><li><strong>异步消息队列</strong>：使用Kafka、RabbitMQ等消息队列进行数据同步。</li></ul>]]></content>
    
    
    <summary type="html">Java, all in one！</summary>
    
    
    
    <category term="学习" scheme="https://01petard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="数据库" scheme="https://01petard.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Java" scheme="https://01petard.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>My Java Guide - 分布式</title>
    <link href="https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    <id>https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20%E5%88%86%E5%B8%83%E5%BC%8F/</id>
    <published>2024-10-14T16:23:00.000Z</published>
    <updated>2024-10-14T16:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="—————-分布式理论—————"><a href="#—————-分布式理论—————" class="headerlink" title="—————-分布式理论—————-"></a><div align="center">—————-分布式理论—————-</div></h1><h1 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h1><p>CAP 定理指出，在分布式系统中，不可能同时实现以下三个保证：</p><ul><li><strong>一致性（Consistency）</strong>：所有节点在同一时刻看到相同的数据。</li><li><strong>可用性（Availability）</strong>：每个请求不管当前是否是集群的领导节点，都会收到系统的非错误响应。</li><li><strong>分区容错性（Partition tolerance）</strong>：即使存在信息丢失（即网络分区），系统仍然能继续运作。</li></ul><p>根据 CAP 定理，一个分布式系统只能实现这三个特性中的两个。例如，可以选择一致性和分区容错性，放弃部分可用性；或者选择可用性和分区容错性，放弃一致性。</p><h1 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h1><p>BASE 是 Basically Available（基本上可用）、Soft state（软状态）、Eventually consistent（最终一致性）这三个短语的首字母缩写。</p><p>BASE 是对 CAP 中 AP 选项的一种延伸，它强调的是即使不能保证强一致性，也可以通过牺牲一些一致性来换取系统的高可用性。</p><ul><li><strong>基本上可用（Basically Available）</strong>：系统可以出现延迟增加的情况，但仍然能够处理请求，不会完全停止服务。</li><li><strong>软状态（Soft state）</strong>：允许系统内部的状态随着时间变化而变化，而不是始终维持不变。</li><li><strong>最终一致性（Eventual Consistency）</strong>：系统在经过一段时间后，会达到一个一致的状态。在这个过程中，系统可能会经历中间状态，这些状态可能不是一致的。</li></ul><h1 id="Raft选举算法（Kafka、etcd）"><a href="#Raft选举算法（Kafka、etcd）" class="headerlink" title="Raft选举算法（Kafka、etcd）"></a>Raft选举算法（Kafka、etcd）</h1><p>Raft算法于2014年提出，是一种易于理解、分布式强一致性的算法，它旨在简化 Paxos 算法的理解和实现。</p><p>Raft算法将节点分为三种状态：<strong>跟随者（Follower）、候选人（Candidate）和领导者（Leader）</strong>。</p><p><strong>Raft 算法的主要步骤</strong>：</p><ol><li><strong>初始化状态</strong>：<ul><li>每个节点初始状态都是跟随者（Follower）。</li></ul></li><li><strong>超时事件</strong>：<ul><li>当跟随者没有在一定时间内接收到任何消息时（随机超时时间），它会变成候选人（Candidate）。</li></ul></li><li><strong>选举过程</strong>：<ul><li>候选人发起选举，向其他节点发送投票请求（RequestVote RPC）。</li><li>其他节点接收到投票请求后，如果它们尚未投票给其他候选人，则可以投票给当前候选人。</li><li>如果候选人获得大多数节点的选票，则成为领导者（Leader）。</li></ul></li><li><strong>领导者的心跳机制</strong>：<ul><li>领导者定期向所有节点发送心跳消息（AppendEntries RPC），以维持领导者的地位。</li><li>如果跟随者长时间未收到心跳消息，它会再次变成候选人并重新发起选举。</li></ul></li></ol><h1 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h1><p>略。</p><h1 id="—————-分布式组件—————"><a href="#—————-分布式组件—————" class="headerlink" title="—————-分布式组件—————-"></a><div align="center">—————-分布式组件—————-</div></h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th align="center">功能</th><th align="center">传统 Spring Cloud 组件</th><th align="center">Spring Cloud Alibaba 组件</th></tr></thead><tbody><tr><td align="center"><strong>注册中心</strong></td><td align="center">Eureka</td><td align="center">Nacos (同时作为配置中心)</td></tr><tr><td align="center"><strong>负载均衡</strong></td><td align="center">Ribbon</td><td align="center">Ribbon</td></tr><tr><td align="center"><strong>远程调用 &#x2F; 服务调用</strong></td><td align="center">Feign</td><td align="center">Feign</td></tr><tr><td align="center"><strong>服务熔断 &#x2F; 保护</strong></td><td align="center">Hystrix</td><td align="center">Sentinel</td></tr><tr><td align="center"><strong>服务网关</strong></td><td align="center">Zuul</td><td align="center">Gateway</td></tr></tbody></table><h1 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h1><h2 id="Eureka的工作流程"><a href="#Eureka的工作流程" class="headerlink" title="Eureka的工作流程"></a>Eureka的工作流程</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404122005022.png" alt="image-20240412200506917" style="zoom: 50%;" /><h2 id="Nacos的工作流程"><a href="#Nacos的工作流程" class="headerlink" title="Nacos的工作流程"></a>Nacos的工作流程</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404122005543.png" alt="image-20240412200551427" style="zoom:50%;" /><h2 id="Nacos-与-Eureka-的功能对比"><a href="#Nacos-与-Eureka-的功能对比" class="headerlink" title="Nacos 与 Eureka 的功能对比"></a>Nacos 与 Eureka 的功能对比</h2><table><thead><tr><th align="center">功能</th><th align="center">Nacos</th><th align="center">Eureka</th></tr></thead><tbody><tr><td align="center"><strong>服务注册</strong></td><td align="center"><strong>支持</strong></td><td align="center"><strong>支持</strong></td></tr><tr><td align="center"><strong>服务拉取</strong></td><td align="center"><strong>支持</strong></td><td align="center"><strong>支持</strong></td></tr><tr><td align="center"><strong>心跳检测</strong></td><td align="center"><strong>支持</strong>（临时实例）</td><td align="center"><strong>支持</strong></td></tr><tr><td align="center"><strong>主动检测</strong></td><td align="center"><strong>支持</strong>（非临时实例）</td><td align="center">不支持</td></tr><tr><td align="center"><strong>异常实例剔除策略</strong></td><td align="center"><strong>选择性剔除</strong>（临时实例会，非临时实例不会）</td><td align="center">自动剔除</td></tr><tr><td align="center"><strong>服务变更推送模式</strong></td><td align="center"><strong>支持主动推送</strong>，服务列表更新更及时</td><td align="center">不支持，只能被动询问</td></tr><tr><td align="center"><strong>一致性模型</strong></td><td align="center">默认 <strong>AP</strong>（高可用），非临时实例时<strong>CP</strong>（强一致）</td><td align="center">默认 <strong>AP</strong>（高可用）</td></tr><tr><td align="center"><strong>配置中心</strong></td><td align="center"><strong>支持</strong></td><td align="center">不支持</td></tr></tbody></table><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><h2 id="Ribbon的工作流程"><a href="#Ribbon的工作流程" class="headerlink" title="Ribbon的工作流程"></a>Ribbon的工作流程</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404122006437.png" alt="image-20240412200656355" style="zoom: 50%;" /><h2 id="Ribbon的负载均衡策略"><a href="#Ribbon的负载均衡策略" class="headerlink" title="Ribbon的负载均衡策略"></a>Ribbon的负载均衡策略</h2><p>静态轮询策略：</p><ul><li>RoundRobinRule：简单轮询</li><li>WeightedResponseTimeRule：权重轮询。权重越小，响应时间越长</li><li>RandomRule：随机轮询</li><li>（非Ribbon）Sticky RoundRobin：粘性轮询。相同用户、IP等值的请求会轮询到同一个服务器。</li><li>（非Ribbon）Hash RoundRobin：哈希轮询。根据IP、URL等值计算出一个哈希值来选择相应的服务器。</li></ul><p>动态轮询策略：</p><ul><li><p>BestAvailableRule：最少连接数</p></li><li><p>AvailabilityFilteringRule：先过滤不健康的，再选择最少连接数</p></li><li><p>（非Ribbon）Least Time：最短延迟。需要消耗额外资源，监控服务器的响应时间和处理能力。</p></li><li><p>ZoneAvoidanceRule：以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询</p></li><li><p>RetryRule：选择自定义的重试逻辑</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">service-name:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment"># 是否所有操作都允许重试</span></span><br><span class="line">    <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">2</span>    <span class="comment"># 切换到下一个服务实例的最大重试次数</span></span><br><span class="line">    <span class="attr">MaxAutoRetries:</span> <span class="number">1</span>              <span class="comment"># 对同一服务实例的最大重试次数</span></span><br><span class="line">    <span class="attr">ConnectTimeout:</span> <span class="number">1000</span>           <span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line">    <span class="attr">ReadTimeout:</span> <span class="number">3000</span>              <span class="comment"># 读取超时时间（毫秒）</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Ribbon实现自定义负载均衡策略"><a href="#Ribbon实现自定义负载均衡策略" class="headerlink" title="Ribbon实现自定义负载均衡策略"></a>Ribbon实现自定义负载均衡策略</h2><ol><li><strong>全局</strong>：实现IRule接口，在实现类中指定负载均衡策略</li><li><strong>局部</strong>：在配置文件中，配置每一个服务调用的负载均衡策略</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404122010417.png" alt="image-20240412201020336" style="zoom:50%;" /><h1 id="RPC框架"><a href="#RPC框架" class="headerlink" title="RPC框架"></a>RPC框架</h1><blockquote><p>RPC：Remote Procedure Call ，即远程过程调用</p></blockquote><h2 id="如何设计一个-RPC-框架？"><a href="#如何设计一个-RPC-框架？" class="headerlink" title="如何设计一个 RPC 框架？"></a>如何设计一个 RPC 框架？</h2><p><strong>其实</strong>就这么几点：</p><ol><li><strong>动态代理</strong>（屏蔽底层调用细节）</li><li><strong>序列化</strong>（网络数据传输需要扁平的数据）</li><li><strong>协议</strong>（规定协议，才能识别数据）</li><li><strong>网络传输</strong>（I&#x2F;O模型相关内容，一般用 Netty 作为底层通信框架即可）</li></ol><p>生产级别的框架还需要注册中心作为服务的发现，且还需提供路由分组、负载均衡、异常重试、限流熔断等其他功能。</p><p>说到这就可以停下了，然后等面试官发问，正常情况下他会选一个点进行深入探讨，这时候我们只能见招拆招了。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411071757171.png" alt="img" style="zoom:100%;" /><h2 id="细节：动态代理-x2F-RPC的实现原理"><a href="#细节：动态代理-x2F-RPC的实现原理" class="headerlink" title="细节：动态代理 &#x2F; RPC的实现原理"></a>细节：动态代理 &#x2F; RPC的实现原理</h2><p><strong>通过动态代理实现的。</strong></p><blockquote><p><em>在 Dubbo 中用的是 Javassist，至于为什么用这个其实梁飞大佬已经写了博客说明了。</em></p><p><em>他当时对比了 JDK 自带的、ASM、CGLIB(基于ASM包装)、Javassist。</em></p><p><em>经过测试最终选用了 Javassist。</em></p><p><em>梁飞：最终决定使用JAVAASSIST的字节码生成代理方式。 虽然ASM稍快，但并没有快一个数量级，而Javassist的字节码生成方式比ASM方便，JAVAASSIST只需用字符串拼接出Java源码，便可生成相应字节码，而ASM需要手工写字节码。</em></p></blockquote><p>RPC 会给接口生成一个代理类，我们调用这个接口实际调用的是动态生成的代理类，由代理类来触发远程调用，这样我们调用远程接口就无感知了。</p><p>动态代理中，最常见的技术就是 Spring AOP 了，涉及的有 JDK 动态代理和 cglib。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411071757686.png" alt="img" style="zoom:100%;" /><h2 id="细节：序列化"><a href="#细节：序列化" class="headerlink" title="细节：序列化"></a>细节：序列化</h2><p><strong>序列化原因：</strong>网络传输的数据是“扁平”的，最终需要转化成“扁平”的二进制数据在网络中传输。</p><p><strong>序列化方案：</strong>有很多序列化选择，一般需要综合考虑通用性、性能、可读性和兼容性。</p><p><strong>序列化方案对比：</strong></p><ul><li>采用<strong>二进制</strong>的序列化格式数据更加<strong>紧凑</strong></li><li>采用 <strong>JSON</strong> 等文本型序列化格式<strong>可读性更佳</strong>。</li></ul><h2 id="细节：协议"><a href="#细节：协议" class="headerlink" title="细节：协议"></a>细节：协议</h2><p><strong>制定协议的原因</strong>：需要定义一个协议，来约定一些规范，制定一些边界使得二进制数据可以被还原。</p><p>一般 RPC 协议都是<strong>采用协议头+协议体的方式。</strong></p><p><strong>协议头</strong>：存放元数据，包括：魔法位、协议的版本、消息的类型、序列化方式、整体长度、头长度、扩展位等。</p><p><strong>协议体</strong>：存放请求的数据。</p><blockquote><p>通过魔法位可以得知这是不是咱们约定的协议，比如魔法位固定叫 233 ，一看我们就知道这是 233 协议。</p><p>然后协议的版本是为了之后协议的升级。</p><p>从整体长度和头长度我们就能知道这个请求到底有多少位，前面多少位是头，剩下的都是协议体，这样就能识别出来，扩展位就是留着日后扩展备用。</p></blockquote><p>例如Dubbo 协议：</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411071758085.png" alt="img" style="zoom:120%;" /><h2 id="细节：网络传输"><a href="#细节：网络传输" class="headerlink" title="细节：网络传输"></a>细节：网络传输</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202411071758623.png" alt="img" style="zoom:90%;" /><p>一般而言用的都是 <strong>IO 多路复用</strong>，因为大部分 RPC 调用场景都是高并发调用，IO 复用可以利用较少的线程 hold 住很多请求。</p><p>一般 RPC 框架会使用已经造好的轮子来作为底层通信框架。例如： Java 语言的都会用 Netty ，人家已经封装的很好了，也做了很多优化，拿来即用，便捷高效。</p><h1 id="网关（Gateway）"><a href="#网关（Gateway）" class="headerlink" title="网关（Gateway）"></a>网关（Gateway）</h1><h2 id="如何实现过滤恶意攻击？"><a href="#如何实现过滤恶意攻击？" class="headerlink" title="如何实现过滤恶意攻击？"></a>如何实现过滤恶意攻击？</h2><p>Spring Cloud Gateway 可以通过多种方式来实现对恶意攻击的过滤：</p><ol><li><strong>限流（Rate Limiting）</strong>：<ul><li>使用 RequestRateLimiterGatewayFilterFactory 过滤器来限制来自特定 IP 地址的请求频率。</li><li>可以根据 IP 地址或其他标识符限制请求频率，从而防止 DDoS 攻击。</li></ul></li><li><strong>黑名单（Blacklisting）</strong>：<ul><li>可以根据 IP 地址或其他标识符创建黑名单，拒绝来自黑名单中的请求。</li></ul></li><li><strong>白名单（Whitelisting）</strong>：<ul><li>只允许来自白名单中的请求通过，其他请求直接拒绝。</li></ul></li><li><strong>安全过滤器（Security Filters）</strong>：<ul><li>可以添加自定义的安全过滤器来检测和阻止恶意请求，如 SQL 注入、XSS 攻击等。</li></ul></li></ol><h2 id="如何验证用户身份？"><a href="#如何验证用户身份？" class="headerlink" title="如何验证用户身份？"></a>如何验证用户身份？</h2><p>Spring Cloud Gateway 可以通过多种方式来实现用户身份验证：</p><ol><li><strong>OAuth2 &#x2F; OpenID Connect</strong>：<ul><li>使用 OAuth2 或 OpenID Connect 来验证用户的令牌。</li><li>可以与 Keycloak、Auth0 等认证服务器集成，实现统一的身份验证。</li></ul></li><li><strong>JWT（JSON Web Token）</strong>：<ul><li>使用 JWT 令牌来进行身份验证。</li><li>可以在请求头中携带 JWT 令牌，并在网关层解析和验证令牌的有效性。</li></ul></li><li><strong>API 密钥（API Key）</strong>：<ul><li>使用 API 密钥进行身份验证。</li><li>可以在请求头或查询参数中传递 API 密钥，并在网关层验证密钥的有效性。</li></ul></li><li><strong>自定义认证逻辑</strong>：<ul><li>可以添加自定义的过滤器来实现复杂的认证逻辑。</li><li>可以通过数据库查询用户的凭据，验证用户身份。</li></ul></li></ol><h1 id="熔断-x2F-保护（Sentinel）"><a href="#熔断-x2F-保护（Sentinel）" class="headerlink" title="熔断 &#x2F; 保护（Sentinel）"></a>熔断 &#x2F; 保护（Sentinel）</h1><p>服务熔断和保护机制是微服务架构中常用的技术，用于提高系统的稳定性和可靠性。</p><p>Sentinel 是一个专门用于实现服务熔断、流量控制和系统保护等功能流行的开源项目。</p><p>Sentinel 是一个流量控制和熔断降级框架，可以在分布式系统中快速实现<strong>流量控制、熔断降级、系统自适应保护</strong>等功能。</p><p>Sentinel 提供了多种流量控制策略和熔断规则，能够有效防止雪崩效应，保障系统的稳定性和可用性。</p><h2 id="Sentinel-的使用"><a href="#Sentinel-的使用" class="headerlink" title="Sentinel 的使用"></a>Sentinel 的使用</h2><p><strong>1. 引入sentinel依赖的使用</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Sentinel 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Sentinel 控制台客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Sentinel Spring Cloud 集成 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp.sentinel<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-spring-cloud-gateway-adapter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 配置 Sentinel</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment"># Sentinel 控制台地址</span></span><br></pre></td></tr></table></figure><p><strong>3. 创建限流规则</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlowController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initFlowRules</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;FlowRule&gt; rules = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">FlowRule</span> <span class="variable">rule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FlowRule</span>();</span><br><span class="line">        rule.setResource(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        rule.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class="line">        rule.setCount(<span class="number">1</span>); <span class="comment">// 每秒最多处理 1 个请求（QPS）</span></span><br><span class="line">        rules.add(rule);</span><br><span class="line">        FlowRuleManager.loadRules(rules);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 创建熔断规则</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DegradeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initDegradeRules</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;DegradeRule&gt; rules = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">DegradeRule</span> <span class="variable">rule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DegradeRule</span>();</span><br><span class="line">        rule.setResource(<span class="string">&quot;degrade&quot;</span>);</span><br><span class="line">        rule.setGrade(DegradeRule.GRADE_EXCEPTION_COUNT); <span class="comment">// 异常数熔断</span></span><br><span class="line">        rule.setCount(<span class="number">1</span>); <span class="comment">// 每分钟异常数超过 1 次时熔断</span></span><br><span class="line">        rule.setTimeWindow(<span class="number">10</span>); <span class="comment">// 熔断持续时间 10 秒</span></span><br><span class="line">        rules.add(rule);</span><br><span class="line">        DegradeRuleManager.loadRules(rules);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/degrade&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(&quot;degrade&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">degrade</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Degraded!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sentinel-控制台"><a href="#Sentinel-控制台" class="headerlink" title="Sentinel 控制台"></a>Sentinel 控制台</h2><p>Sentinel 提供了一个图形化的控制台，可以实时监控和管理流量控制、熔断降级等规则。通过控制台，可以动态调整规则，而不需要重启应用。</p><p><strong>启动控制台</strong></p><ol><li><p>下载 Sentinel 控制台：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/alibaba/Sentinel.git</span><br><span class="line">cd Sentinel</span><br><span class="line">cd sentinel-dashboard</span><br></pre></td></tr></table></figure></li><li><p>构建并启动控制台：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br><span class="line">java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar target/sentinel-dashboard.jar</span><br></pre></td></tr></table></figure></li><li><p>访问控制台： 访问 <code>http://localhost:8080</code>，使用默认用户名和密码 <code>sentinel</code> 登录。</p></li></ol><h1 id="——————服务治理——————"><a href="#——————服务治理——————" class="headerlink" title="——————服务治理——————"></a><div align="center">——————服务治理——————</div></h1><h1 id="服务雪崩（Service-Cascading）"><a href="#服务雪崩（Service-Cascading）" class="headerlink" title="服务雪崩（Service Cascading）"></a>服务雪崩（Service Cascading）</h1><p><strong>服务雪崩</strong>：一个服务失败导致整条链路的服务都失败的情形。</p><p><strong>解决</strong>：</p><ul><li>服务熔断（Hystrix ）：默认关闭，需要手动在引导类上添加注解<code>@EnableCircuitBreaker</code>。如果检测到 10 秒内请求的失败率超过 50%，就触发熔断机制。之后每隔 5 秒重新尝试请求微服务，如果微服务不能响应，继续走熔断机制。如果微服务可达，则关闭熔断机制，恢复正常请求</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404122016785.png" alt="image-20240412201605723" style="zoom: 50%;" /><ul><li>服务降级（Feign）：服务自我保护的一种方式，或者保护下游服务的一种方式，用于确保服务不会受请求突增影响变得不可用，确保服务不崩溃，一般在实际开发中与feign接口整合，编写降级逻辑</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;leadnews-article&quot;, fallback = IArticleClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IArticleClient</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/api/v1/article/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">saveArticle</span><span class="params">(<span class="meta">@RequestBody</span> ArticleDto dto)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IArticleClientFallback</span> <span class="keyword">implements</span> <span class="title class_">IArticleClient</span> &#123;</span><br><span class="line">    <span class="meta">@Overridepublic</span> ResponseResult <span class="title function_">saveArticle</span><span class="params">(ArticleDto dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.SERVER_ERROR,<span class="string">&quot;获取数据失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="如何监控微服务？有哪些检测工具？"><a href="#如何监控微服务？有哪些检测工具？" class="headerlink" title="如何监控微服务？有哪些检测工具？"></a>如何监控微服务？有哪些检测工具？</h1><p>常见APM工具：</p><ol><li><p>Springboot-admin</p></li><li><p>Prometheus、Grafana</p></li><li><p>zipkin</p></li><li><p>Skywalking</p><blockquote><p>Skywalking的监控流程：</p><ol><li>用skywalking监控接口、服务、物理实例的一些状态。特别是在压测的时候了解哪些服务和接口比较慢，可以针对性的分析和优化。</li><li>在skywalking设置告警规则，如果报错可以给相关负责人发短信和发邮件，第一时间知道项目的bug情况，第一时间修复。</li></ol></blockquote></li></ol><h1 id="服务熔断（Circuit-Breaker）"><a href="#服务熔断（Circuit-Breaker）" class="headerlink" title="服务熔断（Circuit Breaker）"></a>服务熔断（Circuit Breaker）</h1><blockquote><p><strong>Sentinel的实现见上</strong></p></blockquote><p>服务熔断是一种保护机制，当一个服务出现故障或响应超时时，暂时停止对该服务的请求，直到其恢复正常。这样可以<strong>防止因单个服务的问题而导致整个系统崩溃</strong>。</p><p>实现服务熔断的方法包括：</p><ul><li><strong>Hystrix</strong>：Netflix开源的容错库，支持服务熔断、超时和降级等功能。</li><li><strong>Resilience4j</strong>：轻量级的Java库，提供服务熔断等容错机制。</li><li><strong>Spring Cloud CircuitBreaker</strong>：基于Spring Boot的API，简化了服务熔断的集成。</li><li><strong>Envoy</strong>：边车代理可以集成服务熔断功能。</li></ul><p><strong>如何实现服务熔断：</strong></p><ol><li><strong>监控请求</strong>：监控对积分模块的请求情况，包括成功率、响应时间等。</li><li><strong>设置阈值</strong>：定义触发熔断的条件，如请求成功率低于一定比例、响应时间超过设定阈值等。</li><li><strong>打开断路器</strong>：当达到阈值时，断路器打开，暂时阻止请求。</li><li><strong>重试机制</strong>：设置重试间隔和次数，尝试重新建立连接。</li><li><strong>半开放状态</strong>：在一定时间后，进入半开放状态，允许少量请求通过，以检查服务是否恢复正常。</li><li><strong>关闭断路器</strong>：如果服务恢复正常，断路器关闭，恢复请求。</li></ol><h1 id="服务降级（Degradation）"><a href="#服务降级（Degradation）" class="headerlink" title="服务降级（Degradation）"></a>服务降级（Degradation）</h1><p>服务降级是<strong>在系统面临过载时，主动降低服务质量，以保证核心功能的正常运作</strong>。</p><p>例如：可以暂时关闭积分模块中的非关键功能，以释放资源。</p><h1 id="服务降级策略"><a href="#服务降级策略" class="headerlink" title="服务降级策略"></a>服务降级策略</h1><ol><li><strong>预设降级策略</strong>：定义在何种情况下启动降级机制，如CPU使用率过高、内存不足等。</li><li><strong>实现降级逻辑</strong>：在代码中实现降级逻辑，如返回默认值、简化处理流程等。</li><li><strong>动态配置</strong>：根据实际情况动态调整降级策略，如通过配置中心实时更新。</li><li><strong>记录降级事件</strong>：记录降级发生的次数和原因，便于后续分析和改进。</li></ol><h1 id="服务限流（Rate-Limiting）"><a href="#服务限流（Rate-Limiting）" class="headerlink" title="服务限流（Rate Limiting）"></a>服务限流（Rate Limiting）</h1><p>限制单位时间内请求的数量，防止服务被过多请求压垮。</p><h1 id="服务限流算法及实现"><a href="#服务限流算法及实现" class="headerlink" title="服务限流算法及实现"></a>服务限流算法及实现</h1><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>令牌桶算法</strong>：平滑处理突发流量，适用于需要<strong>灵活</strong>调整限流策略的场景。</li><li><strong>漏桶算法</strong>：平滑处理突发流量，适用于<strong>简单</strong>的限流需求。</li><li><strong>计数器算法</strong>：简单易用，适用于简单的限流需求。</li><li><strong>滑动窗口算法</strong>：细粒度控制，适用于需要更精确限流的场景。</li></ul><h2 id="令牌桶算法（Token-Bucket）"><a href="#令牌桶算法（Token-Bucket）" class="headerlink" title="令牌桶算法（Token Bucket）"></a>令牌桶算法（Token Bucket）</h2><p>原理：</p><ul><li>预先分配一定数量的令牌，每次请求消耗一个令牌，当令牌用尽时，拒绝请求。通过一个固定的令牌桶来控制请求的速率。令牌以恒定的速率生成并放入桶中，请求到来时需要消耗一个令牌。如果桶中没有令牌，则拒绝请求。</li></ul><p>优点：</p><ul><li>平滑处理突发流量，避免短时间内的请求激增。灵活性高，可以调整令牌生成速率和桶的容量。</li></ul><p>缺点：</p><ul><li>实现相对复杂，需要管理令牌的生成和消费。</li></ul><p>实现：</p><ul><li>初始化一个令牌桶，设置桶的容量和令牌生成速率。</li><li>每隔固定时间生成一个令牌，放入桶中。</li><li>每次请求到来时，检查桶中是否有令牌，如果有则消耗一个令牌，否则拒绝请求。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenBucketLimiter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger tokenBucket;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> refillRate; <span class="comment">// 每秒生成的令牌数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ScheduledExecutorService scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TokenBucketLimiter</span><span class="params">(<span class="type">int</span> capacity, <span class="type">int</span> refillRate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="built_in">this</span>.refillRate = refillRate;</span><br><span class="line">        <span class="built_in">this</span>.tokenBucket = <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(capacity);</span><br><span class="line">        <span class="built_in">this</span>.scheduler = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">        startRefill();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startRefill</span><span class="params">()</span> &#123;</span><br><span class="line">        scheduler.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">currentTokens</span> <span class="operator">=</span> tokenBucket.get();</span><br><span class="line">            <span class="keyword">if</span> (currentTokens &lt; capacity) &#123;</span><br><span class="line">                tokenBucket.incrementAndGet();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">currentTokens</span> <span class="operator">=</span> tokenBucket.get();</span><br><span class="line">            <span class="keyword">if</span> (currentTokens == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tokenBucket.compareAndSet(currentTokens, currentTokens - <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏桶算法（Leaky-Bucket）"><a href="#漏桶算法（Leaky-Bucket）" class="headerlink" title="漏桶算法（Leaky Bucket）"></a>漏桶算法（Leaky Bucket）</h2><p>原理：请求进入一个固定容量的桶中，以恒定的速度流出，当桶满时，拒绝新的请求。通过一个固定的漏桶来控制请求的速率。请求进入漏桶后，以恒定的速率流出。如果漏桶已满，则拒绝新的请求。</p><p>优点：平滑处理突发流量，避免短时间内的请求激增。实现相对（令牌桶）简单。</p><p>缺点：对突发流量的处理能力有限，可能会导致部分请求被拒绝。</p><p>实现：</p><ul><li>初始化一个漏桶，设置桶的容量和流出速率。</li><li>每次请求到来时，检查桶中是否有空间，如果有则放入桶中，否则拒绝请求。</li><li>每隔固定时间从桶中移出一个请求。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeakyBucketLimiter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Queue&lt;Long&gt; bucket;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> leakRate; <span class="comment">// 每秒流出的请求数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ScheduledExecutorService scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LeakyBucketLimiter</span><span class="params">(<span class="type">int</span> capacity, <span class="type">int</span> leakRate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="built_in">this</span>.leakRate = leakRate;</span><br><span class="line">        <span class="built_in">this</span>.bucket = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.scheduler = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">        startLeaking();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startLeaking</span><span class="params">()</span> &#123;</span><br><span class="line">        scheduler.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; leakRate &amp;&amp; !bucket.isEmpty(); i++) &#123;</span><br><span class="line">                bucket.poll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bucket.size() &lt; capacity) &#123;</span><br><span class="line">            bucket.offer(System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计数器算法（Counter）"><a href="#计数器算法（Counter）" class="headerlink" title="计数器算法（Counter）"></a>计数器算法（Counter）</h2><p>原理：</p><ul><li>基于时间窗口的请求数统计，设置最大连接数。在一个固定的时间窗口内统计请求的数量，如果超过了设定的阈值，则拒绝后续的请求。</li></ul><p>优点：</p><ul><li>简单，容易理解。成本低，性能开销小。</li></ul><p>缺点：</p><ul><li>时间窗口边缘的问题：如果在时间窗口的最后几秒钟有大量的请求，而在下一个时间窗口的开始几秒钟也有大量的请求，可能会导致短时间内超过阈值的情况。</li></ul><p>实现：</p><ul><li>初始化一个计数器和一个时间窗口。</li><li>每次请求到来时，增加计数器的值。</li><li>如果计数器的值超过设定的阈值，则拒绝请求。</li><li>当时间窗口结束时，重置计数器。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CounterLimiter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> threshold;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> windowTime; <span class="comment">// 时间窗口，单位：毫秒</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> startTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CounterLimiter</span><span class="params">(<span class="type">int</span> threshold, <span class="type">long</span> windowTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.threshold = threshold;</span><br><span class="line">        <span class="built_in">this</span>.windowTime = windowTime;</span><br><span class="line">        <span class="built_in">this</span>.startTime = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span> (currentTime - startTime &gt;= windowTime) &#123;</span><br><span class="line">            counter.set(<span class="number">0</span>);</span><br><span class="line">            startTime = currentTime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (counter.get() &lt; threshold) &#123;</span><br><span class="line">            counter.incrementAndGet();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="滑动窗口算法（Sliding-Window）"><a href="#滑动窗口算法（Sliding-Window）" class="headerlink" title="滑动窗口算法（Sliding Window）"></a>滑动窗口算法（Sliding Window）</h2><p>原理：</p><ul><li>将计数器细分成多个更小的时间窗口。通过将时间窗口划分为多个小的时间段（桶），每个时间段记录请求的数量。当新的请求到来时，根据当前时间所在的桶来统计请求数量，从而实现更细粒度的限流。</li></ul><p>优点：</p><ul><li>细粒度控制，避免了固定时间窗口的边缘问题。</li><li>更精确地反映最近一段时间内的请求情况。</li></ul><p>缺点：</p><ul><li>实现相对复杂，需要管理多个时间段的计数。</li></ul><p>实现：</p><ul><li>初始化一个数组或环形缓冲区，每个元素代表一个小的时间段。</li><li>每次请求到来时，找到当前时间所在的小时间段，增加该时间段的计数。</li><li>如果总请求数量超过设定的阈值，则拒绝请求。</li><li>定期清除过期的时间段。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SlidingWindowLimiter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicIntegerArray buckets;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> bucketSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> threshold;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> windowTime; <span class="comment">// 时间窗口，单位：毫秒</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> bucketTime; <span class="comment">// 每个桶的时间，单位：毫秒</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> startTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SlidingWindowLimiter</span><span class="params">(<span class="type">int</span> threshold, <span class="type">long</span> windowTime, <span class="type">int</span> bucketSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.threshold = threshold;</span><br><span class="line">        <span class="built_in">this</span>.windowTime = windowTime;</span><br><span class="line">        <span class="built_in">this</span>.bucketSize = bucketSize;</span><br><span class="line">        <span class="built_in">this</span>.buckets = <span class="keyword">new</span> <span class="title class_">AtomicIntegerArray</span>(bucketSize);</span><br><span class="line">        <span class="built_in">this</span>.bucketTime = windowTime / bucketSize;</span><br><span class="line">        <span class="built_in">this</span>.startTime = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">int</span> <span class="variable">currentIndex</span> <span class="operator">=</span> (<span class="type">int</span>) ((currentTime - startTime) / bucketTime) % bucketSize;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清除过期的桶</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketSize; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((currentTime - startTime) / bucketTime - i &gt; bucketSize) &#123;</span><br><span class="line">                buckets.set(i, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">totalRequests</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketSize; i++) &#123;</span><br><span class="line">            totalRequests += buckets.get(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (totalRequests &lt; threshold) &#123;</span><br><span class="line">            buckets.incrementAndGet(currentIndex);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="—————-分布式事务—————"><a href="#—————-分布式事务—————" class="headerlink" title="—————-分布式事务—————-"></a><div align="center">—————-分布式事务—————-</div></h1><blockquote><p>分布式事务是指<strong>跨越多个数据库</strong>或<strong>分布式系统</strong>的事务。</p></blockquote><h1 id="分布式事务-与-传统事务-的区别"><a href="#分布式事务-与-传统事务-的区别" class="headerlink" title="分布式事务 与 传统事务 的区别"></a>分布式事务 与 传统事务 的区别</h1><p>相同点：</p><ol><li><strong>ACID特性</strong>：分布式事务和传统事务都遵循ACID（原子性、一致性、隔离性、持久性）特性，保证事务的正确性和完整性。</li><li><strong>保证数据一致性</strong>：无论是分布式事务还是传统事务，都致力于确保事务操作在执行完毕后数据的一致性。</li><li><strong>提供事务管理</strong>：分布式事务和传统事务都提供了事务管理机制，可以控制事务的提交、回滚和隔离级别。</li></ol><p>不同点：</p><ol><li><strong>分布式环境</strong>：分布式事务通常在多个独立的节点或系统之间进行操作，而传统事务通常在单个数据库或系统中进行操作。</li><li><strong>事务管理协议</strong>：传统事务通常使用本地事务管理机制（如JDBC事务、Spring事务管理），而分布式事务需要使用分布式事务管理协议（如XA协议、TCC协议）来实现跨多个系统的事务一致性。</li><li><strong>性能开销</strong>：由于涉及多个系统的通信和协调，分布式事务通常比传统事务具有更高的性能开销和复杂度。</li><li><strong>故障处理</strong>：在分布式环境下，出现故障或网络问题可能会导致事务的不确定状态，需要额外的机制来保证事务的正确性。</li><li><strong>可伸缩性</strong>：传统事务在面对大规模的并发请求时可能会成为性能瓶颈，而分布式事务可以通过拆分事务、分布式锁等措施来提高可伸缩性。</li></ol><h1 id="常见的分布式事务解决方案"><a href="#常见的分布式事务解决方案" class="headerlink" title="常见的分布式事务解决方案"></a>常见的分布式事务解决方案</h1><p>为了确保分布式事务的ACID，有以下常见的分布式事务解决方案：</p><p><strong>1. 两阶段提交（Two-Phase Commit, 2PC）【XA 协议、Atomikos、Bitronix】</strong></p><p>最传统的分布式事务协议之一。包括准备阶段和提交阶段，其中协调者与参与者进行交互以决定是否提交或回滚事务。</p><ol><li><strong>准备阶段</strong>：协调者询问所有参与者是否准备好提交事务。</li><li><strong>提交阶段</strong>：如果所有参与者都同意，则协调者命令所有参与者提交；如果任何一个参与者不同意，则协调者命令所有参与者回滚。</li></ol><p><strong>2. 三阶段提交（Three-Phase Commit, 3PC）【SAGA、TCC（Try-Confirm-Cancel）、最终一致性】</strong></p><p>3PC是在2PC的基础上增加了预表决阶段，以减少阻塞情况的发生。</p><ol><li><strong>预表决阶段</strong>：协调者向参与者发送预表决请求。</li><li><strong>准备阶段</strong>：参与者回复预表决结果。</li><li><strong>提交阶段</strong>：根据参与者回复的结果，协调者发送提交或回滚指令。</li></ol><p><strong>3. 单边提交（One-Sided Commit）【AP系统、DDD架构】</strong></p><p>在这种方案中，参与者独立决定是否提交事务，而不需要等待协调者的指示。</p><p>这减少了事务处理时间，但增加了协调复杂度。</p><h1 id="常用的分布式服务四种接口幂等性方案"><a href="#常用的分布式服务四种接口幂等性方案" class="headerlink" title="常用的分布式服务四种接口幂等性方案"></a>常用的分布式服务四种接口幂等性方案</h1><p><strong>幂等性</strong>：两次操作的结果一致。</p><ol><li><strong>业务属性保障幂等</strong>：利用主键生成器或者唯一性约束确保数据库的数据唯一；</li><li><strong>额外的状态字段与业务逻辑控制</strong>：根据状态判断工作流程</li><li><strong>申请预置令牌</strong>：<img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409051933463.png"  style="zoom: 50%;" ></li><li><strong>本地消息事件表</strong>：<img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409051935256.png"  style="zoom: 60%;" ></li></ol><h1 id="Xxl-Job-路由策略？任务执行失败了怎么解决？"><a href="#Xxl-Job-路由策略？任务执行失败了怎么解决？" class="headerlink" title="Xxl-Job 路由策略？任务执行失败了怎么解决？"></a>Xxl-Job 路由策略？任务执行失败了怎么解决？</h1><p>Xxl-Job 是一款轻量级分布式的任务调度框架，主要用于解决定时任务的分布式调度问题。它支持多种路由策略，也提供了任务执行失败后的处理机制。</p><p><strong>Xxl-Job 的路由策略</strong></p><p>Xxl-Job 支持多种任务分配策略，可以根据业务需求选择合适的策略来分配任务到不同的执行器。以下是几种常见的路由策略：</p><ol><li><strong>FIRST</strong>：第一个执行器执行。</li><li><strong>ROUND</strong>：轮询分发，按照顺序依次分发给不同的执行器。</li><li><strong>HASH</strong>：根据指定的参数进行 hash 后取模分发。</li><li><strong>CONSISTENT_HASH</strong>：一致性哈希算法分发。</li><li><strong>RANDOM</strong>：随机分发。</li><li><strong>BUCKET4</strong>：四分桶分发，将执行器分为四个桶，根据任务触发时间分配到不同的桶中执行。</li><li><strong>BUCKET8</strong>：八分桶分发，类似于四分桶，但是分成八个桶。</li></ol><p><strong>Xxl-Job 任务执行失败的解决方法</strong></p><p>当 Xxl-Job 的任务执行失败时，可以采取以下措施来解决问题：</p><ol><li><strong>查看日志</strong></li></ol><p>首先查看任务执行的日志，了解具体的错误原因。Xxl-Job 提供了任务执行日志功能，可以在界面上查看历史执行记录及其输出日志。</p><ol start="2"><li><strong>调整任务执行超时时间</strong></li></ol><p>如果是因为任务执行时间过长而导致超时失败，可以适当调整任务的执行超时时间。</p><ol start="3"><li><strong>重试机制</strong><br>Xxl-Job 支持配置任务的重试次数。如果任务执行失败，可以配置重试机制来自动重新执行任务。</li><li><strong>失败回调</strong><br>配置失败回调机制，当任务执行失败时，可以触发回调函数进行额外的处理逻辑，比如记录失败信息、通知相关人员等。</li><li><strong>监控与报警</strong><br>设置监控报警机制，当任务执行失败时及时收到报警通知，以便及时介入处理。</li><li><strong>执行器故障排查</strong><br>如果任务执行失败是由于执行器本身的问题，比如执行器所在的服务器资源不足、程序异常等，需要排查执行器的问题。</li><li><strong>调整任务执行策略</strong><br>如果是由于任务执行策略不合理导致的任务失败，可以考虑调整任务的触发策略、执行器的分配策略等。</li><li><strong>代码调试</strong><br>如果是任务逻辑本身的问题，可以通过调试代码来找到并修复问题所在。</li></ol><p>总之，解决 Xxl-Job 任务执行失败的方法主要是通过排查日志、调整配置、优化任务逻辑等方式来解决。具体的方法需要根据实际情况灵活选择。</p><h1 id="怎么解决大数据量的任务并发执行？"><a href="#怎么解决大数据量的任务并发执行？" class="headerlink" title="怎么解决大数据量的任务并发执行？"></a>怎么解决大数据量的任务并发执行？</h1><p>处理大数据量的任务同时执行时，面临的挑战主要集中在资源消耗、数据处理速度、并发控制等方面。以下是一些常见的解决方案和技术手段：</p><ol><li><p><strong>分批处理（Batch Processing）</strong><br>将大数据量分割成小批量数据，然后逐批处理。这种方法可以降低单次处理的数据量，从而减少内存占用和提高处理效率。</p></li><li><p><strong>异步处理（Asynchronous Processing）</strong><br>使用消息队列（如 RabbitMQ、Kafka 等）来异步处理数据。这样可以将大量数据放入队列中，然后由多个消费者并发处理，提高处理速度。</p></li><li><p><strong>多线程或多进程（Multithreading&#x2F;Multiprocessing）</strong><br>利用多线程或多进程技术来并发处理数据。这种方式可以充分利用多核 CPU 的能力，提高处理速度。</p></li><li><p><strong>分布式处理（Distributed Processing）</strong><br>采用分布式计算框架（如 Hadoop MapReduce、Apache Spark、Flink 等）来分散数据处理任务。这些框架可以将数据切片并行处理，并自动处理数据分发、容错等问题。</p></li><li><p><strong>水平扩展（Horizontal Scaling）</strong><br>通过增加更多的服务器来分散负载。水平扩展意味着增加更多的实例来处理更多的请求，而不是在单一节点上增加更多的资源。</p></li><li><p><strong>缓存机制（Caching）</strong><br>使用缓存来减轻数据库的压力。对于频繁读取的数据，可以将其缓存起来，减少对数据库的访问频率。</p></li><li><p><strong>限流（Rate Limiting）</strong><br>为了避免瞬间大量请求导致系统崩溃，可以设置限流机制来控制请求速率。</p></li><li><p><strong>优先级队列（Priority Queue）</strong><br>使用优先级队列来处理不同重要级别的任务。这样可以确保重要任务优先得到处理。</p></li><li><p><strong>动态调度（Dynamic Scheduling）</strong><br>根据实时负载动态调整资源分配，确保资源的有效利用。</p></li></ol><p><strong>实施建议</strong></p><ol><li><strong>评估需求</strong>：首先明确任务的具体需求，包括数据量大小、处理时间限制、可用资源等。</li><li><strong>性能测试</strong>：在实施任何方案之前，进行性能测试以确定最佳方案。</li><li><strong>逐步实施</strong>：从小规模开始实施，逐步扩大规模，确保方案的可行性和稳定性。</li><li><strong>持续优化</strong>：随着业务的发展，不断调整和优化方案，确保系统的高效运行。</li></ol><p>通过上述方法和技术手段，可以有效地应对大数据量任务的同时执行带来的挑战。</p><h1 id="—————–架构设计—————–"><a href="#—————–架构设计—————–" class="headerlink" title="—————–架构设计—————–"></a><div align="center">—————–架构设计—————–</div></h1><h1 id="例：讲一下分布式-ID-发号器的原理"><a href="#例：讲一下分布式-ID-发号器的原理" class="headerlink" title="例：讲一下分布式 ID 发号器的原理"></a>例：讲一下分布式 ID 发号器的原理</h1><p><strong>设计目标</strong></p><ol><li><strong>全局唯一性</strong>：生成的 ID 必须在分布式系统中全局唯一。</li><li><strong>高性能</strong>：生成 ID 的操作应该是高效的，不会成为系统瓶颈。</li><li><strong>可扩展性</strong>：随着系统的扩展，ID 发号器也应能够轻松扩展。</li><li><strong>容错性</strong>：即使部分节点失效，系统也应该能够继续正常工作。</li><li><strong>无中心依赖</strong>：减少对单一中心服务的依赖，以提高系统的可用性。</li></ol><p><strong>实现原理：Snowflake 算法</strong></p><p>Snowflake 算法生成的 ID 是一个 64 位的整数，格式如下：</p><table><thead><tr><th align="center">0（1 bit）</th><th align="center">时间戳（41 bit）</th><th align="center">工作机器 ID（10 bit）</th><th align="center">序列号（12 bit）</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">123456789012345678901234567890123456789012345678901234567890</td><td align="center">00000000000</td><td align="center">000000000000</td></tr></tbody></table><ul><li><strong>标记位</strong>：1 位，占位符。</li><li><strong>时间戳</strong>：41 位的时间戳，可以使用大约 69 年。</li><li><strong>工作机器 ID</strong>：5 位，可以标识不同的机器。</li><li><strong>序列号</strong>：12 位，可以支持同一毫秒内生成的多个 ID。</li></ul><p><strong>优点</strong>： 生成的 ID 是有序的、高性能、适合高并发场景、实现简单。 </p><p><strong>缺点</strong>： 需要时间同步、如果机器 ID 分配不当，可能会导致冲突。</p><h1 id="例：讲一下扫码登陆的原理"><a href="#例：讲一下扫码登陆的原理" class="headerlink" title="例：讲一下扫码登陆的原理"></a>例：讲一下扫码登陆的原理</h1><p>在验证码登录场景中，服务器生成 token 并与 PC 端通信的流程通常是通过以下步骤完成的：</p><p><strong>1. PC 端请求二维码</strong></p><ul><li>PC 端向服务器请求生成一个二维码（通常是一个唯一的 <code>sessionId</code> 或 <code>uuid</code>）。</li><li>服务器生成一个唯一的 <code>sessionId</code>，并将这个 <code>sessionId</code> 绑定到当前 PC 端的会话。</li><li>服务器将这个 <code>sessionId</code> 编码成二维码图片，发送给 PC 端展示。</li></ul><p><strong>2. 手机扫描二维码</strong></p><ul><li>用户通过手机扫描 PC 端的二维码。</li><li>手机端读取二维码中的 <code>sessionId</code> 并向服务器发送一个请求，表示要确认登录。此请求通常包含用户的登录凭证（例如验证码、短信验证码等）和从二维码中提取的 <code>sessionId</code>。</li></ul><p><strong>3. 服务器验证并生成 Token</strong></p><ul><li>服务器接收到手机端的请求后，首先验证手机端提供的登录凭证是否合法。</li><li>如果验证通过，服务器为该用户生成一个唯一的登录 Token（例如 JWT 或 Session Token），表示用户已成功登录。</li><li>服务器会将生成的 Token 和手机端扫描二维码时传入的 <code>sessionId</code> 进行绑定。</li></ul><p><strong>4. 通知 PC 端</strong></p><ul><li>PC 端在二维码展示期间，会不断向服务器发送请求进行轮询（或使用 WebSocket 建立长连接），以查询该 <code>sessionId</code> 的状态是否已被确认登录。</li><li>一旦服务器确认手机端登录成功，服务器会在轮询或 WebSocket 通信中通知 PC 端该 <code>sessionId</code> 已绑定 Token。</li><li>服务器将生成的 Token 发送给 PC 端，PC 端收到 Token 后可以将其存储在 Cookie 或 LocalStorage 中，并以此作为用户身份进行后续操作。</li></ul><p><strong>5. PC 端登录成功</strong></p><ul><li>PC 端收到服务器发送的 Token 后，即可认为用户已登录成功。</li><li>随后 PC 端可以使用这个 Token 访问服务器的受保护资源，例如个人主页或其他服务。</li></ul><p><strong>关键流程总结：</strong></p><ol><li><strong>二维码生成</strong>：PC 端获取一个唯一的 <code>sessionId</code>，并展示对应二维码。</li><li><strong>手机扫描确认</strong>：手机端扫描二维码后，将 <code>sessionId</code> 和登录凭证提交给服务器。</li><li><strong>服务器生成 Token</strong>：服务器验证通过后，生成用户的登录 Token 并将其与 <code>sessionId</code> 绑定。</li><li><strong>PC 端获取 Token</strong>：PC 端通过轮询或 WebSocket 等方式，接收服务器发来的 Token，从而完成登录。</li></ol><p><strong>通信方式：</strong></p><ul><li><strong>轮询（Polling）</strong>：PC 端通过短时间间隔向服务器轮询请求，检查 <code>sessionId</code> 的登录状态。</li><li><strong>WebSocket</strong>：PC 端和服务器通过 WebSocket 建立长连接，服务器在 Token 生成后通过 WebSocket 将 Token 直接推送给 PC 端。</li></ul><p>通过这种方式，服务器知道要将 Token 发送给哪个 PC 端，因为 <code>sessionId</code>（二维码）在 PC 端和服务器之间建立了唯一的关联。</p><h1 id="例：购物商城应对大流量、大并发的三类策略"><a href="#例：购物商城应对大流量、大并发的三类策略" class="headerlink" title="例：购物商城应对大流量、大并发的三类策略"></a>例：购物商城应对大流量、大并发的三类策略</h1><p><strong>分流</strong></p><p>主要是将流量分散到不同的系统和服务上，以减轻单个服务的压力。常见的方法有水平扩展、业务分区、分片和动静分离。</p><ul><li>水平扩展：通过增加服务器数量来提高访问量和读写能力，如商品读库和商品写库。</li><li>业务分区：根据业务领域划分成不同的子系统，如商品库和交易库。</li><li>分片：根据不同业务类型进行分片，如秒杀系统从交易系统中分离；非核心业务分离。</li><li>动静分离：将动态页面降级为静态页面，整体降级到其他页面，以及部分页面内容降级。</li></ul><p><strong>降级</strong></p><p>当系统压力过大时，采取一些措施降低服务质量，以保障关键功能的正常运行。</p><ul><li>页面降级：对页面进行降级处理，如整体降级到其他页面，或者只保留部分内容。</li><li>业务功能降级：放弃一些非关键业务，如购物车库存状态。</li><li>应用系统降级：对下游系统进行降级处理，如一次拆分暂停。</li><li>数据降级：远程服务降级到本地缓存，如运费。</li></ul><p><strong>限流</strong></p><p>限制请求的数量，以保护系统资源和稳定性。</p><ul><li>Nginx前端限流：京东研发的业务路由，规则包括账户、IP、系统调用逻辑等。</li><li>应用系统限流：客户端限流和服务端限流。</li><li>数据库限流：红线区，力保数据库。</li></ul><h1 id="例：如何设计一个秒杀功能？"><a href="#例：如何设计一个秒杀功能？" class="headerlink" title="例：如何设计一个秒杀功能？"></a>例：如何设计一个秒杀功能？</h1><p><strong>1. 系统架构设计</strong></p><p><strong>前端</strong>：</p><ul><li><p><strong>页面静态化</strong></p><ul><li>使用静态页面来减少对服务器的压力，仅在秒杀开始时发送请求。</li></ul></li><li><p><strong>秒杀按钮控制</strong></p><ul><li><p>使用 JavaScript 控制秒杀按钮的状态，确保只有在秒杀开始时才能点击。</p></li><li><p>增加防刷机制，如限制短时间内请求频率、验证码等。</p></li></ul></li></ul><p><strong>后端</strong>：处理秒杀逻辑，包括库存扣减、订单生成等。</p><ul><li><strong>读多写少场景</strong><ul><li><strong>缓存</strong>：使用 Redis 等缓存技术存储商品信息和库存，减少对数据库的直接访问。</li><li><strong>异步处理</strong>：使用消息队列（如 RabbitMQ、Kafka）处理秒杀请求，异步生成订单。</li></ul></li><li><strong>库存处理</strong><ul><li><strong>预扣库存</strong>：秒杀开始前提前扣减库存，避免高并发时库存不足。</li><li><strong>回滚机制</strong>：用户在规定时间内未支付订单，则释放库存。</li></ul></li><li><strong>限流</strong><ul><li><strong>令牌桶</strong>：使用令牌桶算法限制请求速率。</li><li><strong>漏桶</strong>：使用漏桶算法平滑请求。</li></ul></li></ul><p><strong>负载均衡</strong>：使用负载均衡器（如 Nginx、HAProxy）分散请求压力。</p><p><strong>微服务架构</strong>：将秒杀功能拆分为独立的服务，便于扩展和维护。</p><p><strong>2. 数据存储设计</strong></p><p><strong>数据库设计</strong></p><ul><li><p><strong>读写分离</strong></p><ul><li><strong>主从复制</strong>：数据库采用主从复制，减轻单一数据库的压力。</li></ul></li><li><p><strong>事务处理</strong></p><ul><li><p><strong>乐观锁</strong>：使用乐观锁机制防止库存超卖，如使用版本号或 CAS（Compare and Swap）操作。</p></li><li><p><strong>悲观锁</strong>：在极端情况下使用悲观锁，但需注意性能影响。</p></li></ul></li></ul><p><strong>缓存设计</strong></p><ul><li><p><strong>缓存穿透</strong></p><ul><li><p>使用<strong>布隆过滤器</strong>预先过滤不存在的商品 ID。</p></li><li><p><strong>缓存空值</strong>，减少对数据库的无效请求。</p></li></ul></li><li><p><strong>缓存击穿</strong></p><ul><li><p><strong>预热缓存</strong>：秒杀开始前将所有商品信息加载到缓存中。</p></li><li><p>使用<strong>分布式锁</strong>或 TTL（Time To Live）策略防止缓存击穿。</p></li></ul></li><li><p><strong>分布式锁</strong></p><ul><li>使用 Redis 的 SETNX 或 Redlock 算法实现分布式锁，防止并发操作导致的数据不一致。</li></ul></li></ul><p><strong>3. 安全性（防作弊）</strong></p><ul><li>限制 IP 地址的访问频率。</li><li>检测异常请求模式。</li><li>使用 CAPTCHA 或 reCAPTCHA 验证码。</li></ul><p><strong>4. 测试</strong></p><ul><li><strong>性能测试</strong>：使用 JMeter 或 LoadRunner 进行压力测试。</li><li><strong>功能测试</strong>：确保系统在各种边界条件下表现正常。</li><li><strong>兼容性测试</strong>：测试不同浏览器和设备上的表现。</li></ul><p><strong>5. 监控与日志</strong></p><ul><li><strong>性能监控</strong>：使用 Prometheus、Grafana 等工具实时监控系统性能。</li><li><strong>错误日志</strong>：记录系统运行时的错误信息，便于问题排查。</li></ul><p><strong>6. 秒杀接口示例（Java Spring Boot）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeckillController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/seckill/&#123;productId&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">seckillProduct</span><span class="params">(<span class="meta">@PathVariable(&quot;productId&quot;)</span> String productId)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查库存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">stockKey</span> <span class="operator">=</span> <span class="string">&quot;product_stock_&quot;</span> + productId;</span><br><span class="line">        <span class="type">String</span> <span class="variable">stockValue</span> <span class="operator">=</span> redisTemplate.opsForValue().get(stockKey);</span><br><span class="line">        <span class="keyword">if</span> (stockValue == <span class="literal">null</span> || Integer.parseInt(stockValue) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;库存不足&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 扣减库存</span></span><br><span class="line">        redisTemplate.opsForValue().decrement(stockKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成订单</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;秒杀成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例：如何设计一个订单超时取消功能？"><a href="#例：如何设计一个订单超时取消功能？" class="headerlink" title="例：如何设计一个订单超时取消功能？"></a>例：如何设计一个订单超时取消功能？</h1><ol><li>定时任务（存在延后取消问题）</li><li><strong>使用MQ的延时任务</strong></li></ol><h1 id="例：统计某家店铺销量-top-50-的商品"><a href="#例：统计某家店铺销量-top-50-的商品" class="headerlink" title="*例：统计某家店铺销量 top 50 的商品?"></a>*例：统计某家店铺销量 top 50 的商品?</h1><p><strong>1. 数据收集与存储</strong></p><p>首先，通过一个可靠的数据收集和存储系统来记录每次销售的商品信息。这些消息包括但不限于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">商品ID、销售数量、销售时间、其他相关属性（如价格、类别等）</span><br></pre></td></tr></table></figure><p><strong>2. 数据汇总</strong></p><p>对于销售数据，你需要定期或者实时地汇总销售情况。这可以通过以下几种方式实现：</p><p><strong>批处理（Batch Processing）</strong>：使用批处理框架（如 Apache Hadoop、Apache Spark）来定期（如每天）汇总销售数据，并计算出每个商品的总销量。然后将结果存储在一个易于查询的地方，如另一个数据库表或文件系统。</p><p><strong>实时处理（Real-time Processing）</strong>：使用流处理框架（如 Apache Kafka + Apache Flink 或 Apache Spark Streaming）来实时处理销售数据。这种方法可以更快地得到最新的销售排名信息。</p><p><strong>3. 排序与展示</strong></p><p><strong>SQL 查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id, product_name, <span class="built_in">SUM</span>(quantity) <span class="keyword">AS</span> total_quantity</span><br><span class="line"><span class="keyword">FROM</span> sales</span><br><span class="line"><span class="keyword">WHERE</span> shop_id <span class="operator">=</span> ?</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> total_quantity <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">50</span>;</span><br></pre></td></tr></table></figure><p><strong>API 接口</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /shops/&#123;shopId&#125;/top-products?limit=50</span><br></pre></td></tr></table></figure><p>返回的 JSON 格式数据示例如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;product_id&quot;</span><span class="punctuation">:</span> <span class="number">114514</span><span class="punctuation">,</span> <span class="attr">&quot;product_name&quot;</span><span class="punctuation">:</span> “商品A”<span class="punctuation">,</span> <span class="attr">&quot;total_quantity&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;product_id&quot;</span><span class="punctuation">:</span> <span class="number">1919810</span><span class="punctuation">,</span> <span class="attr">&quot;product_name&quot;</span><span class="punctuation">:</span> “商品B”<span class="punctuation">,</span> <span class="attr">&quot;total_quantity&quot;</span><span class="punctuation">:</span> <span class="number">950</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p><strong>4. 缓存策略</strong></p><p>为了加快响应速度，使用缓存技术（如 Redis）来存储最近的查询结果。</p><p>当有新的销售数据到来时，可以更新缓存中的数据，而不是每次都重新计算。</p><p><strong>5. 前端展示</strong></p><p>前端应用可以使用现代 JavaScript 框架（如 React、Vue.js 或 Angular）来展示销售排名。可以使用图表库（如 ECharts、Chart.js）来可视化展示数据。</p><p><strong>6. 安全与权限管理</strong></p><p>使用认证和授权机制，确保只有授权的商家才能访问自己店铺的销售数据。</p><p><strong>7. 性能优化</strong></p><ul><li><strong>索引优化</strong>：确保在<code>sales</code>销售表上有适当的索引来加速查询。</li><li><strong>分页处理</strong>：如果数据量非常大，可以考虑使用分页来减少单次请求的数据量。</li></ul><h1 id="例：如何设计一个点赞功能？"><a href="#例：如何设计一个点赞功能？" class="headerlink" title="*例：如何设计一个点赞功能？"></a>*例：如何设计一个点赞功能？</h1><p><strong>1. 前端交互逻辑</strong></p><p><strong>点赞&#x2F;取消点赞操作</strong>：当用户点击点赞按钮时，前端向后端发送一个请求，包含点赞<strong>用户的 ID</strong> 和被点赞的朋友圈<strong>动态的 ID</strong>。</p><p><strong>2. 后端设计</strong></p><p><strong>数据库设计</strong></p><ul><li><strong>朋友圈动态表</strong>：记录每条动态的信息，包含动态的 ID、作者、内容、图片等。</li><li><strong>点赞表</strong>：记录点赞的关系，可以使用关联表的方式来存储点赞数据。表中至少包含点赞用户的 ID 和被点赞的朋友圈动态的 ID。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 动态表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> posts (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    user_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    category_type <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    topic_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    content TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    modified_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    is_deleted <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 点赞表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> likes (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    post_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    user_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    modified_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    is_deleted <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (post_id) <span class="keyword">REFERENCES</span> posts(id),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (user_id) <span class="keyword">REFERENCES</span> users(id),</span><br><span class="line">    <span class="keyword">UNIQUE</span> KEY unique_like (post_id, user_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>API 接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/posts/&#123;postId&#125;/likes&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">likePost</span><span class="params">(<span class="meta">@PathVariable</span> Integer postId, <span class="meta">@RequestParam</span> Integer userId)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查点赞是否已存在</span></span><br><span class="line">    <span class="keyword">if</span> (likeService.existsLikeForUser(postId, userId)) &#123;</span><br><span class="line">        <span class="comment">// 如果存在则删除点赞</span></span><br><span class="line">        likeService.removeLike(postId, userId);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;取消点赞成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 创建新的点赞</span></span><br><span class="line">        <span class="type">Like</span> <span class="variable">like</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Like</span>();</span><br><span class="line">        like.setPostId(postId);</span><br><span class="line">        like.setUserId(userId);</span><br><span class="line">        likeService.addLike(like);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;点赞成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>前后端实时通信</strong></p><p>可以在前端实现实时点赞数的更新。当有新的点赞或取消点赞事件发生时，后端可以推送更新到前端，前端接收到更新后立即刷新页面。</p><p><strong>设置 WebSocket 服务器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WebSocketHandler webSocketHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WebSocketConfig</span><span class="params">(WebSocketHandler webSocketHandler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.webSocketHandler = webSocketHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addHandler(webSocketHandler, <span class="string">&quot;/websocket&quot;</span>).setAllowedOrigins(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketHandler</span> <span class="keyword">extends</span> <span class="title class_">TextWebSocketHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;WebSocketSession&gt; sessions = Collections.synchronizedSet(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        sessions.add(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        sessions.remove(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">broadcast</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (sessions) &#123;</span><br><span class="line">            <span class="keyword">for</span> (WebSocketSession session : sessions) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    session.sendMessage(<span class="keyword">new</span> <span class="title class_">TextMessage</span>(message));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// Handle incoming messages if needed</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>处理点赞事件</strong>：每当有新的点赞或取消点赞事件发生时，后端需要将这些事件广播给所有连接的客户端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLikeEvent</span><span class="params">(LikeEvent event)</span> &#123;</span><br><span class="line">    <span class="comment">// 更新数据库中的点赞数等</span></span><br><span class="line">    updateDatabase(event);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;type\&quot;: \&quot;LIKE\&quot;, \&quot;postId\&quot;: &quot;</span> + event.getPostId() + <span class="string">&quot;, \&quot;newCount\&quot;: &quot;</span> + event.getNewCount() + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 广播消息</span></span><br><span class="line">    webSocketHandler.broadcast(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 数据统计</strong></p><ul><li><strong>点赞统计</strong>：可以定期汇总点赞数据，生成报告或图表，帮助分析用户行为。</li><li><strong>热门动态推荐</strong>：根据点赞数排序，推荐热门动态给用户。</li></ul><p><strong>4. 安全性</strong></p><ul><li><strong>认证与授权</strong>：确保只有登录用户才能进行点赞操作，并且只能点赞自己的朋友发布的动态。</li><li><strong>防刷票</strong>：采取措施防止恶意刷票，如限制点赞频率、验证用户身份等。</li></ul><p><strong>5. 性能优化</strong></p><ul><li><strong>缓存</strong>：使用缓存（如 Redis）来存储热点数据，减少数据库访问频率。</li><li><strong>异步处理</strong>：点赞操作可以异步处理，提高用户体验。</li></ul><h1 id="例：如何防止用户重复提交？"><a href="#例：如何防止用户重复提交？" class="headerlink" title="*例：如何防止用户重复提交？"></a>*例：如何防止用户重复提交？</h1><p><strong>出现场景</strong>：</p><ul><li>前端按钮</li><li>卡顿刷新</li><li>恶意操作</li></ul><p><strong>会带来的问题</strong>：</p><ul><li>数据重复错乱</li><li>增加服务器压力</li></ul><p><strong>解决方案</strong>：</p><p><strong>1. 按钮置灰</strong>：点击一次后按钮置灰。</p><blockquote><p><strong>实现方式</strong>：</p><ul><li>在页面中添加监听按钮的点击事件。</li><li>当点击事件触发时，在执行请求之前，先禁用该按钮。</li><li>请求完成后（无论成功还是失败），定时重启按钮。</li></ul></blockquote><p><strong>2. 唯一索引</strong>：在数据库层面建议一个数据的唯一id。</p><blockquote><p><strong>实现方式</strong>：</p><ul><li>在数据库表中设置一个字段作为唯一标识符，例如订单号、事务ID等。</li><li>当插入新记录时，检查这个字段是否已经存在。</li><li>如果冲突，则返回错误给前端告知无法重复提交。</li></ul></blockquote><p><strong>3. 自定义注解 &#x2F; 拦截器</strong>：通过 <code>userId  + URL + 类名+ 方法名</code> 是否重复提交</p><blockquote><p><strong>实现方式</strong>：</p><ul><li><p>开发一个注解，放在触发器的方法上，用于检查特定的方法上的重复提交。</p><p>或：开发一个自定义的拦截器或过滤器，用于检查每次请求。（记得将自定义拦截器注册到WebMVC组件中哦）</p></li><li><p>给注解设置一个key，如 <code>userId + URL + 类名 + 方法名</code>。</p></li><li><p>使用Redis存储这些防重复提交锁，并设置过期时间。</p></li><li><p>在接收到请求时，检查这些信息是否已存在于存储中，如果存在则认为是重复请求，可以拒绝处理。</p></li></ul></blockquote><p><strong>拦截器</strong>的代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RepeatSubmitInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RepeatSubmitInterceptor</span><span class="params">(StringRedisTemplate redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(jwtProperties.getUserTokenName());</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> jwtUtil.parseJWT(jwtProperties.getUserSecretKey(), token);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> Long.valueOf(claims.get(JwtClaimsConstant.USER_ID).toString());</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> userId + request.getRequestURI() + request.getClass() + request.getMethod() + request.getParameterMap();</span><br><span class="line">        <span class="keyword">if</span> (Boolean.TRUE.equals(redisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">5</span>, TimeUnit.SECONDS))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 允许请求继续</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 拒绝重复请求</span></span><br><span class="line">            response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RepeatSubmitInterceptor repeatSubmitInterceptor;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注册自定义拦截器</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始注册自定义拦截器...&quot;</span>);</span><br><span class="line">        registry.addInterceptor(repeatSubmitInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/hello/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例：设计一个简单的JWT令牌身份检验功能"><a href="#例：设计一个简单的JWT令牌身份检验功能" class="headerlink" title="*例：设计一个简单的JWT令牌身份检验功能"></a>*例：设计一个简单的JWT令牌身份检验功能</h1><p><strong>配置文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hzx:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">admin-secret-key:</span> <span class="string">hzx_admin</span>  <span class="comment"># 设置jwt签名加密时使用的秘钥</span></span><br><span class="line">    <span class="attr">admin-ttl:</span> <span class="number">7200000</span>           <span class="comment"># 设置jwt过期时间</span></span><br><span class="line">    <span class="attr">admin-token-name:</span> <span class="string">token</span>      <span class="comment"># 设置前端传递过来的令牌名称</span></span><br><span class="line">    <span class="attr">user-secret-key:</span> <span class="string">hzx_user</span></span><br><span class="line">    <span class="attr">user-ttl:</span> <span class="number">7200000</span></span><br><span class="line">    <span class="attr">user-token-name:</span> <span class="string">authentication</span></span><br></pre></td></tr></table></figure><p><strong>JWT配置文件类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;hzx.jwt&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 管理端员工生成jwt令牌相关配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String adminSecretKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> adminTtl;</span><br><span class="line">    <span class="keyword">private</span> String adminTokenName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户端用户生成jwt令牌相关配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String userSecretKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> userTtl;</span><br><span class="line">    <span class="keyword">private</span> String userTokenName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JWT工具类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt</span></span><br><span class="line"><span class="comment">     * 使用Hs256算法, 私匙使用固定秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  jwt令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createJWT_user</span><span class="params">(Integer userId)</span> &#123;</span><br><span class="line">        <span class="comment">// 指定签名的时候使用的签名算法，也就是header那部分</span></span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成JWT的过期时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> System.currentTimeMillis() + jwtProperties.getUserTtl();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为用户生成jwt令牌</span></span><br><span class="line">        HashMap&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        claims.put(JwtClaimsConstant.USER_ID, userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置jwt的body</span></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                <span class="comment">// 设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">                .signWith(signatureAlgorithm, jwtProperties.getUserSecretKey().getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                <span class="comment">// 设置过期时间</span></span><br><span class="line">                .setExpiration(expData)</span><br><span class="line">                <span class="comment">// 如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">                .setClaims(claims);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Token解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secretKey jwt秘钥 秘钥保留好在服务端, 不能暴露出去, 否则sign就可以被伪造, 如果对接多个客户端建议改造成多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     加密后的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Claims <span class="title function_">parseJWT</span><span class="params">(String secretKey, String token)</span> &#123;</span><br><span class="line">        <span class="comment">// 得到DefaultJwtParser</span></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                <span class="comment">// 设置签名的秘钥</span></span><br><span class="line">                .setSigningKey(secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                <span class="comment">// 设置需要解析的jwt</span></span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义拦截器</strong></p><p>管理员端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenAdminInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验jwt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;1当前线程的id:&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">        <span class="comment">//判断当前拦截到的是Controller的方法还是其他资源</span></span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="comment">//当前拦截到的不是动态方法，直接放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、从请求头中获取令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(jwtProperties.getAdminTokenName());</span><br><span class="line">        log.info(<span class="string">&quot;当前线程的id：&#123;&#125;，jwt校验:&#123;&#125;&quot;</span>, Thread.currentThread().getId(), token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、校验令牌</span></span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//解密jwt令牌，获得claims里的数据</span></span><br><span class="line">                <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> jwtUtil.parseJWT(jwtProperties.getAdminSecretKey(), token);</span><br><span class="line">                <span class="type">Long</span> <span class="variable">adminId</span> <span class="operator">=</span> Long.valueOf(claims.get(JwtClaimsConstant.ADMIN_ID).toString());</span><br><span class="line">                <span class="comment">//将操作当前线程的用户id存入到请求域中</span></span><br><span class="line">                BaseContext.setCurrentId(adminId);</span><br><span class="line">                log.info(<span class="string">&quot;当前管理员id：&#123;&#125;，jwt校验:&#123;&#125;&quot;</span>, adminId, token);</span><br><span class="line">                <span class="comment">//3、通过，放行</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="comment">//4、不通过，响应401状态码</span></span><br><span class="line">                response.setStatus(<span class="number">401</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//5、令牌为空，响应401状态码</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenUserInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验jwt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断当前拦截到的是Controller的方法还是其他资源</span></span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="comment">//当前拦截到的不是动态方法，直接放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、从请求头中获取令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(jwtProperties.getUserTokenName());</span><br><span class="line">        log.info(<span class="string">&quot;当前线程的id：&#123;&#125;，jwt校验:&#123;&#125;&quot;</span>, Thread.currentThread().getId(), token);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、校验令牌</span></span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//解密jwt令牌，获得claims里的数据</span></span><br><span class="line">                <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> jwtUtil.parseJWT(jwtProperties.getUserSecretKey(), token);</span><br><span class="line">                <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> Long.valueOf(claims.get(JwtClaimsConstant.USER_ID).toString());</span><br><span class="line">                <span class="comment">//将操作当前线程的用户id存入到请求域中</span></span><br><span class="line">                BaseContext.setCurrentId(userId);</span><br><span class="line">                log.info(<span class="string">&quot;当前用户id：&#123;&#125;，jwt校验:&#123;&#125;&quot;</span>, userId, token);</span><br><span class="line">                <span class="comment">//3、通过，放行</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="comment">//4、不通过，响应401状态码</span></span><br><span class="line">                response.setStatus(<span class="number">401</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//5、令牌为空，响应401状态码</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注册拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenAdminInterceptor jwtTokenAdminInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenUserInterceptor jwtTokenUserInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册自定义拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始注册自定义拦截器...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        registry.addInterceptor(jwtTokenAdminInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/admin/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/admin/employee/login&quot;</span>);</span><br><span class="line">        registry.addInterceptor(jwtTokenUserInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/hello/**&quot;</span>)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/login/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/auth/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="——————消息队列——————"><a href="#——————消息队列——————" class="headerlink" title="——————消息队列——————"></a><div align="center">——————消息队列——————</div></h1><h1 id="AMQP协议"><a href="#AMQP协议" class="headerlink" title="AMQP协议"></a>AMQP协议</h1><p>AMQP（Advanced Message Queuing Protocol）是一种开放的标准协议，用于消息传递中间件。它提供了一种标准化的方法来实现消息传递系统之间的互操作性。AMQP 协议最初由金融行业提出，目的是为了实现跨组织的消息传递，但现在已被广泛应用于多种场景。</p><h1 id="AMQP-的特点"><a href="#AMQP-的特点" class="headerlink" title="AMQP 的特点"></a>AMQP 的特点</h1><ol><li><strong>开放标准</strong>：AMQP 是一个公开的标准协议。</li><li><strong>跨平台和语言</strong>：AMQP 设计为跨平台和跨语言的协议，支持多种编程语言和操作系统。</li><li><strong>安全性</strong>：AMQP 支持安全的消息传递，包括认证、授权和加密。</li><li><strong>可靠性</strong>：AMQP 支持消息确认机制，确保消息的可靠传输。</li><li><strong>灵活性</strong>：AMQP 允许不同的消息传递模式，包括点对点（P2P）和发布&#x2F;订阅（Pub&#x2F;Sub）。</li></ol><h1 id="AMQP-的基本概念"><a href="#AMQP-的基本概念" class="headerlink" title="AMQP 的基本概念"></a>AMQP 的基本概念</h1><p>AMQP 协议定义了几个基本的概念，这些概念构成了消息传递的基础：</p><ol><li><strong>连接（Connection）</strong>：客户端与消息传递中间件之间的网络连接。</li><li><strong>通道（Channel）</strong>：在连接之上建立的虚拟连接。每个通道都是一个独立的会话，可以在一个连接中同时使用多个通道。</li><li><strong>交换机（Exchange）</strong>：用于接收来自生产者的消息，并根据绑定规则将消息路由到一个或多个队列。</li><li><strong>队列（Queue）</strong>：用于暂存消息，直到消费者准备好接收它们。</li><li><strong>绑定（Binding）</strong>：用于定义交换机和队列之间的关系，以及消息如何从交换机路由到队列。</li></ol><h1 id="AMQP-的消息格式"><a href="#AMQP-的消息格式" class="headerlink" title="AMQP 的消息格式"></a>AMQP 的消息格式</h1><p>AMQP 消息通常包含以下几个部分：</p><ol><li><strong>头部（Header）</strong>：包含消息的元数据，如优先级、TTL 等。</li><li><strong>属性（Properties）</strong>：包含消息的属性，如消息的唯一标识符、内容类型、内容编码等。</li><li><strong>体（Body）</strong>：包含消息的实际内容。</li></ol><h1 id="AMQP-的消息传递流程"><a href="#AMQP-的消息传递流程" class="headerlink" title="AMQP 的消息传递流程"></a>AMQP 的消息传递流程</h1><p>以下是 AMQP 消息传递的基本流程：</p><ol><li><strong>建立连接</strong>：客户端与消息传递中间件建立 TCP&#x2F;IP 连接。</li><li><strong>打开通道</strong>：客户端在连接上打开一个或多个通道。</li><li><strong>声明交换机和队列</strong>：客户端声明交换机和队列，并定义它们之间的绑定关系。</li><li><strong>发送消息</strong>：生产者通过交换机发送消息。</li><li><strong>接收消息</strong>：消费者从队列中接收消息。</li><li><strong>关闭通道和连接</strong>：完成消息传递后，关闭通道和连接。</li></ol><h1 id="AMQP-的消息传递模型"><a href="#AMQP-的消息传递模型" class="headerlink" title="AMQP 的消息传递模型"></a>AMQP 的消息传递模型</h1><p><strong>点对点（P2P）模型</strong>：</p><ul><li>在这种模型中，消息发送到队列，消费者从队列中拉取消息。一旦消息被一个消费者消费，它就会从队列中移除。</li><li>这种模型适用于消息必须被处理一次且只处理一次的情况。</li></ul><p><strong>发布&#x2F;订阅（Pub&#x2F;Sub）模型</strong>：</p><ul><li>在这种模型中，消息发送到一个主题，所有订阅该主题的消费者都会接收到消息。</li><li>这种模型适用于消息需要被多个消费者接收的情况。</li></ul><h1 id="推模式-vs-拉模式"><a href="#推模式-vs-拉模式" class="headerlink" title="推模式 vs 拉模式"></a>推模式 vs 拉模式</h1><h2 id="推消息（Push）模式"><a href="#推消息（Push）模式" class="headerlink" title="推消息（Push）模式"></a>推消息（Push）模式</h2><p>消息队列主动将消息发送给消费者。</p><p><strong>优点</strong>：</p><ul><li>实时性强：消息可以立即传递给消费者，减少延迟。</li><li>减少轮询：消费者无需频繁地检查是否有新消息到达，从而减少了网络负载和资源消耗。</li></ul><p><strong>缺点</strong>：</p><ul><li>连接管理复杂：需要保持长连接，并且需要处理连接断开的情况。</li><li>处理失败：如果消费者未能及时处理消息，可能导致消息积压或丢失。</li><li>资源消耗：持续保持连接可能会占用较多的资源，尤其是在高并发环境下。</li></ul><h2 id="拉消息（Pull）模式"><a href="#拉消息（Pull）模式" class="headerlink" title="拉消息（Pull）模式"></a>拉消息（Pull）模式</h2><p>消费者主动从消息队列中获取消息。</p><p><strong>优点</strong>：</p><ul><li>控制灵活性：消费者可以根据自己的处理能力和需求来决定何时拉取消息。</li><li>连接简单：通常只需要短连接，降低了服务器的压力。</li><li>容易重试：如果处理过程中出现问题，可以更容易地重新尝试获取消息。</li></ul><p><strong>缺点</strong>：</p><ul><li>增加网络负载：频繁的轮询会导致额外的网络流量。</li><li>延迟增加：由于需要消费者主动请求，所以消息传递可能不如推模式实时。</li></ul><blockquote><p><strong>Kafka是拉模式</strong>，这使得 Kafka 很适合处理大量数据流的应用场景。</p></blockquote><h2 id="推拉结合（Push-Pull）模式"><a href="#推拉结合（Push-Pull）模式" class="headerlink" title="推拉结合（Push-Pull）模式"></a>推拉结合（Push-Pull）模式</h2><p>推拉结合使用，可以结合两者的优点，提高消息传递的效率和可靠性。</p><p>例如，消息队列可以先推送消息给消费者，然后消费者再拉取这些消息以确认处理状态。</p><h1 id="RabbitMQ名词解释"><a href="#RabbitMQ名词解释" class="headerlink" title="RabbitMQ名词解释"></a>RabbitMQ名词解释</h1><ol><li><p><strong>Exchange（交换器）</strong>：</p><ul><li><strong>定义</strong>：交换器是RabbitMQ中的消息路由中心。它接收来自生产者的消息，并根据一定的规则将消息发送到一个或多个队列中。</li><li><strong>类型</strong>：主要有四种类型：Direct（直接）、Fanout（广播）、Topic（主题）和System（系统）。<ul><li><strong>Direct</strong>：根据路由键（routing key）匹配队列。</li><li><strong>Fanout</strong>：无路由键概念，将消息发送给所有绑定到该交换器的队列。</li><li><strong>Topic</strong>：根据通配符模式匹配路由键。</li><li><strong>System</strong>：较少使用，根据消息头属性进行路由。</li></ul></li></ul></li><li><p><strong>Queue（队列）</strong>：</p><ul><li><strong>定义</strong>：队列是消息的实际存储位置，是消息的最终目的地。</li><li><strong>特性</strong>：可以设置持久化、独占、自动删除等属性。</li></ul></li><li><p><strong>Routing Key（路由键）</strong>：</p><ul><li><strong>定义</strong>：生产者发送消息时使用的键，用于将消息路由到特定的队列。</li><li><strong>用途</strong>：在Direct和Topic类型的交换器中，根据路由键来确定消息的去向。</li></ul></li><li><p><strong>Binding（绑定）</strong>：</p><ul><li><strong>定义</strong>：队列与交换器之间的关联关系，决定了消息如何从交换器到达队列。</li><li><strong>用途</strong>：通过绑定关系，交换器可以将消息发送到一个或多个队列。</li></ul></li><li><p><strong>Message（消息）</strong>：</p><ul><li><strong>定义</strong>：由生产者创建并发送给交换器的信息单元。</li><li><strong>组成</strong>：通常包括消息体（body）和消息属性（properties），如消息的优先级、TTL等。</li></ul></li><li><p><strong>Virtual Host（虚拟主机）</strong>：</p><ul><li><strong>定义</strong>：类似于隔离的RabbitMQ实例，可以实现不同的应用使用不同的虚拟主机。</li><li><strong>用途</strong>：提供命名空间和安全隔离机制。</li></ul></li><li><p><strong>Connection（连接）</strong>：</p><ul><li><strong>定义</strong>：客户端与RabbitMQ服务器建立的TCP连接。</li><li><strong>用途</strong>：用于发送命令、接收响应等。</li></ul></li><li><p><strong>Channel（通道）</strong>：</p><ul><li><strong>定义</strong>：建立在连接之上的轻量级逻辑连接，可以复用TCP连接。</li></ul></li><li><p><strong>延迟队列</strong>：</p><ul><li><p><strong>延迟队列</strong>：进入队列的消息会被延迟消费的队列。</p></li><li><p><strong>应用场景</strong>：超时订单、限时优惠、定时发布</p><blockquote><p>延迟队列 &#x3D; 死信交换机 + TTL（生存时间）</p></blockquote></li></ul></li><li><p><strong>死信队列</strong></p><ul><li><p><strong>死信队列</strong>：当一个队列中的消息满足下列情况之一时，可以成为死信：</p><ul><li><p>消费者使用 <code>basic.reject</code> 或 <code>basic.nack</code> 声明消费失败，并且消息的 requeue 参数设置为 false</p></li><li><p>消息过期了，超时无人消费</p></li><li><p>要投递的队列消息堆积满了，最早的消息可能成为死信</p></li></ul></li></ul></li><li><p><strong>死信交换机</strong></p><ul><li><p><strong>死信交换机</strong>：配置了dead-letter-exchange属性的队列所指定的交换机。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">ttlQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;simple.queue&quot;</span>）         <span class="comment">// 指定队列名称, 并持久化</span></span><br><span class="line">                       .tt1(<span class="number">10000</span>）                      <span class="comment">// 设置队列的超时时间，10秒</span></span><br><span class="line">                       .deadLetterExchange(<span class="string">&quot;dl.direct&quot;</span>） <span class="comment">// 指定死信交换机</span></span><br><span class="line">                       .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="Kafka名词解释"><a href="#Kafka名词解释" class="headerlink" title="Kafka名词解释"></a>Kafka名词解释</h1><ol><li><strong>Topic（主题）</strong>：<ul><li><strong>定义</strong>：消息的分类容器，相当于RabbitMQ中的Exchange和Queue的组合体。</li><li><strong>特性</strong>：每个主题可以有多个分区，用于支持并行处理。</li></ul></li><li><strong>Partition（分区）</strong>：<ul><li><strong>定义</strong>：主题下的子集，用于提高并行处理能力。</li><li><strong>特性</strong>：每个分区都是有序且不可变的消息序列，可以跨多个Broker分布。</li></ul></li><li><strong>Broker（代理）</strong>：<ul><li><strong>定义</strong>：Kafka集群中的一个节点，负责存储和转发消息。</li><li><strong>用途</strong>：处理客户端请求，如消息的发布和订阅。</li></ul></li><li><strong>Producer（生产者）</strong>：<ul><li><strong>定义</strong>：向Kafka主题发送消息的应用程序。</li><li><strong>特性</strong>：可以指定消息的分区和键（Key）。</li></ul></li><li><strong>Consumer（消费者）</strong>：<ul><li><strong>定义</strong>：从Kafka主题中读取消息的应用程序。</li><li><strong>特性</strong>：通常以组的形式存在，同一组内的消费者可以实现负载均衡。</li></ul></li><li><strong>Consumer Group（消费者组）</strong>：<ul><li><strong>定义</strong>：一组消费者，通常用于实现负载均衡。</li><li><strong>特性</strong>：组内的消费者可以共享消息，<strong>一个分区在同一时刻只能被组内的一个消费者消费</strong>。</li></ul></li><li><strong>Offset（偏移量）</strong>：<ul><li><strong>定义</strong>：记录消费者在主题中的消费进度。</li><li><strong>用途</strong>：用于恢复消费状态，<strong>确保消息不会被重复消费</strong>。</li></ul></li><li><strong>Leader（领导者）</strong>：<ul><li><strong>定义</strong>：负责处理客户端读写请求的Broker。</li><li><strong>用途</strong>：确保数据的一致性和高可用性。</li></ul></li><li><strong>Replica（副本）</strong>：<ul><li><strong>定义</strong>：分区的备份，用于提高系统的可靠性和可用性。</li><li><strong>用途</strong>：当Leader失效时，可以切换到其他Replica继续提供服务。</li></ul></li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404122032227.png" alt="image-20240412203231163" style="zoom: 60%;" /><h1 id="高可用设计"><a href="#高可用设计" class="headerlink" title="高可用设计"></a>高可用设计</h1><p><strong>RabbitMQ</strong>：</p><p>在生产环境下，使用集群来保证高可用性</p><ul><li><p>普通集群</p><ul><li>会在集群的各个节点间共享部分数据，包括：交换机、队列元信息。不包含队列中的消息</li><li>当访问集群某节点时，如果队列不在该节点，会从数据所在节点传递到当前节点并返回</li><li>队列所在节点宕机，队列中的消息就会丢失</li></ul></li><li><p><strong>镜像集群</strong>（本质是主从模式）</p><ul><li>交换机、队列、队列中的消息会在各个镜像节点之间同步备份。</li><li>创建队列的节点被称为该队列的主节点，备份到的其它节点叫做该队列的镜像节点。</li><li>一个队列的主节点可能是另一个队列的镜像节点</li><li>所有操作都是主节点完成，然后同步给镜像节点</li><li>主宕机后，镜像节点会替代成新的主节点</li></ul></li><li><p>仲裁队列（优化镜像集群）</p><ul><li>与镜像队列一样，都是主从模式，支持主从数据同步</li><li>使用非常简单，没有复杂的配置</li><li>主从同步基于Raft协议，<strong>强一致性</strong></li><li>代码实现：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">quorumQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder</span><br><span class="line">        .durable(<span class="string">&quot;quorum.queue&quot;</span>) <span class="comment">// 持久化 </span></span><br><span class="line">        .quorum() <span class="comment">// 仲裁队列</span></span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Kafka</strong>：</p><ul><li><p>集群模式</p><ul><li>Kafka 的服务器端由被称为 Broker 的服务进程构成，即一个 Kafka 集群由多个 Broker 组成</li><li>如果集群中某一台机器宕机，其他机器上的 Broker 也依然能够对外提供服务。这其实就是 Kafka 提供高可用的手段之一</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404151659488.png" alt="image-20240415165935408" style="zoom:45%;" /></li><li><p><strong>分区备份机制</strong></p><ul><li>一个topic有多个分区，每个分区有多个副本，其中有一个leader，其余的是follower，副本存储在不同的broker中</li><li>所有的分区副本的内容是都是相同的，如果leader发生故障时，会自动将其中一个follower提升为leader</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404151700526.png" alt="image-20240415170035456" style="zoom:45%;" /></li><li><p><strong>分区副本复制机制</strong></p><ul><li>ISR（in-sync replica）分区是Leader分区<strong>同步</strong>复制保存的一个队列，普通分区是Leader分区<strong>异步</strong>复制保存的一个队列</li><li>如果leader失效后，需要选出新的leader，选举的原则如下：<ul><li>第一：选举时优先从ISR中选定，因为这个列表中follower的数据是与leader同步的</li><li>第二：如果ISR列表中的follower都不行了，就只能从其他follower中选取</li></ul></li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404151707886.png" alt="image-20240415170718823" style="zoom:50%;" /></li></ul><h1 id="保证消息不丢失"><a href="#保证消息不丢失" class="headerlink" title="保证消息不丢失"></a>保证消息不丢失</h1><p><strong>RabbitMQ</strong></p><ul><li><p><strong>消息持久化</strong>：RabbitMQ的消息默认是存储在内存，开启持久化功能将消息缓存在磁盘，可以确保消息不丢失，但会受IO性能影响。</p><ul><li>交换机持久化</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404122049298.png" alt="image-20240412204947267" style="zoom: 67%;" /><ul><li>队列持久化</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404122049650.png" alt="image-20240412204956621" style="zoom:67%;" /><ul><li>消息持久化，SpringAMQP中的的消息默认是持久的，可以通过MessageProperties中的DeliveryMode来指定的：</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404122050214.png" alt="image-20240412205003184" style="zoom:67%;" /></li><li><p><strong>消费确认机制</strong>：消费者处理消息后可以向RabbitMQ发送ack回执，RabbitMQ收到ack回执后才会删除该消息。</p><ul><li><p>SpringAMQP则允许配置三种确认模式：</p><ul><li><p><strong>manual</strong>：手动ack，需要在业务代码结束后，调用api发送ack。</p></li><li><p><strong>auto</strong>：自动ack，由spring监测listener代码是否出现异常，没有异常则返回ack；抛出异常则返回nack</p></li><li><p><strong>none</strong>：关闭ack，MQ假定消费者获取消息后会成功处理，因此消息投递后立即被删除</p></li></ul></li></ul></li><li><p><strong>失败重试机制</strong>：在消费者出现异常时利用本地重试，设置重试次数，当次数达到了以后，如果消息依然失败，将消息投递到异常交换机，交由人工处理。</p></li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404122051452.png" alt="image-20240412205111394" style="zoom: 50%;" /><p><strong>Kafka</strong></p><p>从三个方面考虑消息丢失：</p><ul><li><p>生产者发送消息到Brocker丢失：</p><ul><li>设置<strong>异步发送</strong>，发送失败使用回调进行记录或重发</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404122042582.png" alt="image-20240412204234529" style="zoom:50%;" /><ul><li><strong>失败重试</strong>，参数配置，可以设置重试次数</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404122042205.png" alt="image-20240412204243173" style="zoom:50%;" /></li><li><p>消息在Brocker中存储丢失：</p><ul><li>发送<strong>确认acks</strong>，选择all，让所有的副本都参与保存数据后确认</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404122043471.png" alt="image-20240412204309426" style="zoom: 50%;" /><table><thead><tr><th><strong>确认机制</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>acks&#x3D;0</td><td>生产者在成功写入消息之前不会等待任何来自服务器的响应，消息有丢失的风险，但是速度最快</td></tr><tr><td>acks&#x3D;1（默认值）</td><td>只要集群主节点收到消息，生产者就会收到一个来自服务器的成功响应</td></tr><tr><td>acks&#x3D;all</td><td>只有当所有参与赋值的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应</td></tr></tbody></table></li><li><p>消费者从Brocker<strong>接收消息丢失</strong>（重平衡）：</p><ul><li>禁用自动提交偏移量，改为手动提交偏移量</li><li>提交方式，最好是异步（优先）+同步提交</li></ul></li></ul><h1 id="避免重复消费"><a href="#避免重复消费" class="headerlink" title="避免重复消费"></a>避免重复消费</h1><blockquote><p>这依赖于外部设计，MQ和Kafka不做防范</p></blockquote><p><strong>RabbitMQ</strong>：</p><ul><li>每条消息设置一个唯一的标识id：<em>eg.在处理支付业务时，可以先拿着业务的唯一标识到数据库查询一下，如果这个数据不存在，说明没有处理过，这个时候就可以正常处理这个消息了。如果已经存在这个数据了，就说明消息重复消费了，我们就不需要再消费了。</em></li><li>幂等方案：redis分布式锁、数据库锁（悲观锁、乐观锁）</li></ul><p><strong>Kafka</strong>：</p><ul><li><p>禁用自动提交偏移量，改为手动提交偏移量</p></li><li><p>提交方式，异步提交 + 同步提交</p></li><li><p>幂等方案：redis分布式锁、数据库锁（悲观锁、乐观锁）</p></li></ul><h1 id="解决消息堆积问题"><a href="#解决消息堆积问题" class="headerlink" title="解决消息堆积问题"></a>解决消息堆积问题</h1><ul><li><p>增加<strong>更多消费者</strong>，提高消费速度</p></li><li><p>在消费者内<strong>开启线程池</strong>加快消息处理速度</p></li><li><p><strong>扩大队列容积</strong>，提高堆积上限，采用惰性队列</p><ul><li>在声明队列的时候可以设置属性 <code>x-queue-mode</code> 为 <code>lazy</code> ，即为惰性队列</li><li>惰性队列基于磁盘存储，消息上限高</li><li>惰性队列性能比较稳定，但基于磁盘存储，受限于磁盘IO，时效性会降低</li><li>RabbitMQ代码实现：</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404122119871.png" alt="image-20240412211926837" style="zoom:70%;" /><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404122119934.png" alt="image-20240412211935887" style="zoom:66%;" /></li></ul><h1 id="保证消费的有序性"><a href="#保证消费的有序性" class="headerlink" title="保证消费的有序性"></a>保证消费的有序性</h1><p><strong>RabbitMQ</strong>：</p><ol><li><strong>单个消费者</strong></li></ol><p>最简单也是最直接的方法是使用单个消费者来消费队列中的消息。这样可以保证消息按照入队顺序被消费，因为不会有其他消费者干扰这一过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个队列</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置预取计数为1，确保公平调度</span></span><br><span class="line">channel.basicQos(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者回调函数</span></span><br><span class="line"><span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">    System.out.println(<span class="string">&quot;Received message: &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始消费</span></span><br><span class="line">channel.basicConsume(QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>公平调度（Fair Dispatch）</strong></li></ol><p>即使在使用单个消费者的情况下，也可以通过设置 <code>basicQos</code> 来限制消费者在同一时间处理的消息数量，从而避免因处理速度差异而导致的顺序错乱。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置预取计数为1</span></span><br><span class="line">channel.basicQos(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>Kafka</strong>：</p><p><strong>消息消费无序的原因</strong>：</p><p>一个topic的数据可能存储在不同的分区中，每个分区都有一个按照顺序的存储的偏移量，如果消费者关联了多个分区不能保证顺序。</p><p>topic分区中消息只能由消费者组中的唯一消费者处理，想要顺序的处理Topic的所有消息，那就为消息者只提供一个分区或将相同的业务设置相同的key。</p><p><strong>解决方案</strong>：</p><ol><li><p><strong>发送消息时指定同一个topic的分区号</strong></p></li><li><p><strong>发送消息时按照相同的业务设置相同的key（分区默认通过key的hashcode值来选择分区，hash值一致，分区也一致）</strong></p><p> <strong>代码实现</strong>：</p></li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404122102814.png" alt="image-20240412210253778" style="zoom:67%;" /><h1 id="RabbitMQ：死信消息"><a href="#RabbitMQ：死信消息" class="headerlink" title="RabbitMQ：死信消息"></a>RabbitMQ：死信消息</h1><ol><li><strong>消息没有匹配的队列</strong>：如果消息发送到一个没有队列绑定的交换机，或者没有匹配的绑定键，那么消息将被丢弃或发送到死信队列。</li><li><strong>消息被拒绝</strong>：如果消费者拒绝了消息，并且设置了 <code>requeue=false</code>，那么消息将被发送到死信队列。</li><li><strong>消息过期</strong>：如果队列设置了过期时间（<code>x-message-ttl</code>），消息在过期后将被发送到死信队列。</li></ol><h1 id="Kafka：消息的存储和清理"><a href="#Kafka：消息的存储和清理" class="headerlink" title="Kafka：消息的存储和清理"></a>Kafka：消息的存储和清理</h1><ul><li><p>Kafka文件存储机制：</p><p>topic的数据存储在分区上，分区如果文件过大会分段（segment）存储。每个分段都在磁盘上以<strong>索引 <code>xxxx.index</code></strong> 和**日志文件 <code>xxxx.log</code> **的形式存储，减少单个文件内容的大小，查找数据方便，方便kafka进行日志清理</p></li><li><p>数据清理机制</p><ul><li><strong>根据消息的保留时间</strong>：当消息保存的时间超过了指定的时间，就会触发清理，默认是168小时（ 7天）</li><li><strong>根据topic存储的数据大小</strong>：当topic所占的日志文件大小大于一定的阈值，则开始删除最久的消息。（默认关闭）</li></ul></li></ul><h1 id="Kafka：消息索引的设计"><a href="#Kafka：消息索引的设计" class="headerlink" title="Kafka：消息索引的设计"></a>Kafka：消息索引的设计</h1><p>Kafka 的索引设计旨在优化消息查找的速度，同时保持磁盘空间的有效利用。</p><p><strong>索引文件结构</strong>：Kafka 的索引文件与数据文件紧密相关。每个分区都有若干个段（segment），每个段对应一个 <code>xxxx.log</code> 文件和一个 <code>xxxx.index</code> 文件。以下是索引文件的一些关键特点：</p><ol><li><strong>索引文件与数据文件关联</strong>：每个数据文件都有对应的索引文件，索引文件记录了数据文件中消息的偏移量位置。</li><li><strong>固定间隔索引</strong>：索引文件中记录的不是每一个消息的位置，而是每隔一定数量的消息记录一个索引项。这样可以显著减少索引文件的大小，同时仍然保持较快的查找速度。</li></ol><p><strong>索引文件格式</strong>：Kafka 的索引文件格式是高效的，主要包括以下几个方面：</p><ol><li><strong>压缩索引</strong>：索引文件通常比数据文件小得多，这有助于节省存储空间。</li><li><strong>稀疏索引</strong>：索引文件记录的是每隔一定数量的消息的位置信息，而不是每个消息的位置信息。这使得索引文件更加紧凑。</li><li><strong>二进制格式</strong>：索引文件是以二进制格式存储的，便于快速读取和解析。</li></ol><p><strong>索引更新机制</strong>：Kafka 的索引文件在写入新消息时会自动更新，以保持索引的最新状态：</p><ol><li><strong>动态更新</strong>：每当新消息被追加到数据文件时，索引文件也会相应更新，以反映最新的消息位置。</li><li><strong>预分配空间</strong>：Kafka 会预先分配索引文件的空间，以避免频繁的文件扩展操作。</li></ol><p><strong>性能优势</strong>：Kafka 的索引设计带来了以下性能优势：</p><ol><li><strong>快速定位</strong>：通过索引文件，Kafka 可以迅速定位到消息的位置，从而加快消息的检索速度。</li><li><strong>高效的存储</strong>：索引文件占用的空间相对较小，有助于节省存储资源。</li><li><strong>可扩展性</strong>：索引设计使得 Kafka 能够在高并发环境下保持良好的性能表现。</li></ol><h1 id="Kafka：高性能设计"><a href="#Kafka：高性能设计" class="headerlink" title="Kafka：高性能设计"></a>Kafka：高性能设计</h1><ul><li><p><strong>消息分区</strong>：不受单台服务器的限制，可以不受限的处理更多的数据</p></li><li><p><strong>顺序读写</strong>：磁盘顺序读写，提升读写效率</p></li><li><p><strong>页缓存</strong>：把磁盘中的数据缓存到内存中，把对磁盘的访问变为对内存的访问</p></li><li><p><strong>零拷贝</strong>：减少上下文切换及数据拷贝</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404151722200.png" alt="image-20240415172213122" style="zoom:60%;" /></li><li><p><strong>消息压缩</strong>：减少磁盘IO和网络IO</p></li><li><p><strong>分批发送</strong>：将消息打包批量发送，减少网络开销</p></li></ul><h1 id="Kafka：处理请求的全流程？"><a href="#Kafka：处理请求的全流程？" class="headerlink" title="Kafka：处理请求的全流程？"></a><em>Kafka：处理请求的全流程？</em></h1><p>Kafka 处理请求的全流程是一个复杂的多步骤过程，涉及到网络通信、请求解析、元数据管理、消息存储等多个方面。下面详细介绍 Kafka 处理请求的具体流程：</p><p><strong>1. 网络层接收请求</strong></p><p>当客户端（如生产者或消费者）向 Kafka 发送请求时，请求首先到达 Kafka Broker 的网络层。</p><ul><li><strong>Netty Server</strong>：Kafka 使用 Netty 框架来处理网络请求。Netty 是一个高性能、异步事件驱动的网络应用框架，它负责接收客户端的请求并将请求分发给相应的处理器。</li><li><strong>ChannelHandler</strong>：Netty 的 ChannelHandler 负责处理每个连接上的读写操作。当请求到达时，Netty 会调用 ChannelHandler 的 <code>read</code> 方法来处理请求。</li></ul><p><strong>2. 请求解析与分发</strong></p><p>请求到达后，Kafka 会对请求进行解析，并根据请求类型将其分发到相应的处理器。</p><ul><li><strong>RequestHeader 解析</strong>：Kafka 会首先解析请求头（RequestHeader），从中提取请求的 API 类型和版本号。</li><li><strong>API 请求分发</strong>：根据请求头中的信息，Kafka 会将请求分发到相应的 API 层处理器，如 <code>ProduceRequestHandler</code>、<code>FetchRequestHandler</code> 等。</li></ul><p><strong>3. 元数据校验</strong></p><p>在处理请求之前，Kafka 会对请求中涉及的元数据进行校验。</p><ul><li><strong>Topic 存在性检查</strong>：Kafka 会检查请求中的 Topic 是否存在。</li><li><strong>权限校验</strong>：Kafka 会对请求进行权限校验，确保客户端有权执行所请求的操作。</li></ul><p><strong>4. 数据处理</strong></p><p>一旦请求通过了元数据校验，Kafka 会根据请求类型进行相应的数据处理。</p><p>对于生产者请求（ProduceRequest）</p><ul><li><strong>消息写入</strong>：生产者请求包含要写入的消息。Kafka 会将消息写入到对应的分区中。</li><li><strong>日志追加</strong>：消息被追加到分区的日志文件中。Kafka 使用追加操作来高效地写入数据。</li><li><strong>同步到副本</strong>：Leader Broker 会将消息同步到副本 Broker，确保数据的一致性和持久性。</li><li><strong>提交偏移量</strong>：一旦消息被成功写入并同步到副本，Leader Broker 会提交偏移量，并返回成功响应给生产者。</li></ul><p>对于消费者请求（FetchRequest）</p><ul><li><strong>消息读取</strong>：消费者请求包含要读取的消息的偏移量。Kafka 会根据偏移量从分区中读取消息。</li><li><strong>消息检索</strong>：Kafka 使用索引文件快速定位消息，并将消息读取到内存中。</li><li><strong>返回消息</strong>：将检索到的消息返回给消费者。</li></ul><p><strong>5. 响应构建与发送</strong></p><p>处理完请求后，Kafka 会构建响应，并通过网络层将响应发送回客户端。</p><ul><li><strong>ResponseHeader 构建</strong>：构建响应头，包含响应的状态码等信息。</li><li><strong>响应序列化</strong>：将响应数据序列化为字节数组。</li><li><strong>响应发送</strong>：通过 Netty 的 ChannelHandler 将响应数据发送回客户端。</li></ul><p><strong>6. 异常处理</strong></p><p>在整个请求处理过程中，Kafka 会捕获并处理可能出现的各种异常情况。</p><ul><li><strong>重试机制</strong>：对于可重试的错误（如网络中断），Kafka 会尝试重新处理请求。</li><li><strong>错误记录</strong>：对于无法处理的错误，Kafka 会记录错误信息，并返回相应的错误码给客户端。</li></ul><h1 id="Kafka：Zookeeper-的作用"><a href="#Kafka：Zookeeper-的作用" class="headerlink" title="Kafka：Zookeeper 的作用"></a><em>Kafka：Zookeeper 的作用</em></h1><p>在 Kafka 的早期版本中，ZooKeeper 是一个不可或缺的组件，它在 Kafka 集群中起到了协调服务的作用。然而，从 Kafka 0.10 版本开始，Kafka 引入了内置的选举机制，减少了对 ZooKeeper 的依赖。尽管如此，ZooKeeper 仍然在 Kafka 中扮演着重要角色，特别是在老版本的 Kafka 中。</p><p><strong>ZooKeeper 在 Kafka 中的主要作用</strong></p><ol><li><strong>元数据管理</strong>：<ul><li><strong>Broker 注册</strong>：在 Kafka 中，Broker 会向 ZooKeeper 注册自己，并维持一个心跳连接。ZooKeeper 用来存储 Broker 的信息，包括其 IP 地址和端口号。</li><li><strong>Topic 元数据</strong>：ZooKeeper 存储了所有 Topic 的元数据信息，包括分区（Partition）的数量、Leader Broker 的信息以及副本（Replica）的位置。</li></ul></li><li><strong>协调服务</strong>：<ul><li><strong>Leader 选举</strong>：在 Kafka 的早期版本中，当一个分区的 Leader Broker 失效时，ZooKeeper 负责协调新的 Leader 选举过程。从 Kafka 0.10 版本开始，这一过程由 Kafka 自身的选举机制处理。</li><li><strong>Consumer Group 协调</strong>：ZooKeeper 负责协调 Consumer Group 的成员关系，包括分配分区给消费者以及处理消费者失效等情况。</li></ul></li><li><strong>故障恢复</strong>：<ul><li><strong>Broker 失效检测</strong>：ZooKeeper 监控 Broker 的心跳，如果某个 Broker 长时间没有发送心跳，则认为该 Broker 已经失效，并触发相应的故障恢复机制。</li><li><strong>分区重新分配</strong>：在 Broker 失效或新增 Broker 时，ZooKeeper 可以协助重新分配分区，确保集群的负载均衡。</li></ul></li></ol><p><strong>Kafka 0.10+ 版本的变化</strong></p><p>从 Kafka 0.10 版本开始，引入了一些改进来减少对 ZooKeeper 的依赖：</p><ol><li><strong>内置选举机制</strong>：Kafka 引入了内置的选举机制来处理 Leader 选举，减少了对 ZooKeeper 的依赖。</li><li><strong>简化元数据存储</strong>：尽管 Kafka 依然使用 ZooKeeper 来存储一些元数据，但许多元数据已经被移到了 Kafka 自身的存储中。</li></ol><p><strong>当前版本（2024 年左右）的趋势</strong></p><p>在当前版本中，Kafka 对 ZooKeeper 的依赖已经大大减少，但仍有一些场景下需要 ZooKeeper 的支持：</p><ol><li><strong>Consumer Group 状态管理</strong>：虽然 Kafka 可以不依赖 ZooKeeper 来运行，但在 Consumer Group 状态管理方面，ZooKeeper 仍然提供了一种可靠的协调机制。</li><li><strong>遗留系统兼容性</strong>：对于已经在生产环境中运行的老版本 Kafka 集群，ZooKeeper 仍然是必不可少的组件。</li></ol><h1 id="Kafka：为什么要摆脱-Zookeeper？"><a href="#Kafka：为什么要摆脱-Zookeeper？" class="headerlink" title="Kafka：为什么要摆脱 Zookeeper？"></a><em>Kafka：为什么要摆脱 Zookeeper？</em></h1><blockquote><p><strong>Kafka并没有完全抛弃ZooKeeper</strong>，而是在逐渐减少对 ZooKeeper 的依赖。</p></blockquote><p><strong>性能和延迟</strong></p><ol><li><strong>减少延迟</strong>：ZooKeeper 作为集中式协调服务，每次需要进行元数据操作时都需要与 ZooKeeper 交互，这增加了系统的延迟。减少对 ZooKeeper 的依赖可以降低延迟，提高系统的整体性能。</li><li><strong>提高吞吐量</strong>：通过减少对 ZooKeeper 的依赖，Kafka 可以更有效地处理大量的元数据操作，从而提高系统的吞吐量。</li></ol><p><strong>可靠性和可用性</strong></p><ol><li><strong>单点故障</strong>：虽然 ZooKeeper 本身是一个分布式的协调服务，但如果 ZooKeeper 集群出现问题，整个 Kafka 集群可能会受到影响。减少对 ZooKeeper 的依赖可以降低单点故障的风险。</li><li><strong>高可用性</strong>：通过内置的选举机制和其他协调功能，Kafka 可以实现更高的可用性，即使没有 ZooKeeper 的支持也能正常运行。</li></ol><p><strong>扩展性和管理</strong></p><ol><li><strong>简化集群管理</strong>：减少对 ZooKeeper 的依赖意味着减少了集群管理的复杂性。管理员不需要同时管理 Kafka 和 ZooKeeper 两个独立的服务，降低了运维负担。</li><li><strong>更好的水平扩展</strong>：Kafka 通过内置机制实现水平扩展，可以更好地适应大规模部署的需求，而不需要依赖外部服务来协调扩展。</li></ol><p><strong>内置功能增强</strong></p><ol><li><strong>内置选举机制</strong>：Kafka 0.10 版本引入了内置的选举机制，可以更快速地进行 Leader 选举，而不需要通过 ZooKeeper 来协调。</li><li><strong>元数据存储</strong>：Kafka 将更多元数据存储在本地的日志文件中，减少了对外部协调服务的依赖。</li></ol><p><strong>社区和生态发展</strong></p><ol><li><strong>社区推动</strong>：Kafka 社区一直在努力改进 Kafka 的核心功能，减少对外部组件的依赖是其中的一个重要方向。</li><li><strong>生态系统兼容性</strong>：随着 Kubernetes 和容器化技术的发展，简化部署和管理流程变得越来越重要。减少对 ZooKeeper 的依赖使得 Kafka 更容易与其他生态系统集成。</li></ol><p><strong>实际应用场景</strong></p><p>在实际应用中，虽然 Kafka 逐渐减少了对 ZooKeeper 的依赖，但在某些场景下，ZooKeeper 仍然具有重要作用。例如，在 Consumer Group 的协调方面，ZooKeeper 仍然提供了一种可靠的协调机制。此外，在一些遗留系统中，ZooKeeper 依然是必要的组件。</p><h1 id="——————–Netty——————–"><a href="#——————–Netty——————–" class="headerlink" title="——————–Netty——————–"></a><div align="center">——————–Netty——————–</div></h1><h1 id="网络通信的过程"><a href="#网络通信的过程" class="headerlink" title="网络通信的过程"></a>网络通信的过程</h1><blockquote><p>服务端是怎么接收客户端的消息的？服务端是如何感知到数据的？</p></blockquote><p>服务器使用非阻塞I&#x2F;O（NIO）来接收客户端的消息。具体过程如下：</p><ol><li><strong>接收连接</strong>: 服务器通过 <code>ServerSocketChannel</code> 监听特定端口，并接受来自客户端的连接请求，创建 <code>SocketChannel</code>。</li><li><strong>读取数据</strong>: 服务器在处理客户端连接时，会调用 <code>SocketChannel.read()</code> 方法读取客户端发送的数据。此方法会将数据填充到一个 <code>ByteBuffer</code> 中。</li><li><strong>感知数据到达</strong>: 服务器在循环中持续读取数据，直到没有更多数据可读。如果 <code>read()</code> 方法返回的字节数大于0，说明有数据到达。</li><li><strong>解析数据</strong>: 服务器在读取数据后，将数据进行解码。</li><li><strong>循环处理</strong>: 服务器会继续循环，等待并处理后续消息，直到客户端关闭连接。</li></ol><p>这种方式使得服务器能够有效地处理多个客户端的连接和消息，同时能够感知数据的到达。</p><h1 id="常见的I-x2F-O-模型"><a href="#常见的I-x2F-O-模型" class="headerlink" title="常见的I&#x2F;O 模型"></a>常见的I&#x2F;O 模型</h1><ol><li><strong>阻塞I&#x2F;O（Blocking I&#x2F;O）</strong>：每个I&#x2F;O操作都需要等待，效率较低。</li><li><strong>非阻塞I&#x2F;O（Non-blocking I&#x2F;O）</strong>：调用I&#x2F;O操作后立即返回，可以通过轮询来检查操作是否完成。</li><li><strong>多路复用（Multiplexing I&#x2F;O）</strong>：使用<code>select</code>、<code>poll</code>、<code>epoll</code>等机制，同时监视多个I&#x2F;O操作，适合高并发场景。</li><li><strong>异步I&#x2F;O（Asynchronous I&#x2F;O）</strong>：操作完成时会通知应用程序，避免了轮询。</li></ol><h1 id="NIO和BIO的区别"><a href="#NIO和BIO的区别" class="headerlink" title="NIO和BIO的区别"></a>NIO和BIO的区别</h1><p>NIO（New IO）和BIO（Blocking IO）是Java编程语言中用于处理输入输出（IO）操作的两种不同机制，它们之间存在一些显著的区别。</p><ul><li><p>工作原理：</p><ul><li><p>BIO：这是一种同步阻塞式IO。服务器实现模式为“<strong>一个连接一个线程</strong>”，即当客户端发送请求时，服务器端需要启动一个线程进行处理。如果连接不进行任何操作，会造成不必要的线程开销。虽然可以通过线程池机制改善这个问题，但在高并发环境下，BIO的性能可能会受到影响，因为每个连接都需要创建一个线程，而且线程切换开销较大。</p></li><li><p>NIO：这是一种同步非阻塞式IO。服务器实现模式为“<strong>一个请求一个线程</strong>”，即<strong>客户端发送的连接请求都会注册到多路复用器（采用事件驱动思想实现）上，多路复用器轮询I&#x2F;O请求时才启动一个线程进行处理。</strong>NIO在处理IO操作时，会把资源先操作至内存缓冲区，然后询问是否IO操作就绪。如果就绪，则进行IO操作；否则，进行下一步操作，并不断轮询是否IO操作就绪。</p></li></ul></li><li><p>资源利用：</p><ul><li>BIO：由于每个连接都需要创建一个线程，因此在高并发环境下可能会导致大量线程的创建和管理，这会增加系统开销。</li><li>NIO：通过<strong>单线程处理多个通道（Channel）</strong>的方式，减少了线程的数量，从而降低了系统开销。此外，NIO使用缓冲区（Buffer）进行数据的读写，提高了IO的处理效率。</li></ul></li><li><p>应用场景：</p><ul><li><p>BIO：适合一些简单的、低频的、短连接的通信场景，例如HTTP请求。</p></li><li><p>NIO：适用于高并发、长连接、大量数据读写的场景，如文件传输、分布式计算等。</p></li></ul></li></ul><h1 id="讲讲Java-NIO"><a href="#讲讲Java-NIO" class="headerlink" title="讲讲Java NIO"></a>讲讲Java NIO</h1><ol><li><strong>背景与目的</strong><ul><li>NIO是为了弥补传统同步阻塞IO模型中的不足而设计的。它提供了更快的、基于块的数据处理方式。</li></ul></li><li><strong>核心概念</strong><ul><li><strong>Buffer（缓冲区）</strong>：Buffer是NIO的核心组件之一，它是一个可以直接访问的数组，用于存储不同数据类型的数据。所有数据都会先经过Buffer来处理，无论是读取还是写入。</li><li><strong>Channel（通道）</strong>：Channel是另一个关键组件，它允许数据从一个地方传输到另一个地方。与传统的流（Stream）不同，Channel是双向的，支持同时进行读写操作。</li><li><strong>Selector（选择器&#x2F;多路复用器）</strong>：Selector负责监听一个或多个Channel，并通知应用程序有关Channel的状态变化，如是否准备好进行读或写操作等。</li></ul></li><li><strong>工作流程</strong><ul><li>当应用程序需要读取数据时，数据首先被读取到Buffer中。</li><li>写入数据时，数据是从Buffer写入到Channel。</li><li>Selector用于监控多个Channel的状态，并且当Channel准备好了相应的操作时，Selector会通知应用程序。</li><li>通过Selector返回的SelectionKey，可以获取就绪状态的Channel，并执行相应的IO操作。</li></ul></li><li><strong>优势</strong><ul><li>NIO相比传统的IO模型更加高效，因为它允许单个线程管理多个Channel连接，从而提高了并发处理能力。</li></ul></li></ol><h1 id="讲讲Netty，它解决了什么问题？"><a href="#讲讲Netty，它解决了什么问题？" class="headerlink" title="*讲讲Netty，它解决了什么问题？"></a>*讲讲Netty，它解决了什么问题？</h1><ol><li>Netty是一个高性能、异步的事件驱动的网络应用框架，主要用于构建快速、可扩展的网络服务器和客户端。它简化了网络编程的复杂性，如处理TCP连接、数据传输、协议解析等，使开发者能够更专注于业务逻辑。</li><li><u>Netty是一个高性能、异步事件驱动的网络应用程序框架，用于快速开发可靠的协议服务器和客户端。它基于Java NIO（非阻塞IO），提供了丰富的API来简化网络编程的复杂性。Netty可以用于开发多种协议的服务端和客户端，如HTTP、WebSocket、SMTP等，也可以用来开发自定义的二进制协议。</u></li><li>Netty是一个基于NIO模型的高性能网络通信框架，它是对NIO网络通信的封装，我们可以利用这样一些封装好的api去快速开发一个网络程序。</li><li>Netty在NIO的基础上做了很多优化，比如零拷贝机制、高性能无锁队列、内存池，因此性能比NIO更高。</li><li>Netty可以支持多种的通信协议，例如：Http、WebSocket等，并且针对一些通信问题，Netty也内置了一些策略，例如拆包、粘包，所以在使用过程中会比较方便。</li></ol><h1 id="Netty-的应用场景"><a href="#Netty-的应用场景" class="headerlink" title="Netty 的应用场景"></a>Netty 的应用场景</h1><ul><li>高性能网络服务器（如游戏服务器、即时通讯工具）</li><li>微服务架构中的服务通信</li><li>WebSocket服务器</li><li>数据传输层（如RPC框架）</li></ul><h1 id="为什么要使用Netty？Netty的特点"><a href="#为什么要使用Netty？Netty的特点" class="headerlink" title="*为什么要使用Netty？Netty的特点"></a>*为什么要使用Netty？Netty的特点</h1><p>Netty相比与直接使用JDK自带的api更简单，因为它具有这样一些特点：</p><ol><li>统一的api，支持多种传输类型、比如阻塞、非阻塞，以及epoll、poll等模型</li><li>可以使用非常少的代码去实现多线程Reactor模型，以及主从多线程Reactor模型</li><li>自带编解码器，解决了TCP粘包拆包的问题</li><li>自带各种通信协议</li><li>相比JDK自带的NIO，有更高的吞吐量、更低的延迟、更低的资源消耗、更低的内存复制</li><li>安全性较好，有完整的 SSL&#x2F;TLS 的支持</li><li>经历了各种大的项目的考验，社区活跃度高，例如：Dubbo、Zookeeper、RocketMQ</li></ol><h1 id="Netty可以做什么事情？"><a href="#Netty可以做什么事情？" class="headerlink" title="*Netty可以做什么事情？"></a>*Netty可以做什么事情？</h1><p>我们之所以要使用Netty，核心的点是要去解决服务器如何去承载更多的用户同时访问的问题，传统的BIO模型由于阻塞的特性使得在高并发的环境种很难去支持更高的吞吐量，尽管用NIO的多路复用模型可以在阻塞方面进行优化，但是它的api使用较为复杂，而Netty是基于NIO的封装，提供了成熟简单易用的api，降低了使用成本和学习成本，本质上来说Netty和NIO所扮演的角色是相同的，都是是去为了提升服务端的吞吐量，让用户获得更好的产品体验。</p><h1 id="Netty的核心组件"><a href="#Netty的核心组件" class="headerlink" title="Netty的核心组件"></a>Netty的核心组件</h1><p>Netty有三层结构构成的，分别是：</p><ol><li><p><strong>网络通信层</strong>，有三个核心组件：</p><ul><li><code>Bootstrap</code> 负责客户端启动，并且去连接远程的Netty Server</li><li><code>ServerBootStrap</code> 负责服务端的监听，用来监听指定的一个端口</li><li><code>Channel</code> 负责网络通信的一个载体——事件调度器。</li></ul></li><li><p><strong>事件调度层</strong>，有两个核心角色：</p><ul><li><code>EventLoopGroup</code> 本质上是一个线程池，主要去负责接收IO请求，并分发给对应的EventLoop去执行处理请求</li><li><code>EventLoop</code> 是相对于线程池里面的一个具体线程</li></ul><p><strong>事件调度层的工作流程</strong></p><ol><li><strong>初始化</strong>：在 Netty 应用启动时，首先创建 <code>EventLoopGroup</code>，然后根据需要创建 <code>EventLoop</code>。</li><li><strong>注册</strong>：当客户端或服务端建立连接时，会创建一个 <code>Channel</code>，并将该 <code>Channel</code> 注册到 <code>EventLoop</code> 上。</li><li><strong>事件处理</strong>：一旦 <code>Channel</code> 上有事件发生（如读写事件），相应的 <code>EventLoop</code> 就会被唤醒，并处理这些事件。</li><li><strong>任务执行</strong>：除了处理 I&#x2F;O 事件外，<code>EventLoop</code> 还可以执行用户提交的任务，如定时任务、异步任务等。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">EventLoopGroup</span> <span class="variable">bossGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(); <span class="comment">// (1) 负责接受传入的连接请求</span></span><br><span class="line"><span class="type">EventLoopGroup</span> <span class="variable">workerGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(); <span class="comment">// (2) 负责处理已经被接受的连接上的 I/O 操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">ServerBootstrap</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">    b.group(bossGroup, workerGroup) <span class="comment">// (3) 将 `bossGroup` 和 `workerGroup` 绑定到 `ServerBootstrap`</span></span><br><span class="line">      .channel(NioServerSocketChannel.class) <span class="comment">// (4) 指定使用的 `Channel` 类型</span></span><br><span class="line">      .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123; <span class="comment">// (5) 设置一个 `ChannelInitializer`，用于初始化 `Channel` 的 `Pipeline`</span></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">              ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">EchoServerHandler</span>());</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="type">ChannelFuture</span> <span class="variable">f</span> <span class="operator">=</span> b.bind(port).sync(); <span class="comment">// (6) 绑定并开始监听端口</span></span><br><span class="line">    f.channel().closeFuture().sync(); <span class="comment">// (7) 等待 `ServerChannel` 关闭</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    bossGroup.shutdownGracefully(); <span class="comment">// (8)  关闭 `EventLoopGroup`，释放所有资源</span></span><br><span class="line">    workerGroup.shutdownGracefully(); <span class="comment">// (9)  关闭 `EventLoop`，释放所有资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>服务编排层</strong>，有三个核心组件：</p><ul><li><code>ChannelPipeline</code> 负责处理多个ChannelHandler，他会把多个Channelhandler的过成一个链，去形成一个Pipeline</li><li><code>ChannelHandler</code> 主要是针对10数据的一个处理器，数据接收后，就通过指定的一个上Handler进行处理</li><li><code>ChannelHandlerContext</code> 是用来去保存ChannelHandler的一个上下文信息的。</li></ul></li></ol><h1 id="Reactor-线程模型、其原理和作用"><a href="#Reactor-线程模型、其原理和作用" class="headerlink" title="Reactor 线程模型、其原理和作用"></a>Reactor 线程模型、其原理和作用</h1><p>Reactor线程模型是基于事件驱动的模型，主要分为三个角色：</p><ol><li><strong>Reactor</strong>：负责监视I&#x2F;O事件并分发事件。</li><li><strong>Handler</strong>：处理具体的业务逻辑。</li><li><strong>Worker</strong>：执行I&#x2F;O操作。可以使用多个Worker线程处理具体的请求，提高并发性能。</li></ol><p>Netty提供了三种Reactor模型的支持：</p><ol><li><p><strong>单线程单Reactor模型</strong>。单线程单Reactor模型也有缺点：如果其中一个Handler的出现阻塞，就会导致后续的客户端无法被处理，因为它们是同一个线程，所以就导致无法接受新的请求。为了解决这个问题，就提出了使用多线程的方式，也就是说在业务处理的时候加入线程池去异步处理，这样就可以解决handlers阻塞的一个问题。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409291709540.png" alt="image-20240929170912316" style="zoom:60%;" /></li><li><p><strong>多线程单Reactor模型</strong>。为了解决单线程中handlers阻塞的问题，我们引入了线程池去异步处理，这意味着我们把Reactor和handlers放在不同的线程里面去处理。在多线程单Reactor模型中，所有的IO操作都是由一个Reactor来完成的，这导致单个Reactor会存在一个性能瓶颈，对于小容量的场景影响不是很大，但是对于高并发的一些场景来说，很容易会因为单个Reactor线程的性能瓶颈，导致整个吞吐量会受到影响，所以当这个线程超过负载之后，处理的速度变慢，就会导致大量的客户端连接超时，超时之后往往会进行重发，这反而加重了这个线程的一个负载，最终会导致大量的消息积压和处理的超时，成为整个系统的一个性能瓶颈，所以我们还可以进行进一步的优化，也就是引入多线程多Reactor模型。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409291711995.png" alt="image-20240929171018421" style="zoom:60%;" /></li><li><p><strong>多线程多Reactor模型</strong>，也叫<strong>主从多线程Reactor模型</strong>。Main Reactor负责接收客户的连接请求，然后把接收的请求传递给Sub Reactor，Sub Reactorl我们可以配置多个，这样我们可以去进行灵活的扩容和缩容，具体的业务处理由Sub Reactor去完成，由它最终去绑定给对应的handler。Main Reactor扮演请求接收者，它会把接收的请求转发到Sub Reactor来处理，由Sub Reactor去进行真正意义上的分发。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409291719179.png" alt="image-20240929171910957" style="zoom:60%;" /></li></ol><p>Reactor模型有三个重要的组件：</p><ul><li><code>Reactor</code> 负责将IO事件分派给对应的Handler</li><li><code>Acceptor</code> 处理客户端的连接请求</li><li><code>handlers</code> 负责执行我们的业务逻辑的读写操作</li></ul><h1 id="高性能设计"><a href="#高性能设计" class="headerlink" title="高性能设计"></a>高性能设计</h1><ol><li><strong>非阻塞IO模型</strong>：Netty基于NIO实现，使用非阻塞IO模型，减少了线程的使用，从而减少了上下文切换的开销。</li><li><strong>事件驱动</strong>：Netty采用了事件驱动的设计模式，当有IO事件发生时，才会被处理，这样可以有效地利用CPU资源。</li><li><strong>零拷贝技术</strong>：Netty支持直接缓冲区（DirectByteBuffer），在数据传输中减少了数据的拷贝次数，提高了数据传输的效率。具体做法是：使用<code>FileChannel</code>的<code>transferTo()</code>和<code>transferFrom()</code>等方法实现文件传输时，避免了将数据从用户空间复制到内核空间的过程，提高了性能。</li><li><strong>线程模型</strong>：Netty提供了高效的线程模型，如Boss&#x2F;Worker模型，使得任务的分配更加合理，充分利用多核CPU的计算能力。</li></ol><h1 id="Netty-中的设计模式"><a href="#Netty-中的设计模式" class="headerlink" title="Netty 中的设计模式"></a>Netty 中的设计模式</h1><ul><li><strong>单例模式</strong>：如EventLoop。</li><li><strong>观察者模式</strong>：事件的注册和触发。</li><li><strong>责任链模式</strong>：通过ChannelPipeline处理多个ChannelHandler。</li><li><strong>适配器模式</strong>：将不同的Handler统一处理。</li></ul><h1 id="处理粘包、拆包问题"><a href="#处理粘包、拆包问题" class="headerlink" title="处理粘包、拆包问题"></a>处理粘包、拆包问题</h1><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410092220346.png" style="zoom:100%;" /><p>在Netty中，粘包和拆包的问题通常通过消息编码器和解码器（如<code>LengthFieldBasedFrameDecoder</code>、<code>DelimiterBasedFrameDecoder</code>等）来解析数据流。</p><p>Netty提供了几种方式来处理这种情况：</p><ol><li><strong>定长消息</strong>：如果消息长度固定，可以直接读取固定长度的数据。</li><li><strong>使用分隔符（Delimiters）</strong>：对于文本协议，可以使用特定的分隔符（如’\n’）来分隔消息。</li><li><strong>自定义协议头</strong>：在消息前加上长度字段，这样接收方可以根据长度字段读取完整的消息。</li><li><strong>使用现成的编解码器</strong>：Netty提供了如LengthFieldBasedFrameDecoder这样的解码器，它可以根据消息长度字段自动处理粘包和拆包的问题。</li></ol><h1 id="异步非阻塞的IO操作"><a href="#异步非阻塞的IO操作" class="headerlink" title="异步非阻塞的IO操作"></a>异步非阻塞的IO操作</h1><p>Netty通过使用Java NIO（非阻塞IO）技术实现了异步非阻塞的IO操作。具体来说：</p><ol><li><strong>NIO</strong>：Netty基于Java NIO来实现非阻塞IO模型，使用<code>Selector</code>来监听多个<code>Channel</code>的事件，当有事件发生时，<code>Selector</code>会通知相应的<code>Channel</code>进行处理。</li><li><strong>EventLoop</strong>：Netty中的<code>EventLoop</code>是一个不断循环的线程，负责处理绑定在其上的<code>Channel</code>的所有IO操作。每个<code>EventLoop</code>都关联了一个<code>Selector</code>，用来监听<code>Channel</code>上的事件。</li><li><strong>Channel</strong>：每个<code>Channel</code>都绑定了一个或多个<code>ChannelHandler</code>，用来处理读写事件。当有事件发生时，<code>EventLoop</code>会调用相应的<code>ChannelHandler</code>来处理事件。</li></ol><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建EventLoopGroup</span></span><br><span class="line"><span class="type">EventLoopGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 创建Bootstrap</span></span><br><span class="line">    <span class="type">Bootstrap</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">    b.group(group)</span><br><span class="line">      .channel(NioSocketChannel.class)</span><br><span class="line">      .handler(<span class="keyword">new</span> <span class="title class_">MyClientInitializer</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接服务器</span></span><br><span class="line">    <span class="type">ChannelFuture</span> <span class="variable">cf</span> <span class="operator">=</span> b.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> cf.sync().channel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据</span></span><br><span class="line">    channel.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;Hello, World!&quot;</span>, StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待连接关闭</span></span><br><span class="line">    cf.channel().closeFuture().sync();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    group.shutdownGracefully();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="消息的有序发送"><a href="#消息的有序发送" class="headerlink" title="消息的有序发送"></a>消息的有序发送</h1><p>在Netty中实现消息的有序发送，可以通过以下几种方式：</p><ol><li><strong>单线程模型</strong>：如果业务逻辑要求消息必须按顺序发送，可以将所有消息的发送操作放在同一个线程中执行。这样可以保证消息的顺序性。</li><li><strong>ChannelPipeline</strong>：利用<code>ChannelPipeline</code>中的<code>ChannelHandler</code>来控制消息的顺序。可以自定义<code>ChannelHandler</code>来实现消息的排队发送。</li><li><strong>ChannelFutureListener</strong>：使用<code>ChannelFutureListener</code>来监听<code>ChannelFuture</code>的状态，确保前一个消息发送成功后再发送下一个消息。</li></ol><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderedMessageHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">messageCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Received message &quot;</span> + messageCount + <span class="string">&quot;: &quot;</span> + msg);</span><br><span class="line">        messageCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> i;</span><br><span class="line">            ctx.writeAndFlush(<span class="string">&quot;Message &quot;</span> + index).addListener((ChannelFutureListener) future -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Sent message &quot;</span> + index);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.err.println(<span class="string">&quot;Failed to send message &quot;</span> + index);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ctx.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异步任务的调度"><a href="#异步任务的调度" class="headerlink" title="异步任务的调度"></a>异步任务的调度</h1><p>Netty提供了<code>ScheduledExecutorService</code>来实现异步任务调度。<code>ScheduledExecutorService</code>可以用来安排定时任务，包括一次性任务和周期性任务。</p><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledTaskHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ScheduledExecutorService</span> <span class="variable">scheduler</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        scheduler.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">            ctx.writeAndFlush(<span class="string">&quot;Heartbeat&quot;</span>);</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Received message: &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ctx.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        scheduler.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考计数"><a href="#参考计数" class="headerlink" title="参考计数"></a>参考计数</h1><p>Netty中的参考计数（Reference Counting）是Netty为了管理内存而采用的一种机制。它主要用于追踪ByteBuf的引用次数。每个ByteBuf都有一个内部的引用计数器，当ByteBuf被引用时，计数器加一；当引用被释放时，计数器减一。</p><p>当ByteBuf的引用计数降到0时，意味着没有引用再指向这个ByteBuf，此时Netty会自动释放这个ByteBuf所占的内存空间。这种方式可以防止内存泄漏，并且在多线程环境下确保内存的安全释放。</p><h1 id="异常的处理方案"><a href="#异常的处理方案" class="headerlink" title="异常的处理方案"></a>异常的处理方案</h1><p>在Netty中，异常处理通常是通过ChannelFutureListener和ChannelInboundHandler来实现的。</p><ul><li><strong>ChannelFutureListener</strong>：可以注册一个ChannelFutureListener来监听ChannelFuture的完成状态，当操作失败时，可以抛出异常或进行其他错误处理。</li><li><strong>ChannelInboundHandler</strong>：当ChannelPipeline中的某个Handler抛出异常时，可以通过实现ExceptionCaught()方法来捕获并处理这些异常。通常在这个方法中打印堆栈跟踪信息或采取其他补救措施。</li></ul><p>此外，Netty还提供了全局异常处理机制，可以注册GlobalChannelInboundHandler来处理所有未捕获的异常。</p><h1 id="Netty-如何解决-NIO-中的空轮询-Bug"><a href="#Netty-如何解决-NIO-中的空轮询-Bug" class="headerlink" title="Netty 如何解决 NIO 中的空轮询 Bug"></a>Netty 如何解决 NIO 中的空轮询 Bug</h1><p>Netty通过使用<code>Selector</code>的<code>poll</code>方法，并结合<code>EventLoop</code>进行优化，避免了空轮询的情况。它会在没有事件时进行适当的休眠，减少CPU资源的浪费。</p><h1 id="Channel、ChannelHandlerContext"><a href="#Channel、ChannelHandlerContext" class="headerlink" title="Channel、ChannelHandlerContext"></a>Channel、ChannelHandlerContext</h1><ul><li><strong>Channel</strong>：表示一个连接，可以是服务器端或客户端的<code>SocketChannel</code>，它负责数据的读写。</li><li><strong>ChannelHandlerContext</strong>：表示在ChannelPipeline中每个ChannelHandler的上下文，提供了访问Channel和其他Handler的功能，用于在Handler之间传递事件和数据。</li></ul><h1 id="ChannelPipeline是什么？它是如何工作的？"><a href="#ChannelPipeline是什么？它是如何工作的？" class="headerlink" title="ChannelPipeline是什么？它是如何工作的？"></a>ChannelPipeline是什么？它是如何工作的？</h1><p>ChannelPipeline是Netty中的一个重要概念，它是一个责任链模式的具体实现。</p><p>在Netty中，每当有数据从网络到达或者需要发送数据时，数据会沿着ChannelPipeline中的处理器链进行传递。每个处理器（Handler）都可以对数据进行处理，比如编码、解码、日志记录等。ChannelPipeline使得我们可以方便地组织和管理这些处理器，按需插入、删除或替换处理器，从而实现了高度的灵活性。</p><p><code>ChannelPipeline</code>是Netty中的一个责任链模式的实现，用于管理一系列的<code>ChannelHandler</code>。它的工作原理如下：</p><ol><li><strong>责任链</strong>：<code>ChannelPipeline</code>中包含了一系列的<code>ChannelHandler</code>，这些<code>ChannelHandler</code>按照添加的顺序组成一个责任链。</li><li><strong>消息传递</strong>：当有消息从网络到达或需要发送时，消息会沿着<code>ChannelPipeline</code>中的<code>ChannelHandler</code>传递。</li><li><strong>事件传播</strong>：除了消息外，<code>ChannelPipeline</code>还可以传播各种事件，如连接建立、关闭等。</li><li><strong>上下文管理</strong>：通过<code>ChannelHandlerContext</code>来管理当前<code>ChannelHandler</code>的上下文信息。</li></ol><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInitializer</span> <span class="keyword">extends</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> ch.pipeline();</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.DEBUG));</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">MyHandler</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Received message: &quot;</span> + msg);</span><br><span class="line">        ctx.writeAndFlush(<span class="string">&quot;Hello from client!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ctx.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ChannelHandler是什么？它们之间是如何通信的？"><a href="#ChannelHandler是什么？它们之间是如何通信的？" class="headerlink" title="ChannelHandler是什么？它们之间是如何通信的？"></a>ChannelHandler是什么？它们之间是如何通信的？</h1><p>ChannelHandler是一个接口，它定义了处理网络事件的方法，如读取数据、写入数据等。我们通常会实现这个接口或者继承自AbstractChannelHandler来创建自定义的处理器。</p><p>ChannelHandler之间可以通过ChannelPipeline来通信。ChannelPipeline管理了一系列的ChannelHandler，并按照顺序处理消息。</p><ol><li><strong>消息传递</strong>：消息从一个ChannelHandler传递到另一个ChannelHandler时，会按照ChannelPipeline中定义的顺序依次处理。每个ChannelHandler可以对消息进行处理、修改或转发。</li><li><strong>Context传递</strong>：ChannelHandlerContext提供了与ChannelHandler相关的上下文信息，包括获取当前ChannelHandler的前后Handler，以及发送消息给当前Channel或者管道中的其他ChannelHandler。</li><li><strong>事件传播</strong>：除了消息外，ChannelPipeline还可以传播各种事件，如连接建立、断开等。这些事件同样会按照顺序传递给ChannelPipeline中的各个ChannelHandler。</li></ol><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHandler</span> <span class="keyword">extends</span> <span class="title class_">ChannelInboundHandlerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 对消息进行处理</span></span><br><span class="line">        ctx.fireChannelRead(msg); <span class="comment">// 将消息传递给下一个Handler</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 当Channel激活时触发</span></span><br><span class="line">        ctx.fireChannelActive(); <span class="comment">// 触发事件给下一个Handler</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ChannelHandlerContext是什么？有什么作用？"><a href="#ChannelHandlerContext是什么？有什么作用？" class="headerlink" title="ChannelHandlerContext是什么？有什么作用？"></a>ChannelHandlerContext是什么？有什么作用？</h1><p>ChannelHandlerContext则是ChannelHandler的上下文环境，它提供了与处理器相关的上下文信息，比如可以获取当前处理器的前一个和下一个处理器，以及用于发送消息、注册定时器等功能的方法。ChannelHandlerContext在处理器中非常关键，因为它让我们可以方便地与ChannelPipeline交互。</p><p><code>ChannelHandlerContext</code>是Netty中的一个重要的上下文环境对象，它提供了与<code>ChannelHandler</code>相关的上下文信息。主要作用包括：</p><ol><li><strong>上下文信息</strong>：提供当前<code>ChannelHandler</code>的上下文信息，如获取当前<code>ChannelHandler</code>的前后<code>ChannelHandler</code>。</li><li><strong>消息传递</strong>：可以用来向当前<code>Channel</code>或管道中的其他<code>ChannelHandler</code>发送消息。</li><li><strong>事件传播</strong>：可以用来触发事件给当前<code>Channel</code>或管道中的其他<code>ChannelHandler</code>。</li><li><strong>访问Channel属性</strong>：提供了访问和修改<code>Channel</code>属性的方法。</li></ol><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Received message: &quot;</span> + msg);</span><br><span class="line">        ctx.writeAndFlush(<span class="string">&quot;Hello from client!&quot;</span>); <span class="comment">// 向服务器发送消息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close(); <span class="comment">// 关闭连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Channel和ChannelHandlerContext的关系是什么？"><a href="#Channel和ChannelHandlerContext的关系是什么？" class="headerlink" title="Channel和ChannelHandlerContext的关系是什么？"></a>Channel和ChannelHandlerContext的关系是什么？</h1><p>在Netty中，Channel代表了网络连接的一个端点，它封装了网络连接的生命周期，包括连接、读取、写入等操。</p><p>ChannelHandlerContext则是Channel的一个上下文环境，它为ChannelHandler提供了执行上下文。</p><p>ChannelHandlerContext包含了当前ChannelHandler的信息，以及对ChannelPipeline的操作方法。通过ChannelHandlerContext，我们可以获取当前ChannelHandler的前后Handler，发送消息给当前Channel或者管道中的其他ChannelHandler，以及访问Channel的各种属性等。</p><h1 id="Channel和ChannelFuture的区别是什么？"><a href="#Channel和ChannelFuture的区别是什么？" class="headerlink" title="Channel和ChannelFuture的区别是什么？"></a>Channel和ChannelFuture的区别是什么？</h1><p>Channel<code>和</code>ChannelFuture&#96;在Netty中有不同的作用：</p><ol><li>**<code>Channel</code>**：代表了网络连接的一个端点，封装了网络连接的生命周期，包括连接、读取、写入等操作。<code>Channel</code>提供了执行这些操作的方法。</li><li>**<code>ChannelFuture</code>**：表示异步通道操作的结果，提供了方法来检查异步操作的状态，如是否完成、成功或失败等。<code>ChannelFuture</code>通常用于异步操作的同步等待和结果监听。</li></ol><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServerInitializer</span> <span class="keyword">extends</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> ch.pipeline();</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.DEBUG));</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">MyServerHandler</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用ChannelFuture进行同步等待</span></span><br><span class="line">        <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> ch.closeFuture();</span><br><span class="line">        future.sync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Selector机制是如何工作的？"><a href="#Selector机制是如何工作的？" class="headerlink" title="Selector机制是如何工作的？"></a>Selector机制是如何工作的？</h1><p>Netty中的Selector机制主要用于处理网络连接的读写事件。在Java NIO中，Selector允许我们监听多个Channel的事件，如连接、读取、写入等。当有事件发生时，Selector会通知相应的Channel，这样我们就可以处理这些事件。</p><p>在Netty中，通常每个EventLoopGroup对应一个Selector，而每个EventLoop负责处理绑定到它的Channel的IO操作。当一个Channel上有事件发生时，EventLoop会轮询Selector，发现有事件就调用相应的Handler来处理。</p><h1 id="EventLoop和EventLoopGroup有什么区别？"><a href="#EventLoop和EventLoopGroup有什么区别？" class="headerlink" title="EventLoop和EventLoopGroup有什么区别？"></a>EventLoop和EventLoopGroup有什么区别？</h1><p>EventLoop和EventLoopGroup是Netty中用来处理IO操作的关键组件。</p><ul><li><strong>EventLoop</strong>：它是Netty中的一个线程，负责处理绑定到它的Channel的IO操作，如读取、写入和连接等。每个EventLoop都有一个Selector，用来监听Channel上的事件。</li><li><strong>EventLoopGroup</strong>：它是一组EventLoop的集合，用于管理多个EventLoop。EventLoopGroup负责为新创建的Channel分配合适的EventLoop。Netty中有两种类型的EventLoopGroup：BossGroup和WorkerGroup。BossGroup负责接受客户端的连接请求，而WorkerGroup负责处理已经被接受的连接上的读写操作。</li></ul><h1 id="Future和Promise是什么？它们的作用是什么？"><a href="#Future和Promise是什么？它们的作用是什么？" class="headerlink" title="Future和Promise是什么？它们的作用是什么？"></a>Future和Promise是什么？它们的作用是什么？</h1><p>Netty中的Future和Promise是用于处理异步操作的结果和状态的。</p><ul><li><strong>Future</strong>：表示异步操作的结果，它提供了一些方法来检查异步操作是否完成，以及获取操作的结果或抛出异常。使用Future可以很容易地实现异步编程模型。</li><li><strong>Promise</strong>：是一个特殊的Future，它还提供了一个方法来设置异步操作的结果。Promise通常用于Channel操作，如注册、连接、写入等，它允许在异步操作完成后设置结果或异常。</li></ul><p>使用Future和Promise可以更好地控制异步操作的生命周期，处理异步回调中的异常，并且可以方便地进行链式调用。</p><p>接口不能包含构造函数，接口中的成员变量默认为常量。</p><p>抽象类可以包含构造函数，成员变量可以有不同的访问修饰符。</p><p>3）多继承</p><p>抽象类只能单继承，接口可以有多个实现。</p><h1 id="————容器化技术和CI-x2F-CD————"><a href="#————容器化技术和CI-x2F-CD————" class="headerlink" title="————容器化技术和CI&#x2F;CD————"></a><div align="center">————容器化技术和CI&#x2F;CD————</div></h1><h1 id="Docker-的基本概念和工作原理"><a href="#Docker-的基本概念和工作原理" class="headerlink" title="Docker 的基本概念和工作原理"></a>Docker 的基本概念和工作原理</h1><p>Docker 是一种开源的容器化平台，允许开发者和运维人员以一致的方式部署应用程序。通过将应用程序及其所有依赖打包到一个单独的容器中，Docker 提供了一种便捷的方式来执行和移动应用程序。这种容器在任何符合所需条件的环境中都能保证其运行一致。</p><p>工作原理上，Docker 利用 Linux 容器（LXC）的技术，并通过镜像（Image）、容器（Container）、仓库（Repository）等主要概念来实现应用的生命周期管理。具体来说，开发者首先创建一个 Docker 镜像，镜像是一个只读模板，包含应用程序及其运行所需的所有文件。然后，基于这个镜像，Docker 可以启动一个或多个容器，容器是镜像的运行实例。</p><h1 id="Docker-Compose-的主要用途是什么？"><a href="#Docker-Compose-的主要用途是什么？" class="headerlink" title="Docker Compose 的主要用途是什么？"></a>Docker Compose 的主要用途是什么？</h1><p>Docker Compose 是用于定义和运行多容器 Docker 应用程序的工具。Compose 使用 YAML 文件定义服务、网络和卷，通过一条简单的命令 <code>docker-compose up</code> 就可以启动并运行整个配置的应用环境。</p><p>举个例子，如果你有一个 web 应用，需要用到 MySQL 数据库，传统上你可能需要分别配置和运行这两个服务。而在 Docker Compose 中，你只需要创建一个 <code>docker-compose.yml</code> 文件，定义好 web 服务和 db 服务的配置，然后运行 <code>docker-compose up</code> 即可。</p><h1 id="Docker-镜像的构建过程"><a href="#Docker-镜像的构建过程" class="headerlink" title="Docker 镜像的构建过程"></a>Docker 镜像的构建过程</h1><ol><li>编写 Dockerfile：其中包含了一系列的指令，描述了如何构建一个 Docker 镜像。</li><li>构建镜像：使用 <code>docker build</code> 命令，通过读取 Dockerfile 的内容，逐步执行其中的指令，最终生成一个 Docker 镜像。</li><li>保存镜像：构建完成的镜像会被保存到本地的 Docker 镜像库中，可以使用 <code>docker images</code> 命令查看。</li><li>发布镜像：如果需要共享镜像，可以将其推送到 Docker Hub 或其他镜像仓库，使用 <code>docker push</code> 命令完成发布。</li><li>使用镜像：最终用户可以使用 <code>docker run</code> 命令来启动基于该镜像的容器，完成应用的部署和运行。</li></ol><h1 id="Dockerfile-的作用"><a href="#Dockerfile-的作用" class="headerlink" title="Dockerfile 的作用"></a>Dockerfile 的作用</h1><ol><li>描述构建过程：Dockerfile 通过一系列的指令详细描述了构建镜像的步骤，包括基础镜像、环境配置、软件安装等。</li><li>保证一致性：同一个 Dockerfile 可以在不同环境下生成一致的镜像，确保应用运行环境的稳定和一致。</li><li>自动化构建：通过 Dockerfile，可以方便地实现镜像的自动化构建，简化了持续集成和持续部署（CI&#x2F;CD）过程。</li><li>版本管理：Dockerfile 可以使用版本控制工具进行管理，方便回滚或跟踪更改记录。</li></ol><h1 id="使用-Dockerfile-创建自定义镜像"><a href="#使用-Dockerfile-创建自定义镜像" class="headerlink" title="使用 Dockerfile 创建自定义镜像"></a>使用 Dockerfile 创建自定义镜像</h1><ol><li><strong>编写 Dockerfile</strong>：Dockerfile 是一个文本文件，包含了一系列指令，每个指令用来描述如何构建镜像。通常包括基础镜像的选择、复制文件、安装包以及配置环境等操作。</li><li><strong>构建镜像</strong>：使用 <code>docker build</code> 命令来构建镜像。</li></ol><p>简单示例： </p><ol><li>创建一个名为 <code>Dockerfile</code> 的文件，内容如下：</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装一些软件包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y python3 python3-pip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制当前目录下的文件到工作目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> .. /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Python 依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip3 install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置容器启动时默认执行的命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>运行构建命令，将 Dockerfile 构建为镜像：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my_custom_image:latest .</span><br></pre></td></tr></table></figure><h1 id="如何优化容器启动时间？"><a href="#如何优化容器启动时间？" class="headerlink" title="如何优化容器启动时间？"></a>如何优化容器启动时间？</h1><ol><li>使用较小的基础镜像：选择精简的基础镜像，例如 <code>alpine</code>，或其他定制过的轻量级基础镜像，例如 <code>scratch</code>。</li><li>减少镜像层数：每一层都会增加容器启动的开销，精简 Dockerfile，合并多个 <code>RUN</code> 命令，将有助于减少层数。</li><li>利用缓存：在构建镜像时尽量利用 Docker 的缓存功能，避免每次都重建镜像。</li><li>适当配置健康检查：配置适当的健康检查策略，让容器可以尽快转为运行状态，而不是卡在启动过程中。</li><li>本地化镜像：将常用的容器镜像保存在本地镜像库中，避免每次启动时从远程仓库拉取。</li></ol><h1 id="如何实现容器之间的通信？"><a href="#如何实现容器之间的通信？" class="headerlink" title="如何实现容器之间的通信？"></a>如何实现容器之间的通信？</h1><ol><li><strong>使用同一个网络：</strong> 将多个容器连接到同一个 Docker 网络中，这样容器之间可以通过容器名称进行互相通信。</li><li><strong>端口映射：</strong> 将容器的端口映射到宿主机的端口，通过宿主机的 IP 和映射的端口进行通信。</li><li><strong>Docker Compose：</strong> 使用 Docker Compose 来编排多个服务，可以为每个服务定义网络，并对网络进行配置。</li><li><strong>共享网络命名空间：</strong> 通过创建共享网络命名空间的方式，使多个容器共享网络设置。</li></ol><h2 id="如何实现资源限制？"><a href="#如何实现资源限制？" class="headerlink" title="如何实现资源限制？"></a>如何实现资源限制？</h2><ol><li>为了限制容器使用的 CPU 数量，可以使用 <code>--cpu-shares</code> 或 <code>--cpus</code> 参数。<ul><li><code>--cpu-shares</code>：使用相对权重方式分配 CPU 资源。</li><li><code>--cpus</code>：直接指定容器可使用的 CPU 核数。</li></ul></li><li>为了限制容器使用的内存量，可以使用 <code>-m</code> 或 <code>--memory</code> 参数。<ul><li><code>--memory</code>：指定容器最大内存限制。</li></ul></li></ol><p>举个简单的例子，如果我们希望某个容器最多使用一个CPU核心和 512MB 内存，可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --cpus=1 --memory=512m [container_name]</span><br></pre></td></tr></table></figure><h1 id="如何使用-Jenkins-与-Docker-集成？"><a href="#如何使用-Jenkins-与-Docker-集成？" class="headerlink" title="如何使用 Jenkins 与 Docker 集成？"></a>如何使用 Jenkins 与 Docker 集成？</h1><ol><li>安装必要的插件：在 Jenkins 中，安装 Docker plugin 和 Pipeline plugin 等必要插件。</li><li>配置 Jenkins：配置环境，确保 Jenkins 可以访问 Docker 命令。</li><li>创建 Jenkins Pipeline：在 Jenkins 中创建一个 Pipeline 项目，并在 Pipeline Script 中编写构建、测试和部署的脚本，通常使用 Jenkinsfile。</li><li>运行与监控：配置好所有步骤后，运行 Pipeline 并监控执行过程，确保一切正常工作。</li></ol><h1 id="—————-容器编排引擎—————"><a href="#—————-容器编排引擎—————" class="headerlink" title="—————-容器编排引擎—————-"></a><div align="center">—————-容器编排引擎—————-</div></h1><h1 id="Kubernetes-是什么？"><a href="#Kubernetes-是什么？" class="headerlink" title="Kubernetes 是什么？"></a>Kubernetes 是什么？</h1><p>Kubernetes，它是 <strong>Google <strong>开源的神器，它介于</strong>应用服务</strong>和<strong>服务器</strong>之间，能够通过策略，协调和管理多个应用服务，只需要一个 <strong>yaml</strong> 文件配置，定义应用的部署顺序等信息，就能自动部署应用到各个服务器上，还能让它们挂了自动重启，自动扩缩容。</p><h1 id="Kubernetes-解决的问题"><a href="#Kubernetes-解决的问题" class="headerlink" title="Kubernetes 解决的问题"></a>Kubernetes 解决的问题</h1><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410201630124.jpeg" alt="容器化技术与传统虚拟机的区别" style="zoom:35%;" /><p>随着<strong>应用服务变多</strong>，需求也千奇百怪。有的应用服务不希望被外网访问到，有的部署的时候要求内存得大于 xxGB 才能正常跑。<br>你每次都需要登录到各个服务器上，执行<strong>手动</strong>操作更新。不仅容易出错，还贼<strong>浪费时间</strong>。那么问题就来了，有没有一个办法，可以解决上面的问题？当然有，<strong>没有什么是加一个中间层不能解决的，如果有，那就再加一层</strong>。这次要加的中间层，叫 <strong>Kubernetes</strong>。</p><img src="https://mmbiz.qpic.cn/sz_mmbiz_jpg/icMUEqOiagpkjfBjJIFsy8zmliazZGEHibibux495Hxcfx6ZAnFYGWU7T7PtoUpbCAu28aTA0UsFkPb0NuU2j73ccfQ/640?wx_fmt=jpeg&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="Kubernetes的位置" style="zoom:60%;" /><h1 id="为什么要用-Kubernetes-？"><a href="#为什么要用-Kubernetes-？" class="headerlink" title="为什么要用 Kubernetes ？"></a>为什么要用 Kubernetes ？</h1><p>在<a href="https://kubernetes.io/">Kubernetes</a>出现之前，我们一般都是使用Docker来管理容器化的应用。</p><p>但是Docker只是一个单机的容器管理工具，它只能管理单个节点上的容器，当我们的应用程序需要运行在多个节点上的时候，就需要使用一些其他的工具来管理这些节点，比如Docker Swarm、Mesos、<a href="https://kubernetes.io/">Kubernetes</a>等等。</p><p>这些工具都是容器编排引擎，它们可以用来管理多个节点上的容器，但是它们之间也有一些区别：</p><ul><li>Docker Swarm是Docker官方提供的一个容器编排引擎，它的功能比较简单，适合于一些小型的、简单的场景</li><li>Mesos和<a href="https://kubernetes.io/">Kubernetes</a>则是比较复杂的容器编排引擎，Mesos是Apache基金会的一个开源项目</li><li><a href="https://kubernetes.io/">Kubernetes</a>是Google在2014年开源的，目前已经成为了CNCF（Cloud Native Computing Foundation）的一个顶级项目，基本上已经成为了容器编排引擎的事实标准了。</li></ul><h1 id="Kunbernetes-与-Docker之间的关系"><a href="#Kunbernetes-与-Docker之间的关系" class="headerlink" title="Kunbernetes 与 Docker之间的关系"></a>Kunbernetes 与 Docker之间的关系</h1><p>Kubernetes 与 Docker 之间的关系可以概括为互补关系，两者在容器化技术的不同层面发挥作用。</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>Docker 是一个开源的容器化平台，它允许开发人员将应用程序及其依赖项打包到一个可移植的容器中，确保这些容器可以在任何支持 Docker 的环境中一致地运行。Docker 解决了开发、测试和生产环境之间的一致性问题，使得应用程序的开发、测试和部署过程更加一致和可靠。Docker 的主要组成部分包括：</p><ul><li><strong>镜像</strong>：包含了应用程序及其所需的所有依赖项的快照。</li><li><strong>容器</strong>：基于镜像运行的实例，提供了一个隔离的环境来运行应用程序。</li><li><strong>仓库</strong>：存储和分享镜像的地方，如 Docker Hub。</li></ul><h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><p>Kubernetes 是一个开源的容器编排系统，它用于自动化部署、扩展和管理容器化应用程序。Kubernetes 提供了一系列强大的功能，比如服务发现、负载均衡、滚动更新、自动恢复等，使得开发人员可以更加轻松地构建、部署和管理大规模容器化应用程序。Kubernetes 的核心概念包括：</p><ul><li><strong>Pod</strong>：Kubernetes 中最小的部署单位，它可以包含一个或多个容器，这些容器共享存储、网络等资源。</li><li><strong>Service</strong>：一种抽象，定义了一组逻辑上的 Pod 和访问策略。</li><li><strong>Deployment</strong>：用于管理应用程序的副本，确保指定数量的 Pod 始终处于运行状态。</li><li><strong>StatefulSet</strong>：用于管理有状态的应用程序，保证每个 Pod 的唯一身份。</li></ul><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><ol><li><strong>互补性</strong>：Docker 和 Kubernetes 各自解决了容器化技术的不同方面。Docker 专注于单个容器的生命周期管理，而 Kubernetes 则关注多个容器的组织、管理和调度。</li><li><strong>集成</strong>：虽然 Kubernetes 可以使用多种容器运行时（如 containerd、CRI-O 等），但 Docker 是最常用的容器运行时之一。Kubernetes 可以直接使用 Docker 镜像，并通过其 Pod 概念管理 Docker 容器。</li><li><strong>生态系统</strong>：两者都拥有庞大的生态系统和社区支持，共同推动了容器技术的发展。</li></ol><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>在实际应用中，开发人员通常会使用 Docker 来构建和打包应用程序，然后使用 Kubernetes 来部署和管理这些容器化应用程序。这种结合使用的方式可以充分利用 Docker 和 Kubernetes 的各自优势，提高应用程序的开发、测试和部署效率。</p><p>总之，Kubernetes 和 Docker 之间是互补而非竞争的关系。它们共同构成了现代云原生应用开发和部署的重要基石。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410202001894.jpeg" style="zoom:35%;" /><h1 id="Kubernetes-架构原理"><a href="#Kubernetes-架构原理" class="headerlink" title="Kubernetes 架构原理"></a>Kubernetes 架构原理</h1><p>为了实现上面的功能，Kubernetes 会将我们的服务器划为两部分，一部分叫<strong>控制平面</strong>（control plane，以前叫master），另一部分叫<strong>工作节点</strong>，也就是 <strong>Node</strong>。简单来说它们的关系就是老板和打工人， 用现在流行的说法就是训练师和帕鲁。控制平面负责控制和管理各个 Node，而 Node 则负责实际运行各个应用服务。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410201649210.jpeg" alt="k8s控制平面和Node的关系" style="zoom: 35%;" /><p>我们依次看下这两者的内部架构。</p><h2 id="控制平面内部组件"><a href="#控制平面内部组件" class="headerlink" title="控制平面内部组件"></a>控制平面内部组件</h2><ul><li>以前我们需要登录到每台服务器上，手动执行各种命令，现在我们只需要调用 k8s 的提供的 api 接口，就能操作这些服务资源，这些接口都由 <strong>API Server</strong> 组件提供。</li><li>以前我们需要到处看下哪台服务器 cpu 和内存资源充足，然后才能部署应用，现在这部分决策逻辑由 <strong>Scheduler</strong>（调度器）来完成。</li><li>找到服务器后，以前我们会手动创建，关闭服务，现在这部分功能由 <strong>Controller Manager</strong>（控制器管理器）来负责。</li><li>上面的功能都会产生一些数据，这些数据需要被保存起来，方便后续做逻辑，因此 k8s 还会需要一个<strong>存储层</strong>，用来存放各种数据信息，目前是用的 <strong>etcd</strong>，这部分源码实现的很解耦，后续可能会扩展支持其他中间件。</li></ul><p>以上就是控制平面内部的组件。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410201649489.jpeg" alt="k8s控制平面组件" style="zoom:35%;" /><p>我们接下来再看看 Node 里有哪些组件。</p><h2 id="Node-内部组件"><a href="#Node-内部组件" class="headerlink" title="Node 内部组件"></a>Node 内部组件</h2><p>Node 是实际的工作节点，它既可以是<strong>裸机服务器</strong>，也可以是<strong>虚拟机</strong>。它会负责实际运行各个应用服务。多个应用服务<strong>共享</strong>一台 Node 上的内存和 CPU 等计算资源。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410201650945.jpeg" alt="Node可以是裸机服务器或虚拟机" style="zoom:35%;" /><p>在文章开头，我们聊到了部署多个应用服务的场景。以前我们需要上传代码到服务器，而用了 k8s 之后，我们只需要将服务代码打包成<strong>Container Image</strong>(容器镜像)，就能一行命令将它部署。</p><p>如果你不了解容器镜像的含义，你可以简单理解为它其实就是将<strong>应用代码</strong>和依赖的<strong>系统环境</strong>打了个压缩包，在任意一台机器上解压这个压缩包，就能正常运行服务。为了下载和部署镜像，Node 中会有一个 <strong>Container runtime</strong> 组件。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410201651819.jpeg" alt="将容器镜像粗略理解为压缩包" style="zoom:35%;" /><p>每个应用服务都可以认为是一个 <strong>Container</strong>（容器）, 并且大多数时候，我们还会为应用服务搭配一个日志收集器 Container 或监控收集器 Container，多个 Container 共同组成一个一个 <strong>Pod</strong>，它运行在 Node 上。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410201651862.jpeg" alt="一个pod内有多个容器" style="zoom:35%;" /><p>k8s 可以将 pod 从某个 Node 调度到另一个 Node，还能以 pod 为单位去做重启和动态扩缩容的操作。<br>所以说 <strong>Pod 是 k8s 中最小的调度单位</strong>。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410201654832.jpeg" alt="Node调度Pod" style="zoom:35%;" /><p>另外，前面提到控制平面会用 <strong>Controller Manager</strong> （通过API Server）控制 Node 创建和关闭服务，那 Node 也得有个组件能接收到这个命令才能去做这些动作，这个组件叫 <strong>kubelet</strong>，它主要负责管理和监控 Pod。最后，Node 中还有个 <strong>Kube Proxy</strong> ，它负责 Node 的网络通信功能，有了它，外部请求就能被转发到 Pod 内。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410201655585.jpeg" alt="控制平面和Node的组件" style="zoom:35%;" /><h1 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h1><p><strong>控制平面和Node</strong> 共同构成了一个 <strong>Cluster</strong>，也就是<strong>集群</strong>。在公司里，我们一般会构建多个集群, 比如测试环境用一个集群，生产环境用另外一个集群。同时，为了将集群内部的服务暴露给外部用户使用，我们一般还会部署一个入口控制器，比如 <strong>Ingress 控制器（比如Nginx）</strong>，它可以提供一个入口让外部用户访问集群内部服务。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410201655859.jpeg" alt="生产和测试环境" style="zoom:35%;" /><h1 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h1><p>上面提到说我们可以使用 k8s 提供的 API 去创建服务，但问题就来了，这是需要我们自己写代码去调用这些 API 吗？答案是不需要，k8s 为我们准备了一个命令行工具 <strong>kubectl</strong>，我们只需要执行命令，它内部就会调用 k8s 的 API。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410201658446.jpeg" alt="kubectl调用k8s的API" style="zoom:35%;" /><p>接下来我们以部署服务为例子，看下 k8s 是怎么工作的。</p><h1 id="部署-Kubernetes-服务"><a href="#部署-Kubernetes-服务" class="headerlink" title="部署 Kubernetes 服务"></a>部署 Kubernetes 服务</h1><p>首先我们需要编写 <strong>YAML 文件</strong>，在里面定义 Pod 里用到了哪些镜像，占用多少内存和 CPU 等信息。然后使用 kubectl 命令行工具执行 <code>kubectl apply -f xx.yaml</code> ，此时 kubectl 会读取和解析 YAML 文件，将解析后的对象通过 API 请求发送给 Kubernetes 控制平面内 的 <strong>API Server</strong>。API Server 会根据要求，驱使 <strong>Scheduler</strong> 通过 <strong>etcd</strong> 提供的数据寻找合适的 <strong>Node</strong>， <strong>Controller Manager</strong> 会通过 API Server 控制 Node 创建服务，Node 内部的 <strong>kubelet</strong> 在收到命令后会开始基于 <strong>Container runtime</strong> 组件去拉取镜像创建容器，最终完成 <strong>Pod</strong> 的创建。</p><p>至此服务完成创建。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410201700985.jpeg" alt="部署应用服务" style="zoom:35%;" /><p>整个过程下来，我们只需要写一遍 yaml 文件，和执行一次 kubectl 命令，比以前省心太多了！部署完服务后，我们来看下服务是怎么被调用的。</p><h1 id="调用-Kubernetes-服务"><a href="#调用-Kubernetes-服务" class="headerlink" title="调用 Kubernetes 服务"></a>调用 Kubernetes 服务</h1><p>以前外部用户小明，直接在浏览器上发送 http 请求，就能打到我们服务器上的 Nginx，然后转发到部署的服务内。用了 k8s 之后，外部请求会先到达 Kubernetes 集群的 Ingress 控制器，然后请求会被转发到 Kubernetes 内部的某个 Node 的 <strong>Kube Proxy</strong> 上，再找到对应的 pod，然后才是转发到内部<strong>容器服务</strong>中，处理结果原路返回，到这就完成了一次服务调用。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410201700166.jpeg" alt="用户调用k8s内应用服务的流程" style="zoom: 35%;" /><p>到这里我们就大概了解了 k8s 的工作原理啦，它本质上就是应用服务和服务器之间的<strong>中间层</strong>，通过暴露一系列 API 能力让我们简化服务的部署运维流程。</p><p>并且，不少中大厂基于这些 API 能力搭了自己的服务管理平台，程序员不再需要敲 kubectl 命令，直接在界面上点点几下，就能完成服务的部署和扩容等操作，是真的嘎嘎好用。</p>]]></content>
    
    
    <summary type="html">Java, all in one！</summary>
    
    
    
    <category term="学习" scheme="https://01petard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://01petard.github.io/tags/Java/"/>
    
    <category term="分布式" scheme="https://01petard.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>My Java Guide - 算法</title>
    <link href="https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20%E7%AE%97%E6%B3%95/"/>
    <id>https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20%E7%AE%97%E6%B3%95/</id>
    <published>2024-10-14T16:23:00.000Z</published>
    <updated>2024-10-14T16:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="—————线性表、栈—————"><a href="#—————线性表、栈—————" class="headerlink" title="—————线性表、栈—————"></a><div align="center">—————线性表、栈—————</div></h1><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SqList</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXSIZE</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] data = <span class="keyword">new</span> <span class="title class_">int</span>[MAXSIZE];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反转数组"><a href="#反转数组" class="headerlink" title="反转数组"></a>反转数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseSqList</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        swap(data[left], data[right]);  <span class="comment">// 交换元素</span></span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p>反转一个单链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseLinkList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 用于指向反转后的前一个节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> head; <span class="comment">// 当前节点</span></span><br><span class="line">    ListNode next; <span class="comment">// 用于暂存当前节点的下一个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">        next = curr.next; <span class="comment">// 暂存当前节点的下一个节点</span></span><br><span class="line">        curr.next = prev; <span class="comment">// 将当前节点的 next 指向前一个节点</span></span><br><span class="line">        prev = curr; <span class="comment">// 移动 prev 指针</span></span><br><span class="line">        curr = next; <span class="comment">// 移动 curr 指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev; <span class="comment">// 返回反转后的头节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合并两个数组"><a href="#合并两个数组" class="headerlink" title="合并两个数组"></a>合并两个数组</h2><p>合并两个有序数组为一个有序数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m - <span class="number">1</span>, j = n - <span class="number">1</span>, k = m + n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class="line">            nums1[k--] = nums1[i--];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums1[k--] = nums2[j--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        nums1[k--] = nums2[j--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合并两个链表"><a href="#合并两个链表" class="headerlink" title="合并两个链表"></a>合并两个链表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并两个排序的链表。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> l1 第一个链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> l2 第二个链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 合并后的链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span> dummy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="literal">null</span> &amp;&amp; l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">            current.next = l1;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current.next = l2;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果其中一个链表已经为空，将另一个链表的剩余部分直接连接到当前节点后面</span></span><br><span class="line">    <span class="keyword">if</span> (l1 != <span class="literal">null</span>) &#123;</span><br><span class="line">        current.next = l1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current.next = l2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拆分两个数组"><a href="#拆分两个数组" class="headerlink" title="拆分两个数组"></a>拆分两个数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">splitArray</span><span class="params">(<span class="type">int</span>[] inputArray)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; oddNumbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; evenNumbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : inputArray) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            evenNumbers.add(num); <span class="comment">// 偶数</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            oddNumbers.add(num);   <span class="comment">// 奇数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 转换 List 为数组</span></span><br><span class="line">    <span class="type">int</span>[] oddArray = oddNumbers.stream().mapToInt(Integer::intValue).toArray();</span><br><span class="line">    <span class="type">int</span>[] evenArray = evenNumbers.stream().mapToInt(Integer::intValue).toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拆分两个链表"><a href="#拆分两个链表" class="headerlink" title="拆分两个链表"></a>拆分两个链表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拆分链表，将奇数节点和偶数节点拆分成两个链表。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head 输入的链表头节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 一个包含两个链表头节点的数组，第一个链表包含所有奇数节点，第二个链表包含所有偶数节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode[] splitListToParts(ListNode head) &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">oddDummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">evenDummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">oddCurrent</span> <span class="operator">=</span> oddDummy;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">evenCurrent</span> <span class="operator">=</span> evenDummy;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 用于区分奇数和偶数节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index % <span class="number">2</span> == <span class="number">1</span>) &#123; <span class="comment">// 奇数位置</span></span><br><span class="line">            oddCurrent.next = current;</span><br><span class="line">            oddCurrent = oddCurrent.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 偶数位置</span></span><br><span class="line">            evenCurrent.next = current;</span><br><span class="line">            evenCurrent = evenCurrent.next;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.next;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置链表结尾</span></span><br><span class="line">    oddCurrent.next = <span class="literal">null</span>;</span><br><span class="line">    evenCurrent.next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>[]&#123;oddDummy.next, evenDummy.next&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TopK"><a href="#TopK" class="headerlink" title="TopK"></a>TopK</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最小堆法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] findTopKElements(<span class="type">int</span>[] data, <span class="type">int</span> k) &#123;</span><br><span class="line">    PriorityQueue&lt;Integer&gt; minHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(k); <span class="comment">// 创建一个小顶堆，大小为 k</span></span><br><span class="line">    <span class="comment">// 遍历数据流</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (minHeap.size() &lt; k) &#123;</span><br><span class="line">            <span class="comment">// 如果堆的大小还没有达到 k，直接加入元素</span></span><br><span class="line">            minHeap.offer(num);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果当前元素大于堆顶元素，则替换堆顶元素</span></span><br><span class="line">            <span class="keyword">if</span> (num &gt; minHeap.peek()) &#123;</span><br><span class="line">                minHeap.poll(); <span class="comment">// 移除堆顶元素</span></span><br><span class="line">                minHeap.offer(num); <span class="comment">// 加入当前元素</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将堆转换为数组</span></span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; k) result[index++] = minHeap.poll();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴力排序法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] findTopK(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="comment">// 升序排列</span></span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    <span class="comment">// 取最后k个最大数</span></span><br><span class="line">    System.arraycopy(nums, nums.length - k, result, <span class="number">0</span>, k);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组和列表之间的转换"><a href="#数组和列表之间的转换" class="headerlink" title="数组和列表之间的转换"></a>数组和列表之间的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组转列表</span></span><br><span class="line"><span class="comment">//Arrays.asList()的数据会受影响</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testArray2List</span><span class="params">()</span>&#123;</span><br><span class="line">    String[] strs = &#123;<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>&#125;;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(strs);</span><br><span class="line">    <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//列表转数组</span></span><br><span class="line"><span class="comment">//list.toArray()的数据不会受影响</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testList2Array</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">    String[] array = list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[list.size()]);</span><br><span class="line">    <span class="comment">//String[] array = list.toArray(new String[0]);</span></span><br><span class="line">    <span class="keyword">for</span> (String s : array) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈、队列"><a href="#栈、队列" class="headerlink" title="栈、队列"></a>栈、队列</h1><h2 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueueWithTwoStacks</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stackA; <span class="comment">// 用于入队</span></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stackB; <span class="comment">// 用于出队</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> 用两个栈实现队列_QueueWithTwoStacks() &#123;</span><br><span class="line">        stackA = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stackB = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入队操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        stackA.push(value);  <span class="comment">// 将元素压入 stackA</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出队操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dequeue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stackB.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 如果 stackB 为空，则将 stackA 中的元素依次弹出并压入 stackB</span></span><br><span class="line">            <span class="keyword">while</span> (!stackA.isEmpty()) &#123;</span><br><span class="line">                stackB.push(stackA.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回并弹出 stackB 的顶部元素</span></span><br><span class="line">        <span class="keyword">return</span> stackB.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stackA.isEmpty() &amp;&amp; stackB.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取队列的大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stackA.size() + stackB.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">QueueWithTwoStacks</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueueWithTwoStacks</span>();</span><br><span class="line">        System.out.println(queue.isEmpty()); <span class="comment">// 输出 true</span></span><br><span class="line">        queue.enqueue(<span class="number">1</span>);</span><br><span class="line">        queue.enqueue(<span class="number">2</span>);</span><br><span class="line">        queue.enqueue(<span class="number">3</span>);</span><br><span class="line">        System.out.println(queue.dequeue()); <span class="comment">// 输出 1</span></span><br><span class="line">        System.out.println(queue.dequeue()); <span class="comment">// 输出 2</span></span><br><span class="line">        queue.enqueue(<span class="number">4</span>);</span><br><span class="line">        System.out.println(queue.dequeue()); <span class="comment">// 输出 3</span></span><br><span class="line">        queue.enqueue(<span class="number">5</span>);</span><br><span class="line">        queue.enqueue(<span class="number">6</span>);</span><br><span class="line">        System.out.println(queue.size()); <span class="comment">// 输出 3</span></span><br><span class="line">        System.out.println(queue.isEmpty()); <span class="comment">// 输出 false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用数组实现循环队列"><a href="#用数组实现循环队列" class="headerlink" title="用数组实现循环队列"></a>用数组实现循环队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircularQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] queue;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rear;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CircularQueue</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">int</span>[capacity];</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        rear = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">enqueue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rear = (rear + <span class="number">1</span>) % capacity;</span><br><span class="line">        queue[rear] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dequeue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Queue is empty.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> queue[front];</span><br><span class="line">        front = (front + <span class="number">1</span>) % capacity;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> front == <span class="number">0</span> &amp;&amp; rear == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + <span class="number">1</span>) % capacity == front;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a><a href="https://leetcode.cn/problems/valid-parentheses/">有效的括号</a></h2><p>判断字符串中的括号是否有效配对。例如<code>[]&#123;()()&#125;&#125;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> ch : s.toCharArray())&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;(&#x27;</span>) stack.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;[&#x27;</span>) stack.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;&#123;&#x27;</span>) stack.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(stack.isEmpty() || stack.pop() != ch) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小栈"><a href="#最小栈" class="headerlink" title="最小栈"></a>最小栈</h2><p>设计一个可以获取最小元素的栈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; minStack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinStack</span><span class="params">()</span> &#123;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        minStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        stack.push(val);</span><br><span class="line">        <span class="keyword">if</span> (minStack.isEmpty() || val &lt;= minStack.peek()) &#123;</span><br><span class="line">            minStack.push(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stack.pop().equals(minStack.peek())) &#123;</span><br><span class="line">            minStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="———————树———————"><a href="#———————树———————" class="headerlink" title="———————树———————"></a><div align="center">———————树———————</div></h1><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="二叉树结构"><a href="#二叉树结构" class="headerlink" title="二叉树结构"></a>二叉树结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode(<span class="type">int</span> x) &#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前序-中序-后序、层次遍历"><a href="#前序-中序-后序、层次遍历" class="headerlink" title="前序|中序|后序、层次遍历"></a>前序|中序|后序、层次遍历</h2><p>实现二叉树的前序、中序、后序、层次遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前序遍历 （根-左-右）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(BinaryNode&lt;Integer&gt; root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.print(root.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        preOrder(root.left);</span><br><span class="line">        preOrder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中序遍历 （左-根-右）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inOrder</span><span class="params">(BinaryNode&lt;Integer&gt; root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        inOrder(root.left);</span><br><span class="line">        System.out.print(root.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        inOrder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后序遍历 （左-右-根）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">(BinaryNode&lt;Integer&gt; root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        postOrder(root.left);</span><br><span class="line">        postOrder(root.right);</span><br><span class="line">        System.out.print(root.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 层次遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(BinaryNode&lt;Integer&gt; root)</span> &#123;</span><br><span class="line">    <span class="comment">// 层次遍历的结果集</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 等待遍历的节点队列</span></span><br><span class="line">    Queue&lt;BinaryNode&lt;Integer&gt;&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 首次遍历的节点是根节点</span></span><br><span class="line">    queue.add(root);</span><br><span class="line">    <span class="comment">// 一直遍历到所有节点的叶子节点</span></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 当前层的遍历结果集</span></span><br><span class="line">        List&lt;Integer&gt; level = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 当前层的节点数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">        <span class="comment">// 遍历当前层的所有节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            BinaryNode&lt;Integer&gt; node = queue.poll();</span><br><span class="line">            level.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) queue.offer(node.left);</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) queue.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        result.add(level);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找、插入、删除、更新"><a href="#查找、插入、删除、更新" class="headerlink" title="查找、插入、删除、更新"></a>查找、插入、删除、更新</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BinaryNode&lt;Integer&gt; <span class="title function_">search</span><span class="params">(BinaryNode&lt;Integer&gt; root, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span> || root.val == key) &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (key &lt; root.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> search(root.left, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> search(root.right, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入新节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BinaryNode&lt;Integer&gt; <span class="title function_">insert</span><span class="params">(BinaryNode&lt;Integer&gt; root, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BinaryNode</span>&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (data &lt;= root.val) &#123;</span><br><span class="line">        root.left = insert(root.left, data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root.right = insert(root.right, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 批量插入新节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertBatch</span><span class="params">(BinaryNode&lt;Integer&gt; root, List&lt;Integer&gt; datas)</span> &#123;</span><br><span class="line">    datas.forEach(data -&gt; insert(root, data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量插入新节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertBatch</span><span class="params">(BinaryNode&lt;Integer&gt; root, <span class="type">int</span>[] datas)</span> &#123;</span><br><span class="line">    insertBatch(root, Arrays.stream(datas).boxed().toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BinaryNode&lt;Integer&gt; <span class="title function_">delete</span><span class="params">(BinaryNode&lt;Integer&gt; root, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (key &lt; root.val) &#123;</span><br><span class="line">        root.left = delete(root.left, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; root.val) &#123;</span><br><span class="line">        root.right = delete(root.right, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 找到了要删除的节点</span></span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果没有左子节点或没有子节点，则返回右子节点</span></span><br><span class="line">            <span class="keyword">return</span> root.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果没有右子节点，则返回左子节点</span></span><br><span class="line">            <span class="keyword">return</span> root.left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果有两个子节点，则找到右子树中的最小节点（即后继节点）</span></span><br><span class="line">        root.val = searchMin(root.right).val;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除找到的后继节点</span></span><br><span class="line">        root.right = delete(root.right, root.val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查找子树中的最小值节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BinaryNode&lt;Integer&gt; <span class="title function_">searchMin</span><span class="params">(BinaryNode&lt;Integer&gt; root)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        root = root.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BinaryNode&lt;Integer&gt; <span class="title function_">update</span><span class="params">(BinaryNode&lt;Integer&gt; root, Integer key, Integer val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (key &lt; root.val) &#123;</span><br><span class="line">        root.left = update(root.left, key, val); <span class="comment">// 如果 key 小于当前节点的值，则递归左子树</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; root.val) &#123;</span><br><span class="line">        root.right = update(root.right, key, val); <span class="comment">// 如果 key 大于当前节点的值，则递归右子树</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 找到了要更新的节点</span></span><br><span class="line">        root.val = val; <span class="comment">// 更新节点的值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="翻转二叉树"><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//翻转二叉树</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BinaryNode&lt;Integer&gt; <span class="title function_">invertTree</span><span class="params">(BinaryNode&lt;Integer&gt; root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换左右子树</span></span><br><span class="line">    BinaryNode&lt;Integer&gt; temp = root.left;</span><br><span class="line">    root.left = invertTree(root.right);</span><br><span class="line">    root.right = invertTree(temp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断路径总和"><a href="#判断路径总和" class="headerlink" title="判断路径总和"></a>判断路径总和</h2><p>判断二叉树中是否存在一条路径，其路径和等于给定的数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> sum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) <span class="keyword">return</span> sum == root.val;</span><br><span class="line">    <span class="keyword">return</span> hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断镜像二叉树"><a href="#判断镜像二叉树" class="headerlink" title="判断镜像二叉树"></a>判断镜像二叉树</h2><p>判断一个二叉树是否是它的镜像。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> isMirror(root.left, root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isMirror</span><span class="params">(TreeNode t1, TreeNode t2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (t1 == <span class="literal">null</span> &amp;&amp; t2 == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (t1 == <span class="literal">null</span> || t2 == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> (t1.val == t2.val)</span><br><span class="line">            &amp;&amp; isMirror(t1.right, t2.left)</span><br><span class="line">            &amp;&amp; isMirror(t1.left, t2.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h1><h2 id="哈夫曼编码原理"><a href="#哈夫曼编码原理" class="headerlink" title="哈夫曼编码原理"></a>哈夫曼编码原理</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409292235997.png" alt="image-20240929223529827" style="zoom: 50%;" /><h2 id="哈夫曼树结构"><a href="#哈夫曼树结构" class="headerlink" title="哈夫曼树结构"></a>哈夫曼树结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HuffmanNode</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">BinaryNode</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;HuffmanNode&lt;T&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> T val;</span><br><span class="line">    <span class="keyword">public</span> HuffmanNode&lt;T&gt; left;</span><br><span class="line">    <span class="keyword">public</span> HuffmanNode&lt;T&gt; right;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> frequency;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HuffmanNode</span><span class="params">(T val, <span class="type">int</span> frequency)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(val);</span><br><span class="line">        <span class="built_in">this</span>.val = val;  <span class="comment">// 添加这一行</span></span><br><span class="line">        <span class="built_in">this</span>.frequency = frequency;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HuffmanNode</span><span class="params">(HuffmanNode&lt;T&gt; left, HuffmanNode&lt;T&gt; right)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="literal">null</span>, left, right);  <span class="comment">// 将 val 设置为 null</span></span><br><span class="line">        <span class="built_in">this</span>.val = <span class="literal">null</span>;  <span class="comment">// 合并节点不需要值</span></span><br><span class="line">        <span class="built_in">this</span>.frequency = left.frequency + right.frequency;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HuffmanNode</span><span class="params">(T val, HuffmanNode&lt;T&gt; left, HuffmanNode&lt;T&gt; right)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(val, left, right);</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">        <span class="built_in">this</span>.frequency = left.frequency + right.frequency;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(HuffmanNode&lt;T&gt; other)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(<span class="built_in">this</span>.frequency, other.frequency);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构建哈夫曼树"><a href="#构建哈夫曼树" class="headerlink" title="构建哈夫曼树"></a>构建哈夫曼树</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理字符串</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Character, Integer&gt; <span class="title function_">calculateFrequencies</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; frequencies = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> ch : str.toCharArray()) &#123;</span><br><span class="line">        frequencies.put(ch, frequencies.getOrDefault(ch, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> frequencies;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构建哈夫曼树</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HuffmanNode&lt;Character&gt; <span class="title function_">buildHuffmanTree</span><span class="params">(Map&lt;Character, Integer&gt; frequencies)</span> &#123;</span><br><span class="line">    PriorityQueue&lt;HuffmanNode&lt;Character&gt;&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Character, Integer&gt; entry : frequencies.entrySet()) &#123;</span><br><span class="line">        priorityQueue.offer(<span class="keyword">new</span> <span class="title class_">HuffmanNode</span>&lt;&gt;(entry.getKey(), entry.getValue()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (priorityQueue.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        HuffmanNode&lt;Character&gt; left = priorityQueue.poll();</span><br><span class="line">        HuffmanNode&lt;Character&gt; right = priorityQueue.poll();</span><br><span class="line">        <span class="type">int</span> <span class="variable">mergedFrequency</span> <span class="operator">=</span> left.frequency + right.frequency;</span><br><span class="line"></span><br><span class="line">        HuffmanNode&lt;Character&gt; mergedNode = <span class="keyword">new</span> <span class="title class_">HuffmanNode</span>&lt;&gt;(<span class="literal">null</span>, mergedFrequency);</span><br><span class="line">        mergedNode.left = left;</span><br><span class="line">        mergedNode.right = right;</span><br><span class="line"></span><br><span class="line">        priorityQueue.offer(mergedNode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> priorityQueue.poll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈夫曼编码、解码"><a href="#哈夫曼编码、解码" class="headerlink" title="哈夫曼编码、解码"></a>哈夫曼编码、解码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Character, String&gt; <span class="title function_">encode</span><span class="params">(</span></span><br><span class="line"><span class="params">    HuffmanNode&lt;Character&gt; node, </span></span><br><span class="line"><span class="params">    String code, </span></span><br><span class="line"><span class="params">    Map&lt;Character, String&gt; codes</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.val != <span class="literal">null</span>) &#123;</span><br><span class="line">            codes.put(node.val, code);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            generateCodes(node.left, code + <span class="string">&quot;0&quot;</span>, codes);</span><br><span class="line">            generateCodes(node.right, code + <span class="string">&quot;1&quot;</span>, codes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> codes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decode</span><span class="params">(HuffmanNode&lt;Character&gt; root, String encodedString)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">decodedString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    HuffmanNode&lt;Character&gt; currentNode = root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逐位读取编码：从编码字符串中逐位读取每个比特（0 或 1）。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> bit : encodedString.toCharArray()) &#123;</span><br><span class="line">        <span class="comment">// 如果读取到 0，就向左子树移动；如果读取到 1，就向右子树移动。</span></span><br><span class="line">        currentNode = (bit == <span class="string">&#x27;0&#x27;</span>) ? currentNode.left : currentNode.right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currentNode.val != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 找到叶子节点。</span></span><br><span class="line">            <span class="comment">// 当前节点是叶子节点时，表示找到了一个字符。</span></span><br><span class="line">            <span class="comment">// 将该字符记录下来，并重置当前节点回到树的根节点，继续读取下一个比特。</span></span><br><span class="line">            decodedString.append(currentNode.val);</span><br><span class="line">            currentNode = root; <span class="comment">// 重置为根节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> decodedString.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计算带权路径长度、压缩率"><a href="#计算带权路径长度、压缩率" class="headerlink" title="计算带权路径长度、压缩率"></a>计算带权路径长度、压缩率</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateWPL</span><span class="params">(HuffmanNode&lt;Character&gt; node, <span class="type">int</span> depth)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.val != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> node.frequency * depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> calculateWPL(node.left, depth + <span class="number">1</span>) + calculateWPL(node.right, depth + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateOriginalSize</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="comment">// 每个字符占用16位</span></span><br><span class="line">    <span class="keyword">return</span> str.length() * Character.SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateEncodedSize</span><span class="params">(String encodedString)</span> &#123;</span><br><span class="line">    <span class="comment">// 编码后的字符串占用的位数</span></span><br><span class="line">    <span class="keyword">return</span> encodedString.length();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">calculateCompressionRate</span><span class="params">(<span class="type">int</span> originalSize, <span class="type">int</span> encodedSize)</span> &#123;</span><br><span class="line">    <span class="comment">// 压缩率计算公式</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - (<span class="type">double</span>) encodedSize / originalSize) * <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="————-排序、搜索算法————"><a href="#————-排序、搜索算法————" class="headerlink" title="————-排序、搜索算法————-"></a><div align="center">————-排序、搜索算法————-</div></h1><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409052221888.jpg" alt="PixPin_2024-05-04_13-16-42" style="zoom: 67%;" /><p><strong>交换算法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组中两个元素</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array 需要排序的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i     元素一的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j     元素二的索引</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[i];</span><br><span class="line">    array[i] = array[j];</span><br><span class="line">    array[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 思考：能不能不用临时变量就交换两个数呢？</span></span><br><span class="line"><span class="comment">// 可以的</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    a = a + b; <span class="comment">// a 现在变成了 a+b</span></span><br><span class="line">    b = a - b; <span class="comment">// b = (a+b) - b, b 变成了 a</span></span><br><span class="line">    a = a - b; <span class="comment">// a = (a+b) - a, a 变成了 b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入类排序"><a href="#插入类排序" class="headerlink" title="插入类排序"></a>插入类排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************插入类排序**********************/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    直接插入排序：最好O(n)，最坏O(n^2)，平均O(n^2)，空间复杂度：O(1)</span></span><br><span class="line"><span class="comment">    折半插入排序：最好O(nlog2n)，最坏O(n^2)，平均O(n^2)，空间复杂度：O(1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//直接插入排序：从前往后不断将之后的关键字倒着往前比较，插入到有序序列中</span></span><br></pre></td></tr></table></figure><p>在插入排序时，使用二分查找找到插入的位置，从而减少比较次数（但仍然需要线性时间插入元素）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接插入排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> R 待排序数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">InsertSort</span><span class="params">(<span class="type">int</span>[] R)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j, temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; R.length; i++) &#123;</span><br><span class="line">        temp = R[i];  <span class="comment">// 待排关键字</span></span><br><span class="line">        <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;  <span class="comment">//往前遍历</span></span><br><span class="line">            <span class="keyword">if</span> (temp &lt; R[j])&#123;</span><br><span class="line">                R[j + <span class="number">1</span>] = R[j];</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        R[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择类排序"><a href="#选择类排序" class="headerlink" title="选择类排序"></a>选择类排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************选择类排序**********************/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    简单选择排序：O(n^2)，执行次数和初始序列没有关系，空间复杂度O(1)</span></span><br><span class="line"><span class="comment">    堆排序：最好/坏O(nlog2n)，空间复杂度：O(1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//简单选择排序（最简单粗暴的排序，就像一个人从石头堆中一颗一颗地挑石头）</span></span><br></pre></td></tr></table></figure><p>在选择最小元素时，记录最小元素的索引，并在每次找到更小元素时更新索引。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单选择排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> R 待排序数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SelectSort</span><span class="params">(<span class="type">int</span>[] R)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j, k, temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; R.length; i++) &#123;</span><br><span class="line">        k = i;  <span class="comment">//k为最小值的下标</span></span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; R.length; j++) &#123;  <span class="comment">// 让R[k]与序列所有未排序关键字比较，得到最小值的下标</span></span><br><span class="line">            <span class="keyword">if</span> (R[j] &lt; R[k]) &#123;</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  <span class="comment">//一次for j循环总能至少找到一个最小值</span></span><br><span class="line">        swap(R, i, k);  <span class="comment">//交换当前值的下标i和最小值的下标k</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待排序数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成堆（重新排列数组）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heapify(arr, n, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逐个从堆中提取元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// Move current root to end</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在缩减的堆上调用max heapify</span></span><br><span class="line">        heapify(arr, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将以节点i为根的子树进行重排序，节点i是arr[]中的索引。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> n, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">largest</span> <span class="operator">=</span> i; <span class="comment">// 初始化根节点为最大值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">1</span>; <span class="comment">// 左子树</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">2</span>; <span class="comment">// 右子树</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果左子树大于根</span></span><br><span class="line">    <span class="keyword">if</span> (left &lt; n &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果右子树大于根和最大值</span></span><br><span class="line">    <span class="keyword">if</span> (right &lt; n &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果最大值不是根节点</span></span><br><span class="line">    <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">swap</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[largest];</span><br><span class="line">        arr[largest] = swap;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归排受影响的子树</span></span><br><span class="line">        heapify(arr, n, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆的插入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">pushHeap</span><span class="params">(List&lt;Integer&gt; maxHeap, <span class="type">int</span> insertElem)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">currentPos</span> <span class="operator">=</span> maxHeap.size(); <span class="comment">// 插入关键字的位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">parentPos</span> <span class="operator">=</span> currentPos / <span class="number">2</span>; <span class="comment">// 父节点的位置</span></span><br><span class="line">    <span class="keyword">while</span> (currentPos != <span class="number">0</span>) &#123; <span class="comment">// 插入元素开始上调</span></span><br><span class="line">        <span class="keyword">if</span> (insertElem &gt; maxHeap.get(parentPos)) &#123; <span class="comment">// 如果插入元素比父节点大，就把父节点的值拿下来放在当前位置，插入元素的位置继续上调</span></span><br><span class="line">            maxHeap.set(currentPos, maxHeap.get(parentPos)); <span class="comment">// 把父节点的值拿来下给当前位置</span></span><br><span class="line">            currentPos = parentPos; <span class="comment">// 把当前的位置改为父节点的位置</span></span><br><span class="line">            parentPos = currentPos / <span class="number">2</span>; <span class="comment">// 更新过后的当前位置改变了，父节点的位置也相应改变</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    maxHeap.set(currentPos, insertElem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="交换类排序"><a href="#交换类排序" class="headerlink" title="交换类排序"></a>交换类排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************交换类排序**********************/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    冒泡排序：最好O(n)，最坏O(n^2)，平均O(n^2)，空间复杂度O(1)</span></span><br><span class="line"><span class="comment">    快速排序：最好O(nlogn)，最坏O(n^2)，平均O(nlogn)，空间复杂度：O(logn)</span></span><br><span class="line"><span class="comment">        越无序效率越高，越有序效率越低，排序趟数和初始序列有关</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//冒泡排序：大的沉底，小的上升，每一轮必定可以将一个极大关键字沉底</span></span><br><span class="line"><span class="comment">//快速排序：先选择一个基准（哨兵值）然后分成两部分递归，如此往复</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> R 待排序数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] R)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> R.length;</span><br><span class="line">    <span class="type">boolean</span> swapped;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        swapped = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (R[j] &gt; R[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                swap(arr, j, j+<span class="number">1</span>)</span><br><span class="line">                swapped = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!swapped) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速排序：先选择一个基准（哨兵值）然后分成两部分递归，如此往复</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">QuickSort</span><span class="params">(<span class="type">int</span> R[], <span class="type">int</span> low, <span class="type">int</span> high)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> low, j = high, temp;</span><br><span class="line">    <span class="keyword">if</span>(low &lt; high)&#123;</span><br><span class="line">        temp = R[low]; <span class="comment">//哨兵值。如果倒着比较，应设为第一个值；如果顺着比较，应设为最后一个值</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line"><span class="comment">//先做j--的操作（这里可以先i后j吗？不行，会发生数据覆盖问题，哨兵值决定了操作顺序）</span></span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp; &amp;temp &lt; R[j]) --j;<span class="comment">//如果R[j]的值始终比哨兵值temp大的话，就不停地减减</span></span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)&#123;  <span class="comment">//直到遇到一个比temp小的R[j]，将R[j]的值赋给R[i]，i的位置前进一位</span></span><br><span class="line">                R[i] = R[j];</span><br><span class="line">                ++i;<span class="comment">//上一个位置的i被R[j]用了，所以这里要i+1，从新的位置开始</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//然后再做i++的操作</span></span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; temp &gt; R[i]) ++i;<span class="comment">//如果R[i]的值始终比哨兵值temp小的话，就不停地加加</span></span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)&#123;  <span class="comment">//直到遇到一个比temp大的R[i]，将R[i]的值赋给R[j]，j的位置减一位</span></span><br><span class="line">                R[j] = R[i];</span><br><span class="line">                --j;<span class="comment">//上一个j的位置被R[i]用了，j必须-1，从新的位置开始</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//一轮结束后，哨兵值temp左边的无序序列都比它小，右边的无序序列比它大</span></span><br><span class="line">        R[i] = temp;<span class="comment">//把temp插入原来的R[i]位置，完成一轮排序，之后二分迭代继续排序</span></span><br><span class="line">        QuickSort(R, low, i-<span class="number">1</span>);</span><br><span class="line">        QuickSort(R, i+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序的主方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> R     需要排序的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> low   当前排序部分的左边界</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> high  当前排序部分的右边界</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] R, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pivotIndex</span> <span class="operator">=</span> partition(R, low, high);</span><br><span class="line">        quickSort(R, low, pivotIndex - <span class="number">1</span>);</span><br><span class="line">        quickSort(R, pivotIndex + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数组分区，并返回分区点的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr   需要排序的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> low   当前分区部分的左边界</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> high  当前分区部分的右边界</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 分区点的索引</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[low];  <span class="comment">// 选择第一个元素作为枢轴</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> low, j = high;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; i &amp;&amp; arr[j] &gt;= pivot) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &gt; i) &#123;</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= pivot) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            arr[j] = arr[i];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i] = pivot;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并类排序"><a href="#归并类排序" class="headerlink" title="归并类排序"></a>归并类排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************归并类排序**********************/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    二路归并排序：最好/坏O(nlogn)，空间复杂度O(n)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主排序方法，递归地将数组分成两部分进行排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array 需要排序的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left  当前排序部分的左边界</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 当前排序部分的右边界</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(array, left, middle);</span><br><span class="line">        mergeSort(array, middle + <span class="number">1</span>, right);</span><br><span class="line">        merge(array, left, middle, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并两个已排序的子数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array 需要排序的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left  当前合并部分的左边界</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> middle 中间分隔点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 当前合并部分的右边界</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> left, <span class="type">int</span> middle, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">leftSize</span> <span class="operator">=</span> middle - left + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">rightSize</span> <span class="operator">=</span> right - middle;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] leftArray = <span class="keyword">new</span> <span class="title class_">int</span>[leftSize];</span><br><span class="line">    <span class="type">int</span>[] rightArray = <span class="keyword">new</span> <span class="title class_">int</span>[rightSize];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制数据到临时数组</span></span><br><span class="line">    System.arraycopy(array, left, leftArray, <span class="number">0</span>, leftSize);</span><br><span class="line">    System.arraycopy(array, middle + <span class="number">1</span>, rightArray, <span class="number">0</span>, rightSize);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>, k = left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并两个临时数组</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; leftSize &amp;&amp; j &lt; rightSize) &#123;</span><br><span class="line">        array[k++] = (leftArray[i] &lt;= rightArray[j]) ? leftArray[i++] : rightArray[j++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制剩余的元素</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; leftSize) &#123;</span><br><span class="line">        array[k++] = leftArray[i++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (j &lt; rightSize) &#123;</span><br><span class="line">        array[k++] = rightArray[j++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分布类排序"><a href="#分布类排序" class="headerlink" title="分布类排序"></a>分布类排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************分布类排序**********************/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    基数排序：O(d*(n+r))，空间复杂度：O(r)</span></span><br><span class="line"><span class="comment">            d：最大关键字位数，n：关键字个数，r：队列个数（即排序趟数）</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主函数，执行基数排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span>[] R)</span> &#123;</span><br><span class="line">    <span class="comment">// 找到数组中的最大数，确定最高位数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Arrays.stream(R).max().getAsInt();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从个位数开始排序，直到最高位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="number">1</span>; max / exp &gt; <span class="number">0</span>; exp *= <span class="number">10</span>) &#123;</span><br><span class="line">        countingSort(R, exp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于当前位数的计数排序</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countingSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> exp)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    <span class="type">int</span>[] output = <span class="keyword">new</span> <span class="title class_">int</span>[n]; <span class="comment">// 输出数组</span></span><br><span class="line">    <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>]; <span class="comment">// 计数数组，基数范围为 0-9</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计每个数位出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j : arr) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (j / exp) % <span class="number">10</span>;</span><br><span class="line">        count[index]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算累计和，调整 count 数组，使其存储排序后数字的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从后往前遍历原数组，按照当前位数将元素放入正确位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (arr[i] / exp) % <span class="number">10</span>;</span><br><span class="line">        output[count[index] - <span class="number">1</span>] = arr[i];</span><br><span class="line">        count[index]--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将排序好的数组复制回原数组</span></span><br><span class="line">    System.arraycopy(output, <span class="number">0</span>, arr, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binSearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> item)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (item &lt; arr[mid]) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>; <span class="comment">// 说明待查找元素在前半部分</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item &gt; arr[mid]) &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>; <span class="comment">// 说明待查找元素在后半部分</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">// arr[mid] == item</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 没查找到，说明序列中没有待查找关键字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="搜索算法"><a href="#搜索算法" class="headerlink" title="搜索算法"></a>搜索算法</h1><h2 id="广度优先搜索、深度优先搜索"><a href="#广度优先搜索、深度优先搜索" class="headerlink" title="广度优先搜索、深度优先搜索"></a>广度优先搜索、深度优先搜索</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 搜索算法_DFS_BFS &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N;  <span class="comment">// 节点数量</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; adjList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> 搜索算法_DFS_BFS(<span class="type">int</span> n) &#123;</span><br><span class="line">        N = n;</span><br><span class="line">        adjList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            adjList.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无向图</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> w)</span> &#123;</span><br><span class="line">        adjList.get(v).add(w);</span><br><span class="line">        adjList.get(w).add(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 广度优先搜索</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 开始遍历的节点值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BFS</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line">        LinkedList&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// // 将当前节点标记为已访问</span></span><br><span class="line">        visited[val] = <span class="literal">true</span>;</span><br><span class="line">        queue.add(val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            val = queue.poll();</span><br><span class="line">            System.out.print(val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">// 获取当前节点的所有邻居节点</span></span><br><span class="line">            List&lt;Integer&gt; neighbors = adjList.get(val);</span><br><span class="line">            <span class="keyword">for</span> (Integer n : neighbors) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!visited[n]) &#123;</span><br><span class="line">                    visited[n] = <span class="literal">true</span>;</span><br><span class="line">                    queue.add(n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 深度优先搜索</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 开始遍历的节点值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line">        DFSUtil(val, visited);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">DFSUtil</span><span class="params">(<span class="type">int</span> v, <span class="type">boolean</span>[] visited)</span> &#123;</span><br><span class="line">        <span class="comment">// 将当前节点标记为已访问</span></span><br><span class="line">        visited[v] = <span class="literal">true</span>;</span><br><span class="line">        System.out.print(v + <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; neighbors = adjList.get(v);</span><br><span class="line">        <span class="comment">// 访问 节点v 的所有子节点及其相邻节点，实现深度遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Integer w : neighbors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[w])</span><br><span class="line">                DFSUtil(w, visited);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        搜索算法<span class="type">_DFS_BFS</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> 搜索算法_DFS_BFS(<span class="number">14</span>);  <span class="comment">// 修改为足够大的节点数量</span></span><br><span class="line"></span><br><span class="line">        g.addEdge(<span class="number">10</span>, <span class="number">11</span>);</span><br><span class="line">        g.addEdge(<span class="number">10</span>, <span class="number">12</span>);</span><br><span class="line">        g.addEdge(<span class="number">11</span>, <span class="number">12</span>);</span><br><span class="line">        g.addEdge(<span class="number">12</span>, <span class="number">10</span>);</span><br><span class="line">        g.addEdge(<span class="number">12</span>, <span class="number">13</span>);</span><br><span class="line">        g.addEdge(<span class="number">13</span>, <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;深度优先搜索: &quot;</span>);</span><br><span class="line">        g.DFS(<span class="number">13</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;\n广度优先搜索: &quot;</span>);</span><br><span class="line">        g.BFS(<span class="number">11</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="—————-数据淘汰算法—————"><a href="#—————-数据淘汰算法—————" class="headerlink" title="—————-数据淘汰算法—————-"></a><div align="center">—————-数据淘汰算法—————-</div></h1><h2 id="LRU-算法（最近最少使用）"><a href="#LRU-算法（最近最少使用）" class="headerlink" title="LRU 算法（最近最少使用）"></a>LRU 算法（最近最少使用）</h2><p>设计一个数据结构，实现最近最少使用缓存。</p><p>通过哈希表和双向链表实现。哈希表提供 O(1) 的查找时间，双向链表维护访问顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接继承法，继承LinkedHashMap，只需要重写get和put、修改淘汰规则即可</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedHashMap&lt;K, V&gt; cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="built_in">this</span>.cache = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;K, V&gt;(capacity, <span class="number">0.75f</span>, <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> size() &gt; LRUCache.<span class="built_in">this</span>.capacity;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cache.getOrDefault(key, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        cache.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        cache.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cache.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动实现法，手动实现淘汰规则</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span>&lt;K, V&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, V&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            map.remove(key);</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">if</span> (map.size() &gt; capacity) &#123;</span><br><span class="line">            map.remove(map.entrySet().iterator().next().getKey());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> map.remove(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LRUCache</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LRUCache</span>(<span class="number">5</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="number">44</span>);</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">11</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="number">22</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="number">33</span>);</span><br><span class="line">        map.put(<span class="number">7</span>, <span class="number">77</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="number">55</span>);</span><br><span class="line">        map.put(<span class="number">8</span>, <span class="number">88</span>);</span><br><span class="line">        map.put(<span class="number">6</span>, <span class="number">66</span>);</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">111</span>);</span><br><span class="line">        map.put(<span class="number">6</span>, <span class="number">666</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接实例化法，实例化时重写淘汰规则</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; LRUmap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;Integer, Integer&gt;(<span class="number">10</span>, <span class="number">0.75f</span>, <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry eldest)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> size() &gt; <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LFU-算法（频率最少使用）"><a href="#LFU-算法（频率最少使用）" class="headerlink" title="LFU 算法（频率最少使用）"></a>LFU 算法（频率最少使用）</h2><p>设计一个数据结构，实现最不经常使用缓存。</p><p>LFU 缓存需要同时记录使用频率和访问时间，通过哈希表和最小堆实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LFUCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, Node&gt; cache;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TreeMap&lt;Integer, LinkedList&lt;Node&gt;&gt; freqMap;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">minFreq</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> key, value, freq;</span><br><span class="line">        Node(<span class="type">int</span> key, <span class="type">int</span> value) &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.freq = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LFUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (capacity &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Capacity must be positive.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        freqMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!cache.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">        updateFreq(node);</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cache.containsKey(key)) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">            node.value = value;</span><br><span class="line">            updateFreq(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key, value);</span><br><span class="line">            <span class="keyword">if</span> (cache.size() &gt;= capacity) &#123;</span><br><span class="line">                <span class="comment">// 删除最不常用的数据</span></span><br><span class="line">                LinkedList&lt;Node&gt; minList = freqMap.get(minFreq);</span><br><span class="line">                <span class="type">Node</span> <span class="variable">removeNode</span> <span class="operator">=</span> minList.pollFirst();</span><br><span class="line">                cache.remove(removeNode.key);</span><br><span class="line">                <span class="keyword">if</span> (minList.isEmpty()) &#123;</span><br><span class="line">                    freqMap.remove(minFreq);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cache.put(key, node);</span><br><span class="line">            freqMap.computeIfAbsent(<span class="number">1</span>, k -&gt; <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;()).addLast(node);</span><br><span class="line">            node.freq = <span class="number">1</span>;</span><br><span class="line">            minFreq = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateFreq</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oldFreq</span> <span class="operator">=</span> node.freq;</span><br><span class="line">        LinkedList&lt;Node&gt; oldList = freqMap.get(oldFreq);</span><br><span class="line">        oldList.remove(node);</span><br><span class="line">        <span class="keyword">if</span> (oldList.isEmpty()) &#123;</span><br><span class="line">            freqMap.remove(oldFreq);</span><br><span class="line">            <span class="keyword">if</span> (minFreq == oldFreq) &#123;</span><br><span class="line">                minFreq = freqMap.firstKey();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        node.freq++;</span><br><span class="line">        freqMap.computeIfAbsent(node.freq, k -&gt; <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;()).addLast(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="—————-多线程并发题—————"><a href="#—————-多线程并发题—————" class="headerlink" title="—————-多线程并发题—————-"></a><div align="center">—————-多线程并发题—————-</div></h1><h2 id="多线程交替打印数字"><a href="#多线程交替打印数字" class="headerlink" title="多线程交替打印数字"></a>多线程交替打印数字</h2><p>两个线程交替打印数字，一个线程打印奇数，另一个线程打印偶数，直到100。</p><p><strong>使用synchronized实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PrintOddEven</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printOdd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">while</span> (number &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (number % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        Thread.currentThread().interrupt();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line">                    lock.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printEven</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">while</span> (number &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (number % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        Thread.currentThread().interrupt();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line">                    lock.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PrintOddEven</span> <span class="variable">poe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintOddEven</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(poe::printOdd, <span class="string">&quot;Odd&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(poe::printEven, <span class="string">&quot;Even&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用ReentrantLock实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrintOddEvenLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printOdd</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (number % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    condition.await();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line">                    condition.signal();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printEven</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (number % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                    condition.await();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line">                    condition.signal();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PrintOddEvenLock</span> <span class="variable">poe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintOddEvenLock</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(poe::printOdd, <span class="string">&quot;Odd&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(poe::printEven, <span class="string">&quot;Even&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用Semaphore实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrintOddEvenSemaphore</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">oddSemaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">evenSemaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printOdd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                oddSemaphore.acquire();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + number);</span><br><span class="line">                number++;</span><br><span class="line">                evenSemaphore.release();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printEven</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                evenSemaphore.acquire();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + number);</span><br><span class="line">                number++;</span><br><span class="line">                oddSemaphore.release();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PrintOddEvenSemaphore</span> <span class="variable">poe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintOddEvenSemaphore</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(poe::printOdd, <span class="string">&quot;Odd&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(poe::printEven, <span class="string">&quot;Even&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多线程按顺序打印ABC"><a href="#多线程按顺序打印ABC" class="headerlink" title="多线程按顺序打印ABC"></a>多线程按顺序打印ABC</h2><p>三个线程按顺序打印ABC，重复10次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 线程交替打印字母_PrintABC &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">rounds</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">runNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">3</span> * rounds;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printA</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">            <span class="keyword">while</span> (runNum &lt; max) &#123;</span><br><span class="line">                <span class="keyword">if</span> (runNum % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + runNum + <span class="string">&quot;:A&quot;</span>);</span><br><span class="line">                    runNum++;</span><br><span class="line">                    object.notifyAll();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        object.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        Thread.currentThread().interrupt();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printB</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">            <span class="keyword">while</span> (runNum &lt; max) &#123;</span><br><span class="line">                <span class="keyword">if</span> (runNum % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + runNum + <span class="string">&quot;:B&quot;</span>);</span><br><span class="line">                    runNum++;</span><br><span class="line">                    object.notifyAll();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        object.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        Thread.currentThread().interrupt();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printC</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">            <span class="keyword">while</span> (runNum &lt; max) &#123;</span><br><span class="line">                <span class="keyword">if</span> (runNum % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + runNum + <span class="string">&quot;:C&quot;</span>);</span><br><span class="line">                    runNum++;</span><br><span class="line">                    object.notifyAll();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        object.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        Thread.currentThread().interrupt();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(线程交替打印字母_PrintABC::printA, <span class="string">&quot;线程A&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(线程交替打印字母_PrintABC::printB, <span class="string">&quot;线程B&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(线程交替打印字母_PrintABC::printC, <span class="string">&quot;线程C&quot;</span>);</span><br><span class="line">        threadA.start();</span><br><span class="line">        threadB.start();</span><br><span class="line">        threadC.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟死锁"><a href="#模拟死锁" class="headerlink" title="模拟死锁"></a>模拟死锁</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DeadLockDemo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">objectA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">objectB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyTask</span>(objectA, objectB), <span class="string">&quot;Thread 1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyTask</span>(objectB, objectA), <span class="string">&quot;Thread 2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Object firstResource;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Object secondResource;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyTask</span><span class="params">(Object objectA, Object objectB)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.firstResource = objectA;</span><br><span class="line">            <span class="built_in">this</span>.secondResource = objectB;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获取第一个资源&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (firstResource) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;已获取第一个资源&quot;</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获取第二个资源&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (secondResource) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;已获取第二个资源&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟消息队列"><a href="#模拟消息队列" class="headerlink" title="模拟消息队列"></a>模拟消息队列</h2><p>使用阻塞队列实现生产者消费者问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProducerConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(CAPACITY);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produce</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            queue.put(value);</span><br><span class="line">            System.out.println(<span class="string">&quot;Produced: &quot;</span> + value);</span><br><span class="line">            value++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consume</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> queue.take();</span><br><span class="line">            System.out.println(<span class="string">&quot;Consumed: &quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ProducerConsumer</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProducerConsumer</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pc.produce();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pc.consume();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        producer.start();</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h2><p>使用信号量解决哲学家进餐问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Philosopher</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Semaphore leftChopstick;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Semaphore rightChopstick;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> philosopherNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Philosopher</span><span class="params">(<span class="type">int</span> philosopherNumber, Semaphore leftChopstick, Semaphore rightChopstick)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.philosopherNumber = philosopherNumber;</span><br><span class="line">        <span class="built_in">this</span>.leftChopstick = leftChopstick;</span><br><span class="line">        <span class="built_in">this</span>.rightChopstick = rightChopstick;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                think();</span><br><span class="line">                pickUpChopsticks();</span><br><span class="line">                eat();</span><br><span class="line">                putDownChopsticks();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">think</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Philosopher &quot;</span> + philosopherNumber + <span class="string">&quot; is thinking.&quot;</span>);</span><br><span class="line">        Thread.sleep((<span class="type">long</span>) (Math.random() * <span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pickUpChopsticks</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        leftChopstick.acquire();</span><br><span class="line">        rightChopstick.acquire();</span><br><span class="line">        System.out.println(<span class="string">&quot;Philosopher &quot;</span> + philosopherNumber + <span class="string">&quot; picked up chopsticks.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Philosopher &quot;</span> + philosopherNumber + <span class="string">&quot; is eating.&quot;</span>);</span><br><span class="line">        Thread.sleep((<span class="type">long</span>) (Math.random() * <span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">putDownChopsticks</span><span class="params">()</span> &#123;</span><br><span class="line">        leftChopstick.release();</span><br><span class="line">        rightChopstick.release();</span><br><span class="line">        System.out.println(<span class="string">&quot;Philosopher &quot;</span> + philosopherNumber + <span class="string">&quot; put down chopsticks.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 哲学家进餐问题 <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numberOfPhilosophers</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        Semaphore[] chopsticks = <span class="keyword">new</span> <span class="title class_">Semaphore</span>[numberOfPhilosophers];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numberOfPhilosophers; i++) &#123;</span><br><span class="line">            chopsticks[i] = <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Thread[] philosophers = <span class="keyword">new</span> <span class="title class_">Thread</span>[numberOfPhilosophers];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numberOfPhilosophers; i++) &#123;</span><br><span class="line">            <span class="type">Semaphore</span> <span class="variable">leftChopstick</span> <span class="operator">=</span> chopsticks[i];</span><br><span class="line">            <span class="type">Semaphore</span> <span class="variable">rightChopstick</span> <span class="operator">=</span> chopsticks[(i + <span class="number">1</span>) % numberOfPhilosophers];</span><br><span class="line">            philosophers[i] = <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Philosopher</span>(i, leftChopstick, rightChopstick), <span class="string">&quot;Philosopher &quot;</span> + i);</span><br><span class="line">            philosophers[i].start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Wait for all philosophers to finish</span></span><br><span class="line">        <span class="keyword">for</span> (Thread philosopher : philosophers) &#123;</span><br><span class="line">            philosopher.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用CyclicBarrier实现多线程任务"><a href="#使用CyclicBarrier实现多线程任务" class="headerlink" title="使用CyclicBarrier实现多线程任务"></a>使用CyclicBarrier实现多线程任务</h2><p>使用CyclicBarrier实现多个线程分段执行任务，每个线程打印自己的任务完成后，等待其他线程到达，然后继续下一段任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CyclicBarrierExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THREAD_COUNT</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">CyclicBarrier</span> <span class="variable">barrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(THREAD_COUNT, () -&gt; System.out.println(<span class="string">&quot;All threads completed a phase.&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; THREAD_COUNT; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Task</span>(), <span class="string">&quot;Thread-&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; completed phase &quot;</span> + i);</span><br><span class="line">                    barrier.await();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用CountDownLatch实现任务协调"><a href="#使用CountDownLatch实现任务协调" class="headerlink" title="使用CountDownLatch实现任务协调"></a>使用CountDownLatch实现任务协调</h2><p>使用CountDownLatch等待多个线程完成任务后再继续主线程执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CountDownLatchExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THREAD_COUNT</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(THREAD_COUNT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; THREAD_COUNT; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Task</span>(), <span class="string">&quot;Thread-&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            latch.await();</span><br><span class="line">            System.out.println(<span class="string">&quot;All threads have finished. Main thread continues.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; is working.&quot;</span>);</span><br><span class="line">                Thread.sleep((<span class="type">long</span>) (Math.random() * <span class="number">1000</span>));</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; has finished.&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Exchanger实现线程间数据交换"><a href="#使用Exchanger实现线程间数据交换" class="headerlink" title="使用Exchanger实现线程间数据交换"></a>使用Exchanger实现线程间数据交换</h2><p>使用Exchanger实现两个线程交换数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Exchanger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExchangerExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> <span class="title class_">Exchanger</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Data from Thread A&quot;</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread A is exchanging: &quot;</span> + data);</span><br><span class="line">                <span class="type">String</span> <span class="variable">receivedData</span> <span class="operator">=</span> exchanger.exchange(data);</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread A received: &quot;</span> + receivedData);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;Thread A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Data from Thread B&quot;</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread B is exchanging: &quot;</span> + data);</span><br><span class="line">                <span class="type">String</span> <span class="variable">receivedData</span> <span class="operator">=</span> exchanger.exchange(data);</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread B received: &quot;</span> + receivedData);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;Thread B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拓展：实现和指定的线程交换数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ExchangerRegistry</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, Exchanger&lt;String&gt;&gt; exchangers = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Exchanger&lt;String&gt; <span class="title function_">getExchanger</span><span class="params">(String threadName, String targetThreadName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> generateKey(threadName, targetThreadName);</span><br><span class="line">        <span class="keyword">return</span> exchangers.computeIfAbsent(key, k -&gt; <span class="keyword">new</span> <span class="title class_">Exchanger</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">generateKey</span><span class="params">(String threadName, String targetThreadName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> threadName.compareTo(targetThreadName) &lt; <span class="number">0</span> ? threadName + <span class="string">&quot;-&quot;</span> + targetThreadName : targetThreadName + <span class="string">&quot;-&quot;</span> + threadName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExchangerExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; exchangeData(<span class="string">&quot;ThreadB&quot;</span>, <span class="string">&quot;Data-A&quot;</span>), <span class="string">&quot;ThreadA&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; exchangeData(<span class="string">&quot;ThreadA&quot;</span>, <span class="string">&quot;Data-B&quot;</span>), <span class="string">&quot;ThreadB&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; exchangeData(<span class="string">&quot;ThreadD&quot;</span>, <span class="string">&quot;Data-C&quot;</span>), <span class="string">&quot;ThreadC&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadD</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; exchangeData(<span class="string">&quot;ThreadC&quot;</span>, <span class="string">&quot;Data-D&quot;</span>), <span class="string">&quot;ThreadD&quot;</span>);</span><br><span class="line"></span><br><span class="line">        threadA.start();</span><br><span class="line">        threadB.start();</span><br><span class="line">        threadC.start();</span><br><span class="line">        threadD.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exchangeData</span><span class="params">(String targetThreadName, String dataToSend)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">threadName</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        Exchanger&lt;String&gt; exchanger = ExchangerRegistry.getExchanger(threadName, targetThreadName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(threadName + <span class="string">&quot; is exchanging: &quot;</span> + dataToSend);</span><br><span class="line">            <span class="type">String</span> <span class="variable">receivedData</span> <span class="operator">=</span> exchanger.exchange(dataToSend);</span><br><span class="line">            System.out.println(threadName + <span class="string">&quot; received: &quot;</span> + receivedData);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="——————数学相关——————"><a href="#——————数学相关——————" class="headerlink" title="——————数学相关——————"></a><div align="center">——————数学相关——————</div></h1><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p>在数组中找到两个数，使它们的和等于给定的数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">complement</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(complement)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;No two sum solution&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两数之和-II"><a href="#两数之和-II" class="headerlink" title="两数之和 II"></a>两数之和 II</h2><p>在一个排序列表中找到两个数，使它们的和等于给定的数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] numbers, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = numbers.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> numbers[left] + numbers[right];</span><br><span class="line">        <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; left + <span class="number">1</span>, right + <span class="number">1</span> &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;No two sum solution&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快乐数"><a href="#快乐数" class="headerlink" title="快乐数"></a>快乐数</h2><p>判断一个数是否为快乐数，即反复将每个位的数字平方求和，最终会得到1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    Set&lt;Integer&gt; seenNumbers = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">1</span> &amp;&amp; !seenNumbers.contains(n)) &#123;</span><br><span class="line">        seenNumbers.add(n);</span><br><span class="line">        n = getSumOfSquares(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getSumOfSquares</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">digit</span> <span class="operator">=</span> num % <span class="number">10</span>;</span><br><span class="line">        sum += digit * digit;</span><br><span class="line">        num /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h2><p>将罗马数字转换为整数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; roman = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    roman.put(<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    roman.put(<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">    roman.put(<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>);</span><br><span class="line">    roman.put(<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>);</span><br><span class="line">    roman.put(<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">    roman.put(<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>);</span><br><span class="line">    roman.put(<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> roman.get(s.charAt(i));</span><br><span class="line">        <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> (i + <span class="number">1</span> &lt; s.length()) ? roman.get(s.charAt(i + <span class="number">1</span>)) : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (current &lt; next) &#123;</span><br><span class="line">            sum -= current;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum += current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h2><p>给你一个32位的有符号的<code>int</code>类型的数字，将数字上的每一位进行反转。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reverseInt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">rev</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pop</span> <span class="operator">=</span> x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">        rev = rev * <span class="number">10</span> + pop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="————–滑动窗口、动归————–"><a href="#————–滑动窗口、动归————–" class="headerlink" title="————–滑动窗口、动归————–"></a><div align="center">————–滑动窗口、动归————–</div></h1><h2 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Arrays.binarySearch(dp, <span class="number">0</span>, len, num);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>) i = -(i + <span class="number">1</span>);</span><br><span class="line">        dp[i] = num;</span><br><span class="line">        <span class="keyword">if</span> (i == len) len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="能否组成顺子"><a href="#能否组成顺子" class="headerlink" title="能否组成顺子"></a>能否组成顺子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shunzi</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isShunzi</span><span class="params">(<span class="type">int</span>[] places)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (places == <span class="literal">null</span> || places.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(places);</span><br><span class="line">        <span class="type">int</span> <span class="variable">zeroCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : places) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                zeroCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算前后相邻的数字相隔的大小，需要多少个个0去补</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">gapCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> zeroCount; i &lt; places.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (places[i] == places[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 有重复的非零数字，不能成为顺子</span></span><br><span class="line">            &#125;</span><br><span class="line">            gapCount += places[i + <span class="number">1</span>] - places[i] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gapCount &lt;= zeroCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 测试用例</span></span><br><span class="line">        <span class="type">int</span>[] test1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; <span class="comment">// 顺子</span></span><br><span class="line">        <span class="type">int</span>[] test2 = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; <span class="comment">// 顺子</span></span><br><span class="line">        <span class="type">int</span>[] test3 = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; <span class="comment">// 顺子</span></span><br><span class="line">        <span class="type">int</span>[] test4 = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;; <span class="comment">// 顺子</span></span><br><span class="line">        <span class="type">int</span>[] test5 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;; <span class="comment">// 不是顺子</span></span><br><span class="line">        <span class="type">int</span>[] test6 = &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;; <span class="comment">// 是顺子</span></span><br><span class="line">        <span class="type">int</span>[] test7 = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;  <span class="comment">// 不是顺子</span></span><br><span class="line"></span><br><span class="line">        System.out.println(isShunzi(test1)); <span class="comment">// 输出 true</span></span><br><span class="line">        System.out.println(isShunzi(test2)); <span class="comment">// 输出 true</span></span><br><span class="line">        System.out.println(isShunzi(test3)); <span class="comment">// 输出 true</span></span><br><span class="line">        System.out.println(isShunzi(test4)); <span class="comment">// 输出 true</span></span><br><span class="line">        System.out.println(isShunzi(test5)); <span class="comment">// 输出 false</span></span><br><span class="line">        System.out.println(isShunzi(test6)); <span class="comment">// 输出 true</span></span><br><span class="line">        System.out.println(isShunzi(test7)); <span class="comment">// 输出 false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h2><p>找到字符串数组中的最长公共前缀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解法一：startsWith匹配</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getLongestPrefix</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (strs == <span class="literal">null</span> || strs.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> strs[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!str.startsWith(prefix)) &#123;</span><br><span class="line">            prefix = prefix.substring(<span class="number">0</span>, prefix.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prefix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解法二：indexOf匹配</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getLongestPrefix2</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (strs.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> strs[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (strs[i].indexOf(prefix) != <span class="number">0</span>) &#123;</span><br><span class="line">            prefix = prefix.substring(<span class="number">0</span>, prefix.length() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (prefix.isEmpty()) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prefix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长递增子串的长度"><a href="#最长递增子串的长度" class="headerlink" title="最长递增子串的长度"></a>最长递增子串的长度</h2><blockquote><p>递增子串：每个<strong>相邻</strong>的数字之差为1，例如”1,2,3,4,5”</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lengthOfCSQ</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">1</span>, cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == nums[i - <span class="number">1</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">            cur++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            max = Math.max(max, cur);</span><br><span class="line">            cur = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    max = Math.max(max, cur);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长递增子序列的长度"><a href="#最长递增子序列的长度" class="headerlink" title="最长递增子序列的长度"></a>最长递增子序列的长度</h2><blockquote><p>递增子序列：不考虑前后数字是否相邻，只要是递增的就行，例如”1,…,4,9,…,10,…,17”</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfNCSQ</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max = Math.max(max, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大子数组和"><a href="#最大子数组和" class="headerlink" title="最大子数组和"></a>最大子数组和</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MaxSubArray</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            nums[i] = nums[i] + Math.max(<span class="number">0</span>, nums[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;动规结果：&quot;</span> + Arrays.toString(nums));</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(nums).max().getAsInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxSubArray2</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="number">0</span>, res = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            pre = Math.max(pre + num, num);</span><br><span class="line">            res = Math.max(pre, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;-<span class="number">2</span>, <span class="number">1</span>, -<span class="number">3</span>, <span class="number">4</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, -<span class="number">5</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(maxSubArray2(nums));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大连续子数组和"><a href="#最大连续子数组和" class="headerlink" title="最大连续子数组和"></a>最大连续子数组和</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MaxContinuousSubArray</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> nums[<span class="number">0</span>], max = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            cur = Math.max(nums[i], cur + nums[i]);</span><br><span class="line">            max = Math.max(max, cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;-<span class="number">2</span>, <span class="number">1</span>, -<span class="number">3</span>, <span class="number">4</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, -<span class="number">5</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(maxSubArray(nums)); <span class="comment">// 输出: 6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="旋转数组"><a href="#旋转数组" class="headerlink" title="旋转数组"></a>旋转数组</h2><p>给定一个数组，将数组中的元素向右移动 k 个位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    k %= nums.length;</span><br><span class="line">    reverse(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    reverse(nums, <span class="number">0</span>, k - <span class="number">1</span>);</span><br><span class="line">    reverse(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[start];</span><br><span class="line">        nums[start] = nums[end];</span><br><span class="line">        nums[end] = temp;</span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="搜索旋转排序数组"><a href="#搜索旋转排序数组" class="headerlink" title="搜索旋转排序数组"></a>搜索旋转排序数组</h2><p>在旋转排序数组中查找一个特定的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt; nums[mid]) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="是否是回文数"><a href="#是否是回文数" class="headerlink" title="是否是回文数"></a>是否是回文数</h2><p>判断一个整数是否是回文数，即正读和反读都一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">revertedNumber</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x &gt; revertedNumber) &#123;</span><br><span class="line">        revertedNumber = revertedNumber * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x == revertedNumber || x == revertedNumber / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回文串判断"><a href="#回文串判断" class="headerlink" title="回文串判断"></a>回文串判断</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getString</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Character.isLetterOrDigit(c)) &#123;</span><br><span class="line">            sb.append(Character.toLowerCase(c));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    retrun sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 去除空格和非字母数字字符，并转换为小写</span></span><br><span class="line">    str = getString(str);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用双指针法进行比较</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> str.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str.charAt(left) != str.charAt(right)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长回文子串-5-最长回文子串-力扣（LeetCode）"><a href="#最长回文子串-5-最长回文子串-力扣（LeetCode）" class="headerlink" title="[最长回文子串](5. 最长回文子串 - 力扣（LeetCode）)"></a>[最长回文子串](<a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串 - 力扣（LeetCode）</a>)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span> || s.isEmpty()) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> expandAroundCenter(s, i, i);</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> expandAroundCenter(s, i, i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Math.max(len1, len2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 截取回文子序列</span></span><br><span class="line">        <span class="keyword">if</span> (end - start &lt; len) &#123;</span><br><span class="line">            start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            end = i + len / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">expandAroundCenter</span><span class="params">(String s, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left) == s.charAt(right)) &#123;</span><br><span class="line">        left--;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right - left - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长回文子串的长度"><a href="#最长回文子串的长度" class="headerlink" title="最长回文子串的长度"></a>最长回文子串的长度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">longestPalindromeLength</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span> || s.isEmpty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> expandAroundCenter(s, i, i);</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> expandAroundCenter(s, i, i + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        max = Math.max(max, Math.max(len1, len2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">expandAroundCenter</span><span class="params">(String s, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left) == s.charAt(right)) &#123;</span><br><span class="line">        left--;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right - left - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长回文子序列的长度"><a href="#最长回文子序列的长度" class="headerlink" title="最长回文子序列的长度"></a><em>最长回文子序列的长度</em></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">longestPalindromeSubseqLength</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span> || s.isEmpty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化对角线上的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 填充 dp 数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">2</span>; len &lt;= n; len++) &#123; <span class="comment">// 子序列长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n - len; i++) &#123; <span class="comment">// 起始索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + len - <span class="number">1</span>; <span class="comment">// 结束索引</span></span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == s.charAt(j)) &#123;</span><br><span class="line">                dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">无重复字符的最长子串</a></h2><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length() == <span class="number">0</span> || s == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    Set&lt;Character&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.length()) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(right);</span><br><span class="line">        <span class="keyword">if</span> (!set.contains(ch)) &#123;</span><br><span class="line">            set.add(ch);</span><br><span class="line">            right++;</span><br><span class="line">            max = Math.max(max, right - left);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            set.remove(s.charAt(left));</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="寻找两个正序数组的中位数（暴力版）"><a href="#寻找两个正序数组的中位数（暴力版）" class="headerlink" title="寻找两个正序数组的中位数（暴力版）"></a><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">寻找两个正序数组的中位数（暴力版）</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span>[] arr = IntStream.concat(Arrays.stream(nums1), Arrays.stream(nums2)).toArray();</span><br><span class="line">    </span><br><span class="line">    Arrays.sort(arr);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (arr.length % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>) (arr[arr.length / <span class="number">2</span>] + arr[arr.length / <span class="number">2</span> - <span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[arr.length / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java, all in one！</summary>
    
    
    
    <category term="学习" scheme="https://01petard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://01petard.github.io/tags/Java/"/>
    
    <category term="算法" scheme="https://01petard.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>My Java Guide - 项目</title>
    <link href="https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20%E9%A1%B9%E7%9B%AE/"/>
    <id>https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20%E9%A1%B9%E7%9B%AE/</id>
    <published>2024-10-14T16:23:00.000Z</published>
    <updated>2024-10-14T16:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="———–阶梯式阅读2-0-积分模块———–"><a href="#———–阶梯式阅读2-0-积分模块———–" class="headerlink" title="———–阶梯式阅读2.0 积分模块———–"></a><div align="center">———–阶梯式阅读2.0 积分模块———–</div></h1><h1 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h1><h2 id="扫码登录设计原理"><a href="#扫码登录设计原理" class="headerlink" title="扫码登录设计原理?"></a>扫码登录设计原理?</h2><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409241739150.png" alt="image-20240924173953948" style="zoom: 60%;" /><h2 id="在积分模块的设计中是否使用了设计模式？如果有，请具体说明。"><a href="#在积分模块的设计中是否使用了设计模式？如果有，请具体说明。" class="headerlink" title="在积分模块的设计中是否使用了设计模式？如果有，请具体说明。"></a>在积分模块的设计中是否使用了设计模式？如果有，请具体说明。</h2><h2 id="你是如何设计积分模块的数据模型的？请分享一下你的设计思路。"><a href="#你是如何设计积分模块的数据模型的？请分享一下你的设计思路。" class="headerlink" title="你是如何设计积分模块的数据模型的？请分享一下你的设计思路。"></a>你是如何设计积分模块的数据模型的？请分享一下你的设计思路。</h2><h2 id="在实现积分规则判断时，你是如何设计规则引擎的？如果后期需要新增或修改规则，该如何实现？"><a href="#在实现积分规则判断时，你是如何设计规则引擎的？如果后期需要新增或修改规则，该如何实现？" class="headerlink" title="在实现积分规则判断时，你是如何设计规则引擎的？如果后期需要新增或修改规则，该如何实现？"></a>在实现积分规则判断时，你是如何设计规则引擎的？如果后期需要新增或修改规则，该如何实现？</h2><p><strong>回答：</strong><br>为了使积分规则的定义和修改更加灵活，我设计了一个基于策略模式的规则引擎。具体而言，每个积分规则被封装成一个独立的策略类，继承统一的接口或抽象类，并实现具体的规则逻辑。在系统初始化时，将这些规则策略类注册到规则引擎中。这样，在执行积分结算时，可以根据用户的行为动态选择并应用相应的规则策略。如果后期需要新增或修改规则，只需添加或修改相应的策略类，无需对现有代码进行大规模改动。</p><p>此外，如果系统对规则的复杂性要求更高，我会考虑引入Drools等第三方规则引擎，以实现更复杂的条件判断和规则配置，提升系统的灵活性和可扩展性。</p><h2 id="你提到在项目中使用了异步消息队列，为什么选择这种方式？如何保证消息的可靠传递？"><a href="#你提到在项目中使用了异步消息队列，为什么选择这种方式？如何保证消息的可靠传递？" class="headerlink" title="你提到在项目中使用了异步消息队列，为什么选择这种方式？如何保证消息的可靠传递？"></a>你提到在项目中使用了异步消息队列，为什么选择这种方式？如何保证消息的可靠传递？</h2><p><strong>回答：</strong><br>使用异步消息队列的主要原因是为了解耦系统的各个模块，提升系统的并发处理能力。积分结算往往是一个耗时的操作，如果同步执行，会影响用户的实时响应体验。通过消息队列，将积分结算操作放到后台异步处理，不仅减少了前端的响应时间，还能有效地平衡系统负载。</p><p>为了保证消息的可靠传递，我在实现中引入了消息持久化和重试机制。消息一旦进入队列，将立即持久化到存储中，以防止因系统故障导致消息丢失。同时，消费端在处理消息时，如果遇到异常情况，会将消息重新放回队列并触发重试机制，直到消息成功处理为止。此外，还可以利用死信队列（DLQ）来处理那些多次重试仍失败的消息，防止消息堆积。</p><h1 id="业务实现"><a href="#业务实现" class="headerlink" title="业务实现"></a>业务实现</h1><h2 id="在积分结算过程中，你是如何保证数据的一致性和准确性的？"><a href="#在积分结算过程中，你是如何保证数据的一致性和准确性的？" class="headerlink" title="在积分结算过程中，你是如何保证数据的一致性和准确性的？"></a>在积分结算过程中，你是如何保证数据的一致性和准确性的？</h2><p><strong>回答：</strong><br>为确保积分结算的准确性，我采用了乐观锁和事务管理机制。每次积分结算操作都会检查当前数据是否被其他操作修改过，如果发生冲突，系统会自动重试。此外，我将积分结算逻辑封装在事务中，确保在积分计算、数据库更新和通知用户等操作中，任意一步出现问题时，整个操作可以回滚，从而保证数据的一致性。同时，在实际操作中，我还使用了异步消息队列处理一些耗时较长的任务，以提高系统的整体响应速度。</p><h2 id="积分模块在高并发场景下如何保证数据一致性？例如，当多个用户同时提交相同的行为时（如提交同一次的积分答题），如何防止积分重复计算？"><a href="#积分模块在高并发场景下如何保证数据一致性？例如，当多个用户同时提交相同的行为时（如提交同一次的积分答题），如何防止积分重复计算？" class="headerlink" title="积分模块在高并发场景下如何保证数据一致性？例如，当多个用户同时提交相同的行为时（如提交同一次的积分答题），如何防止积分重复计算？"></a>积分模块在高并发场景下如何保证数据一致性？例如，当多个用户同时提交相同的行为时（如提交同一次的积分答题），如何防止积分重复计算？</h2><ol><li><strong>HTTP方法幂等性</strong>：<ul><li>GET请求：GET请求应当是幂等的，这意味着无论调用多少次，返回的结果应该是相同的，并且不应该改变资源的状态。</li><li>PUT请求：PUT请求也应当是幂等的，它用于更新资源的状态，但是同样的请求多次发送应该只产生一次效果。</li><li>DELETE请求：DELETE请求同样要求幂等性，删除资源的请求不应该因为多次发送而产生多次删除的效果。</li></ul></li><li><strong>唯一标识符</strong>： 给每个请求分配一个唯一的标识符（如UUID），并在请求中携带此标识符。在接收方，根据标识符检查请求是否已经处理过，如果已经处理则直接返回之前的结果。</li><li><strong>状态码和响应头</strong>： 在HTTP响应中使用状态码来表示操作的结果，并且在需要时使用响应头来传递附加信息。例如，使用200 OK来表示成功，使用204 No Content来表示没有内容的幂等操作。</li><li><strong>数据库约束</strong>：<ul><li>使用唯一键约束（UNIQUE约束）来确保数据的唯一性，这样即使尝试多次插入相同的数据也不会成功。</li><li>利用外键约束（FOREIGN KEY约束）来保证数据的一致性。</li></ul></li><li><strong>事务和分布式事务</strong>：<ul><li>利用数据库事务来确保一组操作要么全部成功，要么全部失败。</li><li>对于跨服务的操作，可以使用分布式事务协议（如两阶段提交2PC、三阶段提交3PC）来确保操作的一致性。</li></ul></li><li><strong>使用消息队列的幂等性处理</strong>：<ul><li>在消息队列中实现幂等性处理逻辑，确保消息被正确消费并且不会因为重复消费而导致数据错误。</li><li>可以利用消息队列提供的特性（如幂等生产者）来帮助实现幂等性。</li></ul></li></ol><h2 id="如何设计权限控制系统，确保只有授权用户才能查看或修改积分数据？"><a href="#如何设计权限控制系统，确保只有授权用户才能查看或修改积分数据？" class="headerlink" title="如何设计权限控制系统，确保只有授权用户才能查看或修改积分数据？"></a>如何设计权限控制系统，确保只有授权用户才能查看或修改积分数据？</h2><p><strong>访问控制模型</strong></p><ul><li><p><strong>基于角色的访问控制（Role-Based Access Control）</strong>：通过为用户分配不同的角色来实现权限管理的。角色代表了一组权限的集合，用户通过被赋予特定的角色来获得相应的访问权限。</p></li><li><p><strong>基于属性的访问控制（Attribute-Based Access Control）</strong>：根据主体（用户）和客体（资源）的属性来决定访问权限的。属性可以包括用户的身份信息、时间、地点、设备状态等，甚至可以是环境条件或业务逻辑中的任意属性。</p><blockquote><p>RBAC和ABAC的区别在于：</p><ul><li><strong>RBAC</strong>：权限分配基于角色，用户通过角色来获取权限。角色通常是静态定义的，与企业的组织结构或工作职责相关联。</li><li><strong>ABAC</strong>：权限分配基于属性，通过评估一系列属性来决定访问权限。这种方式更为灵活，可以适应复杂的访问控制需求，但同时也可能带来更高的管理复杂度。</li></ul></blockquote></li></ul><p><strong>权限审计</strong>：记录权限分配的历史，便于审核和追踪。</p><p><strong>接口安全</strong>：使用token鉴权来验证请求的合法性。</p><h2 id="在积分模块与其他模块集成时，如何保证数据的一致性和完整性？"><a href="#在积分模块与其他模块集成时，如何保证数据的一致性和完整性？" class="headerlink" title="在积分模块与其他模块集成时，如何保证数据的一致性和完整性？"></a>在积分模块与其他模块集成时，如何保证数据的一致性和完整性？</h2><p><strong>1. 事务处理</strong></p><p><strong>本地事务</strong>：</p><p>对于单一数据库操作，确保每个操作都在一个事务中完成，以保证原子性、一致性、隔离性和持久性（ACID）。</p><p><strong>分布式事务</strong>：</p><p>对于跨数据库或服务的操作，可以使用以下几种分布式事务解决方案：</p><ul><li><strong>两阶段提交（2PC）</strong>：协调者协调参与者（如数据库）完成事务，分为准备阶段和提交阶段。</li><li><strong>三阶段提交（3PC）</strong>：在两阶段提交的基础上增加了预提交阶段，减少了阻塞时间。</li><li><strong>TCC（Try-Confirm-Cancel）</strong>：预先预留资源，确认后提交，取消则回滚。</li><li><strong>SAGA</strong>：长事务模式，通过一系列短事务来实现长事务的效果，每个短事务都是可补偿的。</li></ul><p><strong>2. 幂等性处理</strong></p><p><strong>2.1 请求幂等性</strong></p><p>?确保同一个请求多次执行的结果相同，不会重复执行某些操作，如：</p><ul><li><strong>唯一标识</strong>：为每个请求分配一个唯一的标识符（如订单号），在处理请求时先检查该标识符是否存在。</li><li><strong>状态码</strong>：使用 HTTP 状态码来表示请求的幂等性，如 <code>201 Created</code> 表示资源已被创建，后续请求可以直接返回 <code>200 OK</code> 而不需要再次创建。</li></ul><p><strong>2.2 消息幂等性</strong></p><p>在消息队列中，确保消息被多次消费时不会重复处理：</p><ul><li><strong>消息去重</strong>：在消费端记录已处理的消息标识符，避免重复处理。</li><li><strong>消息确认机制</strong>：确保消息在处理完成后才确认接收，否则重新投递。</li></ul><p><strong>3. 异步处理与补偿机制</strong></p><p><strong>3.1 异步处理</strong></p><p>使用消息队列（如 RabbitMQ、Kafka）来异步处理积分模块与其他模块之间的交互，可以提高系统的吞吐量和响应速度。</p><p><strong>3.2 补偿机制</strong></p><p>对于无法保证一致性的操作，设计补偿机制来处理异常情况：</p><ul><li><strong>补偿事务</strong>：在 SAGA 模式中，每个短事务都有对应的补偿操作。</li><li><strong>重试机制</strong>：对于可重试的操作，设置重试策略，并记录重试次数和状态。</li><li><strong>死信队列</strong>：对于无法处理的消息，可以发送到死信队列中，后续手动处理或重试。</li></ul><p><strong>4. 数据校验与对账</strong></p><p><strong>4.1 数据校验</strong></p><p>在操作前后进行数据校验，确保数据的一致性：</p><ul><li><strong>预检查</strong>：在执行操作前先进行预检查，如检查账户余额是否足够。</li><li><strong>后验证</strong>：操作完成后再次验证数据状态，如检查积分是否正确更新。</li></ul><p><strong>4.2 对账机制</strong></p><p>定期对账，确保各个模块之间的数据一致性：</p><ul><li><strong>定期对账</strong>：设置固定的对账周期，如每日对账。</li><li><strong>差异处理</strong>：对账发现差异时，记录差异详情，并进行手动或自动处理。</li></ul><p><strong>5. 事件驱动架构</strong></p><p><strong>5.1 事件发布与订阅</strong></p><p>采用事件驱动架构，通过发布和订阅机制来实现模块间的解耦：</p><ul><li><strong>事件发布</strong>：当积分模块发生变动时，发布事件。</li><li><strong>事件订阅</strong>：其他模块订阅相关事件，并根据事件内容进行相应处理。</li></ul><p>假设你有一个积分模块，需要在用户下单时扣减积分，并通知库存模块扣减库存。以下是一个使用 Spring Boot 和 Spring Data JPA 实现的简单示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PointsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PointsRepository pointsRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductPoints</span><span class="params">(Long userId, Integer points)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 查询用户积分</span></span><br><span class="line">        <span class="type">Points</span> <span class="variable">pointsEntity</span> <span class="operator">=</span> pointsRepository.findByUserId(userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 扣减积分</span></span><br><span class="line">        <span class="keyword">if</span> (pointsEntity.getPoints() &gt;= points) &#123;</span><br><span class="line">            pointsEntity.setPoints(pointsEntity.getPoints() - points);</span><br><span class="line">            pointsRepository.save(pointsEntity);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 发布事件通知库存模块扣减库存</span></span><br><span class="line">            publishInventoryDeductionEvent(userId, points);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsufficientPointsException</span>(<span class="string">&quot;Insufficient points.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">publishInventoryDeductionEvent</span><span class="params">(Long userId, Integer points)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用消息队列发布事件</span></span><br><span class="line">        <span class="type">InventoryDeductionEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InventoryDeductionEvent</span>(userId, points);</span><br><span class="line">        <span class="comment">// 假设使用 Spring 的 ApplicationEventPublisher</span></span><br><span class="line">        applicationEventPublisher.publishEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>deductPoints</code> 方法是一个事务性的方法，确保扣减积分的操作在一个事务中完成。如果积分足够，则扣减积分并发布一个 <code>InventoryDeductionEvent</code> 事件，通知库存模块扣减库存。如果积分不足，则抛出异常。</p><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><h2 id="你在设计积分模块时是否考虑过性能优化？如果是，采取了哪些措施？"><a href="#你在设计积分模块时是否考虑过性能优化？如果是，采取了哪些措施？" class="headerlink" title="你在设计积分模块时是否考虑过性能优化？如果是，采取了哪些措施？"></a>你在设计积分模块时是否考虑过性能优化？如果是，采取了哪些措施？</h2><h2 id="项目中涉及到了排行榜，在设计这个功能时，你是如何优化性能和体验的？有没有使用缓存或者其他技术手段？"><a href="#项目中涉及到了排行榜，在设计这个功能时，你是如何优化性能和体验的？有没有使用缓存或者其他技术手段？" class="headerlink" title="项目中涉及到了排行榜，在设计这个功能时，你是如何优化性能和体验的？有没有使用缓存或者其他技术手段？"></a>项目中涉及到了排行榜，在设计这个功能时，你是如何优化性能和体验的？有没有使用缓存或者其他技术手段？</h2><p><strong>回答：</strong><br>在设计积分排行榜功能时，我使用了Redis作为缓存来提高性能和用户体验。由于排行榜数据通常是高频访问的数据，直接从数据库中查询会导致性能瓶颈。因此，我将排行榜的热点数据缓存到Redis中，并设置适当的过期时间，以便定期更新和刷新数据。此外，Redis的有序集合（Sorted Set）数据结构非常适合用于存储和操作排行榜数据，可以高效地进行排名计算和排序。</p><p>在用户访问排行榜时，系统会首先从Redis中读取数据。如果缓存命中，则直接返回；如果缓存未命中，则从数据库中查询并更新缓存。通过这种方式，我们既保证了数据的实时性，又大幅提高了系统的响应速度和用户体验。</p><h2 id="如果未来用户基数增长迅速，积分模块需要做哪些改进来保证可扩展性？"><a href="#如果未来用户基数增长迅速，积分模块需要做哪些改进来保证可扩展性？" class="headerlink" title="如果未来用户基数增长迅速，积分模块需要做哪些改进来保证可扩展性？"></a>如果未来用户基数增长迅速，积分模块需要做哪些改进来保证可扩展性？</h2><p>TODO</p><h2 id="如何确保在高并发情况下积分系统的稳定性和准确性？"><a href="#如何确保在高并发情况下积分系统的稳定性和准确性？" class="headerlink" title="如何确保在高并发情况下积分系统的稳定性和准确性？"></a>如何确保在高并发情况下积分系统的稳定性和准确性？</h2><ol><li><strong>积分操作使用使用事务处理</strong></li><li><strong>用户积分操作时使用乐观锁</strong></li><li>积分日志操作可以使用队列系统</li><li>积分日志表使用索引优化，加快查询</li></ol><h2 id="你是如何评估积分模块的性能瓶颈的？使用了哪些工具和技术？"><a href="#你是如何评估积分模块的性能瓶颈的？使用了哪些工具和技术？" class="headerlink" title="你是如何评估积分模块的性能瓶颈的？使用了哪些工具和技术？"></a>你是如何评估积分模块的性能瓶颈的？使用了哪些工具和技术？</h2><ol><li><strong>应用性能监控（APM）工具</strong>： 使用APM工具（如New Relic, Dynatrace, Pinpoint等）来实时监控应用程序的性能，收集有关请求处理时间、CPU使用率、内存消耗等信息。</li><li><strong>日志分析</strong>： 分析应用日志和系统日志，查找可能导致性能问题的异常或警告信息。</li><li><strong>数据库性能监控</strong>： 使用专门的数据库性能监控工具（如MySQL Performance Schema, PostgreSQL的pgAdmin等）来监控数据库的性能，特别是慢查询分析。</li><li><strong>系统监控工具</strong>： 使用系统监控工具（如Nagios, Zabbix等）来监控服务器的硬件资源使用情况，如CPU、内存、磁盘IO、网络带宽等。</li></ol><h1 id="与线程池的联动"><a href="#与线程池的联动" class="headerlink" title="与线程池的联动"></a>与线程池的联动</h1><h2 id="积分结算时是否有并发场景？如果有，你是如何处理的？"><a href="#积分结算时是否有并发场景？如果有，你是如何处理的？" class="headerlink" title="积分结算时是否有并发场景？如果有，你是如何处理的？"></a>积分结算时是否有并发场景？如果有，你是如何处理的？</h2><h2 id="在积分结算的高并发场景中，你是如何处理分布式事务的？有没有考虑过CAP理论对你设计的影响？"><a href="#在积分结算的高并发场景中，你是如何处理分布式事务的？有没有考虑过CAP理论对你设计的影响？" class="headerlink" title="在积分结算的高并发场景中，你是如何处理分布式事务的？有没有考虑过CAP理论对你设计的影响？"></a>在积分结算的高并发场景中，你是如何处理分布式事务的？有没有考虑过CAP理论对你设计的影响？</h2><p><strong>回答：</strong><br>在高并发场景下，分布式事务是一个挑战。为了处理这个问题，我采用了基于事件驱动的最终一致性策略，而不是传统的分布式锁或两阶段提交。具体做法是，将积分结算的操作封装成事件，通过消息队列进行异步处理。这样做的好处是避免了分布式锁带来的性能瓶颈，同时通过幂等性设计和补偿机制，确保数据最终一致性。</p><p>关于CAP理论，在积分结算场景中，我们优先考虑的是AP（可用性和分区容错性），因为系统的高可用性对用户体验至关重要。我们通过消息队列和异步处理确保系统在网络分区的情况下仍能保持高可用性，而一致性则通过幂等操作和重试机制在系统恢复后最终达成。</p><h2 id="你在项目中使用了动态线程池的Java组件，这与阅读积分模块有什么关联吗？能否具体说明一下如何结合的？"><a href="#你在项目中使用了动态线程池的Java组件，这与阅读积分模块有什么关联吗？能否具体说明一下如何结合的？" class="headerlink" title="你在项目中使用了动态线程池的Java组件，这与阅读积分模块有什么关联吗？能否具体说明一下如何结合的？"></a>你在项目中使用了动态线程池的Java组件，这与阅读积分模块有什么关联吗？能否具体说明一下如何结合的？</h2><p><strong>回答：</strong><br>在积分模块中，由于需要处理大量的学生阅读数据和积分统计，我使用了自定义的动态线程池来优化系统的性能。通过动态调整线程池的核心线程数和最大线程数，可以根据系统的负载情况灵活调整线程资源，确保在高并发场景下系统的稳定性和响应速度。例如，在阅读高峰期，线程池能够自动扩展以处理大量的积分结算请求，而在系统负载降低时，线程池又可以收缩以节省资源。这一优化不仅提高了系统的吞吐量，也为学生端的流畅体验提供了保障。</p><h2 id="你谈到了在阅读高峰期，线程池能够自动扩展以处理大量的积分结算请求，而在系统负载降低时，线程池又可以收缩以节省资源，这是如何实现的，你定义了定时任务吗？还是有其他方法可以实现动态的扩容？"><a href="#你谈到了在阅读高峰期，线程池能够自动扩展以处理大量的积分结算请求，而在系统负载降低时，线程池又可以收缩以节省资源，这是如何实现的，你定义了定时任务吗？还是有其他方法可以实现动态的扩容？" class="headerlink" title="你谈到了在阅读高峰期，线程池能够自动扩展以处理大量的积分结算请求，而在系统负载降低时，线程池又可以收缩以节省资源，这是如何实现的，你定义了定时任务吗？还是有其他方法可以实现动态的扩容？"></a>你谈到了在阅读高峰期，线程池能够自动扩展以处理大量的积分结算请求，而在系统负载降低时，线程池又可以收缩以节省资源，这是如何实现的，你定义了定时任务吗？还是有其他方法可以实现动态的扩容？</h2><p>动态调整线程池的实现方式通常有两种：通过定时任务或基于实际运行时的动态监控。</p><p><strong>1. 定时任务方式</strong></p><p>可以定义一个定时任务，定期检查系统的负载情况（如当前的请求数、CPU使用率、内存占用等）。根据这些指标，动态调整线程池的核心线程数和最大线程数。这种方式实现简单，通过Java中的<code>ScheduledExecutorService</code>来周期性地执行这些调整逻辑。</p><p><strong>优点：</strong> 实现简单，容易维护。<br><strong>缺点：</strong> 可能存在延迟，无法实时响应突发流量。</p><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">scheduler</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">scheduler.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">currentLoad</span> <span class="operator">=</span> getCurrentSystemLoad(); <span class="comment">// 获取系统负载</span></span><br><span class="line">    <span class="keyword">if</span> (currentLoad &gt; HIGH_LOAD_THRESHOLD) &#123;</span><br><span class="line">        threadPoolExecutor.setCorePoolSize(HIGH_CORE_POOL_SIZE);</span><br><span class="line">        threadPoolExecutor.setMaximumPoolSize(HIGH_MAX_POOL_SIZE);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentLoad &lt; LOW_LOAD_THRESHOLD) &#123;</span><br><span class="line">        threadPoolExecutor.setCorePoolSize(LOW_CORE_POOL_SIZE);</span><br><span class="line">        threadPoolExecutor.setMaximumPoolSize(LOW_MAX_POOL_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">0</span>, <span class="number">1</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><p><strong>2. 基于实际运行时的动态监控</strong></p><p>这种方法更加实时。通过监控线程池的运行情况，例如任务队列的长度、活跃线程数等指标，动态地调整线程池参数。Java中的<code>ThreadPoolExecutor</code>本身就提供了这些监控方法，结合实际情况可以实现自动扩容或缩容。</p><p><strong>优点：</strong> 更加实时，能够迅速响应系统负载变化。<br><strong>缺点：</strong> 实现稍微复杂，需要更复杂的监控和调整逻辑。</p><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义一个监控任务</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">monitorTask</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">queueSize</span> <span class="operator">=</span> threadPoolExecutor.getQueue().size();</span><br><span class="line">    <span class="type">int</span> <span class="variable">activeCount</span> <span class="operator">=</span> threadPoolExecutor.getActiveCount();</span><br><span class="line">    <span class="keyword">if</span> (queueSize &gt; QUEUE_SIZE_THRESHOLD || activeCount &gt; ACTIVE_COUNT_THRESHOLD) &#123;</span><br><span class="line">        threadPoolExecutor.setCorePoolSize(HIGH_CORE_POOL_SIZE);</span><br><span class="line">        threadPoolExecutor.setMaximumPoolSize(HIGH_MAX_POOL_SIZE);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (queueSize &lt; LOW_QUEUE_SIZE_THRESHOLD &amp;&amp; activeCount &lt; LOW_ACTIVE_COUNT_THRESHOLD) &#123;</span><br><span class="line">        threadPoolExecutor.setCorePoolSize(LOW_CORE_POOL_SIZE);</span><br><span class="line">        threadPoolExecutor.setMaximumPoolSize(LOW_MAX_POOL_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时执行监控任务，也可以将其集成到任务处理逻辑中实时调整</span></span><br><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">scheduler</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">scheduler.scheduleAtFixedRate(monitorTask, <span class="number">0</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="在测试和维护阶段，你遇到过哪些典型的-bug？你是如何定位和解决这些问题的？"><a href="#在测试和维护阶段，你遇到过哪些典型的-bug？你是如何定位和解决这些问题的？" class="headerlink" title="在测试和维护阶段，你遇到过哪些典型的 bug？你是如何定位和解决这些问题的？"></a>在测试和维护阶段，你遇到过哪些典型的 bug？你是如何定位和解决这些问题的？</h2><p>TODO</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="你在开发中遇到的最大挑战是什么？是如何克服的？"><a href="#你在开发中遇到的最大挑战是什么？是如何克服的？" class="headerlink" title="你在开发中遇到的最大挑战是什么？是如何克服的？"></a>你在开发中遇到的最大挑战是什么？是如何克服的？</h2><p><strong>回答：</strong><br>在开发过程中，最大挑战是如何在高并发场景下保证积分系统的高可用性和一致性。为了克服这个挑战，我做了以下几点工作：</p><ol><li><strong>异步化处理</strong>：将积分结算和一些耗时操作放到后台异步处理，避免了前端响应阻塞。</li><li><strong>动态线程池优化</strong>：通过自定义的动态线程池，根据系统的负载情况自动调整线程资源，确保系统在高并发下仍能保持稳定。</li><li><strong>消息队列和分布式事务</strong>：采用消息队列实现模块解耦，同时引入最终一致性策略，保证系统的数据一致性。</li><li><strong>缓存优化</strong>：利用Redis缓存常用数据，如排行榜信息，减少数据库压力，提高系统的响应速度。</li></ol><p>通过这些措施，我不仅解决了高并发带来的性能问题，还确保了系统的稳定性和一致性。</p><p>在开发过程中，最大挑战是如何在高并发场景下保证积分结算的实时性和准确性。为解决这个问题，我首先优化了数据库查询和写入的性能，利用索引和缓存减少数据库的压力。同时，通过引入动态线程池组件，灵活调配系统资源应对高并发请求。此外，利用消息队列分离了部分异步任务，将非关键任务延后处理，从而减轻了主流程的压力。最终，这些措施有效提升了系统的性能，确保了积分模块的稳定运行。</p><h2 id="你提到在项目中使用了GitLab-CI-x2F-CD和Rancher，这些工具是如何帮助你在项目后期保持高效开发的？"><a href="#你提到在项目中使用了GitLab-CI-x2F-CD和Rancher，这些工具是如何帮助你在项目后期保持高效开发的？" class="headerlink" title="你提到在项目中使用了GitLab CI&#x2F;CD和Rancher，这些工具是如何帮助你在项目后期保持高效开发的？"></a>你提到在项目中使用了GitLab CI&#x2F;CD和Rancher，这些工具是如何帮助你在项目后期保持高效开发的？</h2><p><strong>回答：</strong><br>在项目后期，需求变更和bug修复的频率增加，为了确保每次代码提交后的版本稳定性，我使用了GitLab CI&#x2F;CD来自动化构建、测试和部署流程。每次提交代码后，CI&#x2F;CD管道会自动运行测试，确保代码质量，并在通过测试后自动部署到开发或生产环境。Rancher则用于管理Kubernetes集群，帮助我们轻松实现应用的扩展和升级，确保系统在高并发场景下的稳定性。通过这些工具的配合，我们能够快速响应变化，同时保持高效和稳定的开发流程。</p><h2 id="你知道如何设计-GitLab-CI-x2F-CD-的流水线来支持自动化构建、测试和部署吗？"><a href="#你知道如何设计-GitLab-CI-x2F-CD-的流水线来支持自动化构建、测试和部署吗？" class="headerlink" title="你知道如何设计 GitLab CI&#x2F;CD 的流水线来支持自动化构建、测试和部署吗？"></a>你知道如何设计 GitLab CI&#x2F;CD 的流水线来支持自动化构建、测试和部署吗？</h2><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><ol><li>在一台或多台机器上安装GitLab Runner，用于执行CI&#x2F;CD作业。</li><li>配置Runner与GitLab服务器关联，并注册到GitLab项目中。</li><li>在GitLab上创建一个新的仓库，并设置好版本控制相关的策略。</li><li>编写<code>.gitlab-ci.yml</code>文件</li></ol><h2 id="流水线设计"><a href="#流水线设计" class="headerlink" title="流水线设计"></a>流水线设计</h2><ol><li><p><strong>构建阶段（Build）</strong></p><ul><li><p><strong>构建镜像&#x2F;编译代码</strong>：</p><ul><li>使用<code>docker build</code>命令构建Docker镜像（如果项目使用容器化部署）。</li><li>或者执行编译命令（如<code>npm install &amp;&amp; npm run build</code>对于Node.js项目）。</li></ul></li><li><p><strong>上传工件（Artifacts）</strong>：</p><ul><li>将构建好的镜像或编译后的文件上传到GitLab的artifacts存储中，供后续阶段使用。</li></ul></li></ul></li><li><p><strong>测试阶段（Test）</strong></p><ul><li><p><strong>单元测试</strong>：</p></li><li><p><strong>集成测试</strong>：</p></li><li><p><strong>代码质量检查</strong>：</p></li></ul></li><li><p><strong>发布阶段（Deploy）</strong></p><ul><li><p><strong>环境变量管理</strong>：</p><ul><li>在GitLab项目的Settings &gt; CI&#x2F;CD &gt; Variables中配置不同环境的变量。</li></ul></li><li><p><strong>环境部署</strong>：</p><ul><li>根据分支或标签的不同，部署到不同的环境（如<code>staging</code>或<code>production</code>）。</li><li>使用<code>deploy</code>关键字指定部署目标和脚本。</li></ul></li></ul></li></ol><h1 id="————–动态线程池组件————–"><a href="#————–动态线程池组件————–" class="headerlink" title="————–动态线程池组件————–"></a><div align="center">————–动态线程池组件————–</div></h1><h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><h2 id="动态线程池组件的核心功能和应用场景？"><a href="#动态线程池组件的核心功能和应用场景？" class="headerlink" title="动态线程池组件的核心功能和应用场景？"></a>动态线程池组件的核心功能和应用场景？</h2><p><strong>核心功能</strong></p><ol><li><strong>动态调整线程数量</strong>：根据当前系统的负载情况，自动增加或减少线程池中的工作线程数量。</li><li><strong>负载监控</strong>：持续监控系统的负载，如CPU利用率、线程池中待处理的任务数量等。</li><li><strong>资源优化</strong>：在低负载时减少线程数量，节约系统资源；在高负载时增加线程数量，提升处理能力。</li><li><strong>异常处理</strong>：当线程池中的线程发生异常时，能够自动恢复或替换线程。</li><li><strong>策略配置</strong>：支持不同的调整策略，如基于时间窗口的平均负载、固定间隔的调整等。</li></ol><p><strong>应用场景</strong></p><ol><li><strong>Web 服务器</strong>：处理来自用户的HTTP请求，特别是在流量波动较大的场景下。</li><li><strong>批处理系统</strong>：在数据处理过程中，根据数据量的大小动态调整处理线程的数量。</li><li><strong>分布式系统</strong>：在分布式环境中，根据节点的状态和负载情况动态调整线程数量。</li><li><strong>微服务架构</strong>：在微服务之间相互调用时，根据服务调用量的变化动态调整线程池大小。</li><li><strong>实时数据分析</strong>：处理实时数据流时，根据数据流的密度动态调整处理能力。</li></ol><h2 id="为什么需要动态调整线程池的大小？"><a href="#为什么需要动态调整线程池的大小？" class="headerlink" title="为什么需要动态调整线程池的大小？"></a>为什么需要动态调整线程池的大小？</h2><ol><li><strong>资源利用率最大化</strong>：在负载较低时减少线程数量，避免资源浪费；在负载较高时增加线程数量，充分利用系统资源。</li><li><strong>提高响应速度</strong>：通过增加线程数量来减少任务队列的等待时间，提高系统的响应速度。</li><li><strong>适应负载变化</strong>：应对不可预测的工作负载变化，使系统能够在不同的负载条件下都能保持较高的性能。</li><li><strong>增强系统稳定性</strong>：在系统面临突发流量时，通过增加线程数量来分散压力，减少系统崩溃的风险。</li></ol><h2 id="在实现动态线程池的过程中是否使用了设计模式？如果有，请举例说明。"><a href="#在实现动态线程池的过程中是否使用了设计模式？如果有，请举例说明。" class="headerlink" title="在实现动态线程池的过程中是否使用了设计模式？如果有，请举例说明。"></a>在实现动态线程池的过程中是否使用了设计模式？如果有，请举例说明。</h2><blockquote><p>本项目中通过Redis实现了观察者模式，所有没有用设计模式，但可以这样说</p></blockquote><p>在实现动态线程池的过程中，可能会使用到以下几种设计模式：</p><ol><li><strong>观察者模式（Observer Pattern）</strong>：用于监控系统的负载情况，当负载发生变化时，通知线程池调整线程数量。<ul><li><strong>示例</strong>：系统中有一个负载监控器，它可以观察系统负载的变化，并注册为线程池的观察者。当负载变化时，负载监控器会通知线程池调整线程数量。</li></ul></li><li><strong>工厂模式（Factory Pattern）</strong>：用于创建线程池对象，可以支持多种不同的线程池配置和策略。<ul><li><strong>示例</strong>：可以定义一个 <code>ThreadPoolFactory</code> 类，根据传入的不同参数（如线程数量、队列大小等）创建不同类型的线程池。</li></ul></li><li><strong>策略模式（Strategy Pattern）</strong>：用于实现不同的线程池调整策略，可以根据实际需要更换不同的策略。<ul><li><strong>示例</strong>：可以定义一个接口 <code>AdjustmentStrategy</code>，不同的实现类分别代表不同的调整策略，如基于时间窗口的平均负载策略、基于任务队列长度的策略等。线程池可以根据需要选择不同的策略。</li></ul></li><li><strong>装饰器模式（Decorator Pattern）</strong>：用于在不改变现有类结构的情况下，动态地给线程池添加新的功能。<ul><li><strong>示例</strong>：可以定义一个 <code>DynamicThreadPoolDecorator</code> 类，它包裹现有的线程池对象，并在其基础上添加动态调整线程数量的功能。</li></ul></li></ol><h1 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h1><h2 id="Redis-在该项目中是如何被使用的？它解决了什么问题？"><a href="#Redis-在该项目中是如何被使用的？它解决了什么问题？" class="headerlink" title="Redis 在该项目中是如何被使用的？它解决了什么问题？"></a>Redis 在该项目中是如何被使用的？它解决了什么问题？</h2><ol><li>Redis作为消息队列，实现了主题的订阅发布，通过这个功能实现了线程池的配置修改。</li><li>Redis保证了线程池的故障恢复。项目启动时，组件初始化服务类会去redis里读取线程池的配置，如果redis里没有就注册进去。</li></ol><h2 id="如何通过Redis进行订阅发布？"><a href="#如何通过Redis进行订阅发布？" class="headerlink" title="如何通过Redis进行订阅发布？"></a>如何通过Redis进行订阅发布？</h2><p>项目启动时发布一个主题，通过<code>RTopic</code>的<code>addListener</code>方法和<code>publish</code>方法实现主题的订阅和发布。</p><h2 id="线程池的实时调整策略是如何实现的？"><a href="#线程池的实时调整策略是如何实现的？" class="headerlink" title="线程池的实时调整策略是如何实现的？"></a>线程池的实时调整策略是如何实现的？</h2><p>为了实现线程池的动态调整，我通过Redis的主题订阅功能实现的，也就是让Redis作为一个消息队列。</p><p>具体步骤如下：</p><ol><li><p>启动服务时，读取yml文件中的配置消息，得到<code>RedissonClient</code>的配置信息，构造一个<code>RedissonClient</code>对象；</p></li><li><p>构造一个topicKey，也就是主题的键，通过<code>Redisson</code>的<code>getTopic</code>方法的得到一个主题<code>RTopic</code>；</p></li><li><p>通过<code>RTopic</code>的<code>addListener</code>方法注册监听消息的类型和监听类，监听消息的类型就是线程池的配置参数类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RTopic <span class="title function_">threadPoolConfigAdjustListener</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">topicKey</span> <span class="operator">=</span> key;</span><br><span class="line">    <span class="type">RTopic</span> <span class="variable">topic</span> <span class="operator">=</span> redissonClient.getTopic(topicKey);</span><br><span class="line">    topic.addListener(ThreadPoolConfigEntity.class, threadPoolConfigAdjustListener);</span><br><span class="line">    <span class="keyword">return</span> topic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在监听类里通过线程池的服务类去修改线程池。</p></li></ol><h2 id="组件服务类是如何拿到当前正在运行中的线程池的？"><a href="#组件服务类是如何拿到当前正在运行中的线程池的？" class="headerlink" title="组件服务类是如何拿到当前正在运行中的线程池的？"></a>组件服务类是如何拿到当前正在运行中的线程池的？</h2><p>好的，这个组件首先需要其他引入。一个外部项目如果需要使用这个组件，需要使用组件提供的<code>ThreadPoolConfigEntity</code>对象，这个对象是我组件所提供的管理线程池的一个类，它可以创建好一个线程池，或者项目也可以自己创建线程池。</p><ol><li><p>外部项目如果需要使用组件来管理线程池，则需要通过在项目启动时通过 <code>@Bean</code> 注入线程池，</p></li><li><p>组件通过Spring的依赖注入在项目启动时，获得通过一个Map对象获得所有通过 <code>@Bean</code> 注入的所有线程池。</p></li><li><p>构造一个键，将获取的线程池参数写入到Redis中，其中我将<code>ThreadPoolConfigEntity</code>类作为每个本地线程池的配置类，这一步是因为从<code>Redisson</code>的 <code>Bucket</code> 中获取的数据类型时可以通过泛型来保障安全和提高规范化；</p></li><li><p>最后，将线程池的Map集合作为参数设到服务类<code>DynamicThreadPoolService</code>中去，这样的话，我通过控制层或其他触发器，传递修改参数请求，就可以去修改Redis查询当前线程池的情况。如果我去修改时，可以通过<code>RTopic</code>的<code>publish</code>方法发布<code>ThreadPoolConfigEntity</code>类型的消息，而由于我在组件中之前发布了监听主题，所以这个消息类型会触发对应的监听器，然后就会去运行监听器中的方法，通过组件的服务类去修改线程池的参数。因为组件服务类在服务启动时通过依赖注入已经拿到了外部项目的线程池，所以组件服务类就可以去修改本地的线程池了。</p></li><li><p>最后，通过JS代码构建了一个简单的网页控制台，通过刷新查询实时获取线程池的数据，通过表单提交查看线程池参数和修改线程池。</p></li></ol><h1 id="动态线程池的原理"><a href="#动态线程池的原理" class="headerlink" title="动态线程池的原理"></a>动态线程池的原理</h1><h2 id="为什么线程池可以动态调整参数"><a href="#为什么线程池可以动态调整参数" class="headerlink" title="为什么线程池可以动态调整参数"></a>为什么线程池可以动态调整参数</h2><p>因为 <code>ThreadPoolExecutor</code> 提供了调整线程数量和其他配置的能力。具体来说：</p><ol><li><strong>属性的可变性</strong></li></ol><p><code>corePoolSize</code> 和 <code>maximumPoolSize</code> 属性都是 <code>int</code> 类型，并且它们是通过 <code>volatile</code> 关键字修饰的，这意味着它们可以在多线程环境中安全地读取和修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">protected volatile int corePoolSize;</span><br><span class="line">protected volatile int maximumPoolSize;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>动态调整的方法</strong></li></ol><p><code>ThreadPoolExecutor</code> 提供了以下方法来动态调整核心线程数和最大线程数：</p><ul><li>**setCorePoolSize(int corePoolSize)**：设置线程池的核心线程数。</li><li>**setMaximumPoolSize(int maximumPoolSize)**：设置线程池的最大线程数。</li></ul><p>这些方法直接修改了 <code>corePoolSize</code> 和 <code>maximumPoolSize</code> 的值。</p><ol start="3"><li><strong>动态调整的机制</strong></li></ol><p>当调用 <code>setCorePoolSize</code> 或 <code>setMaximumPoolSize</code> 方法时，线程池会根据新的配置来调整当前的工作线程数。具体来说：</p><ul><li><strong>增加核心线程数</strong>：如果新的 <code>corePoolSize</code> 大于当前活动线程数，并且队列中有待执行的任务，线程池会尝试创建新的线程来处理这些任务。</li><li><strong>减少核心线程数</strong>：如果新的 <code>corePoolSize</code> 小于当前活动线程数，多余的线程将在空闲一段时间后被终止。</li><li><strong>调整最大线程数</strong>：当 <code>maximumPoolSize</code> 改变时，线程池会根据新的最大值来调整线程的数量。如果当前线程数超过了新的 <code>maximumPoolSize</code>，多余的线程会被逐步终止。</li></ul><h2 id="在线程池的动态调整过程中，你是如何保证线程安全的？"><a href="#在线程池的动态调整过程中，你是如何保证线程安全的？" class="headerlink" title="在线程池的动态调整过程中，你是如何保证线程安全的？"></a>在线程池的动态调整过程中，你是如何保证线程安全的？</h2><p><strong>使用 <code>volatile</code> 修饰符</strong></p><p><code>corePoolSize</code> 和 <code>maximumPoolSize</code> 在 <code>ThreadPoolExecutor</code> 类中是用 <code>volatile</code> 修饰的，这确保了多线程环境下的可见性和有序性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">volatile</span> <span class="type">int</span> corePoolSize;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">volatile</span> <span class="type">int</span> maximumPoolSize;</span><br></pre></td></tr></table></figure><p><code>volatile</code> 修饰符保证了当这些字段被修改时，其他线程能够看到最新的值，而且不会发生指令重排序。</p><p><strong>使用原子操作</strong></p><p><code>ThreadPoolExecutor</code> 使用了 <code>ctl</code> 字段来保存线程池的一些关键状态信息，包括当前活跃线程数、线程池的状态等。这个字段是一个 <code>long</code> 类型，通过位操作来保存不同的状态信息。在修改线程池状态时，<code>ThreadPoolExecutor</code> 使用了 CAS（Compare and Swap）操作来保证原子性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">long</span> ctl;</span><br></pre></td></tr></table></figure><p>例如，在创建新线程时，<code>addWorker</code> 方法会使用 <code>compareAndSetWorkerCount</code> 来更新线程池的当前线程数，这个操作是原子的。</p><p>java深色版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">compareAndSetWorkerCount</span><span class="params">(<span class="type">int</span> expect, <span class="type">int</span> update)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ctl.compareAndSet(ctlOf(expect), ctlOf(update));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用锁</strong></p><p>在一些需要更复杂同步的地方，<code>ThreadPoolExecutor</code> 使用了锁来保护共享资源的访问。例如，在 <code>interruptIdleWorkers</code> 方法中，当需要中断空闲线程时，会获取 <code>mainLock</code> 来保护对 <code>workers</code> 集合的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">interruptIdleWorkers</span><span class="params">(<span class="type">boolean</span> onlyOne)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用并发集合</strong></p><p><code>ThreadPoolExecutor</code> 使用了 <code>ConcurrentHashMap</code> 来管理 <code>Worker</code> 对象，这些对象代表了正在工作的线程。通过使用并发集合，<code>ThreadPoolExecutor</code> 可以在多线程环境下安全地管理这些线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Integer, Worker&gt; workers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="底层原理：核心线程数的动态修改原理"><a href="#底层原理：核心线程数的动态修改原理" class="headerlink" title="底层原理：核心线程数的动态修改原理"></a>底层原理：核心线程数的动态修改原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCorePoolSize</span><span class="params">(<span class="type">int</span> corePoolSize)</span> &#123;</span><br><span class="line">    <span class="comment">// 对传入的 corePoolSize 进行校验</span></span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> || maximumPoolSize &lt; corePoolSize)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="comment">// 更新当前的核心线程数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">delta</span> <span class="operator">=</span> corePoolSize - <span class="built_in">this</span>.corePoolSize;</span><br><span class="line">    <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="comment">// 如果新的 corePoolSize 小于当前的核心线程数，那么需要中断那些处于空闲状态的线程</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(ctl.get()) &gt; corePoolSize)</span><br><span class="line">        interruptIdleWorkers();</span><br><span class="line">    <span class="comment">// 如果新的 corePoolSize 大于当前的核心线程数，并且任务队列中有任务等待执行，那么需要预启动一些新的线程来处理这些任务</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (delta &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> Math.min(delta, workQueue.size());</span><br><span class="line">        <span class="keyword">while</span> (k-- &gt; <span class="number">0</span> &amp;&amp; addWorker(<span class="literal">null</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (workQueue.isEmpty())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="底层原理：最大线程数的动态修改原理"><a href="#底层原理：最大线程数的动态修改原理" class="headerlink" title="底层原理：最大线程数的动态修改原理"></a>底层原理：最大线程数的动态修改原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaximumPoolSize</span><span class="params">(<span class="type">int</span> maximumPoolSize)</span> &#123;</span><br><span class="line">    <span class="comment">// 对传入的 maximumPoolSize 进行校验</span></span><br><span class="line">    <span class="keyword">if</span> (maximumPoolSize &lt;= <span class="number">0</span> || maximumPoolSize &lt; corePoolSize)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="comment">// 更新当前的最大线程数</span></span><br><span class="line">    <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="comment">// 如果新的 maximumPoolSize 小于当前的最大线程数，并且当前活动线程数大于新的 maximumPoolSize，则需要中断那些处于空闲状态的线程</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(ctl.get()) &gt; maximumPoolSize)</span><br><span class="line">        interruptIdleWorkers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="底层原理：线程池状态ctl"><a href="#底层原理：线程池状态ctl" class="headerlink" title="底层原理：线程池状态ctl"></a>底层原理：线程池状态<code>ctl</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">ctl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> Integer.SIZE - <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_MASK</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runState存储在高位</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RUNNING</span>    <span class="operator">=</span> -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SHUTDOWN</span>   <span class="operator">=</span>  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STOP</span>       <span class="operator">=</span>  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TIDYING</span>    <span class="operator">=</span>  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TERMINATED</span> <span class="operator">=</span>  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包和解包ctl</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">runStateOf</span><span class="params">(<span class="type">int</span> c)</span>     &#123; <span class="keyword">return</span> c &amp; ~COUNT_MASK; &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">workerCountOf</span><span class="params">(<span class="type">int</span> c)</span>  &#123; <span class="keyword">return</span> c &amp; COUNT_MASK; &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ctlOf</span><span class="params">(<span class="type">int</span> rs, <span class="type">int</span> wc)</span> &#123; <span class="keyword">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure><h2 id="workerCountOf-方法"><a href="#workerCountOf-方法" class="headerlink" title="workerCountOf 方法"></a><code>workerCountOf</code> 方法</h2><p><code>workerCountOf</code> 方法是从 <code>ctl</code> 字段中提取当前活动线程的数量。<code>ctl</code> 字段是一个 <code>volatile long</code> 类型的变量，包含了线程池的一些状态信息，包括当前活动线程的数量。</p><p><code>ctl</code> 的高几位表示线程池的状态信息，而低几位表示当前活动线程的数量。具体来说，<code>ctl</code> 的低 3 位（0-2）表示当前活动线程的数量。</p><h2 id="interruptIdleWorkers-方法"><a href="#interruptIdleWorkers-方法" class="headerlink" title="interruptIdleWorkers 方法"></a><code>interruptIdleWorkers</code> 方法</h2><p><code>interruptIdleWorkers</code> 方法用来中断那些处于空闲状态的线程。该方法遍历所有工作线程，并中断那些处于空闲状态的线程。如果当前活动线程数仍然大于新的最大线程数，则会再次检查并中断空闲线程。</p><h1 id="JMX"><a href="#JMX" class="headerlink" title="JMX"></a>JMX</h1><h2 id="线程池的监控指标体系是如何设计的？如何确保这些指标的准确性和及时性？"><a href="#线程池的监控指标体系是如何设计的？如何确保这些指标的准确性和及时性？" class="headerlink" title="线程池的监控指标体系是如何设计的？如何确保这些指标的准确性和及时性？"></a>线程池的监控指标体系是如何设计的？如何确保这些指标的准确性和及时性？</h2><h2 id="你是如何使用-JMX-进行线程池监控的？具体有哪些指标？"><a href="#你是如何使用-JMX-进行线程池监控的？具体有哪些指标？" class="headerlink" title="你是如何使用 JMX 进行线程池监控的？具体有哪些指标？"></a>你是如何使用 JMX 进行线程池监控的？具体有哪些指标？</h2><p>我希望通过获取系统当前的运行情况来判断，是否需要修改线程池。</p><p>所以我通过查询资料知道可以通过JMX这个技术，JMX是<code>com.sun.management</code>中的一个包，我通过<code>OperatingSystemMXBean</code>的工厂模式得到<code>ManagementFactory</code>对象，通过这个对象可以获得系统的内存信息、线程信息、类加载信息、垃圾回收信息、内存池信息等信息。</p><p>我利用CPU占用率、堆的使用情况，来调整线程池的核心线程数和最大线程数</p><h2 id="线程池的动态扩展逻辑是如何实现的？"><a href="#线程池的动态扩展逻辑是如何实现的？" class="headerlink" title="线程池的动态扩展逻辑是如何实现的？"></a>线程池的动态扩展逻辑是如何实现的？</h2><p>监控功能的实现我是这样做的：</p><p><strong>使用一个 SystemMonitor 类实现 Runnable 接口重写run方法，让它在死循环里每个10秒获取一次系统运行信息，如果出现例如CPU飙高或堆占用过高，则实施线程池调整策略，把核心线程数和最大线程数调高；反之，如果系统资源占用较低，则调低线程池的配置</strong></p><h2 id="在开发过程中，是否进行了性能测试？如何模拟真实场景进行测试？"><a href="#在开发过程中，是否进行了性能测试？如何模拟真实场景进行测试？" class="headerlink" title="在开发过程中，是否进行了性能测试？如何模拟真实场景进行测试？"></a>在开发过程中，是否进行了性能测试？如何模拟真实场景进行测试？</h2><p>我通过一个Runnable的实现类模拟了一个线程的任务执行流程，然后在Applicaion启动类中通过<code>applicationRunner</code>方法返回参数args，在Application类启动时执行这个方法中的死循环来模拟不停地提交任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ApplicationRunner <span class="title function_">applicationRunner</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">        <span class="comment">// 启动系统监控线程，只需要启动一次</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">monitorThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">SystemMonitor</span>(<span class="number">25</span>,<span class="number">10</span>));</span><br><span class="line">        monitorThread.setDaemon(<span class="literal">true</span>); <span class="comment">// 设置为守护线程，主程序退出时监控线程自动结束</span></span><br><span class="line">        monitorThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并运行线程池任务，不需要每次循环重新启动监控线程</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">ThreadPoolSimulation</span> <span class="variable">threadPoolSimulation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolSimulation</span>(taskId.getAndIncrement());</span><br><span class="line">            tpe_01.submit(threadPoolSimulation);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">500</span>) + <span class="number">1</span>); <span class="comment">// 模拟提交任务的时间间隔</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">                System.err.println(<span class="string">&quot;主线程中断！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，主线程是在死循环中不停地去向线程池提交任务，还有一个子线程我是将其设置为了守护线程去检测系统状态。过程中，子线程通过JMX可以实时地获取的系统信息，并通过系统的信息来动态调整线程池的配置。</p><h2 id="如何设计日志记录机制，确保在出现问题时能够快速定位原因？"><a href="#如何设计日志记录机制，确保在出现问题时能够快速定位原因？" class="headerlink" title="如何设计日志记录机制，确保在出现问题时能够快速定位原因？"></a>如何设计日志记录机制，确保在出现问题时能够快速定位原因？</h2><blockquote><p>这不是本项目应该去做的，但是如果问到了可以这样回答</p></blockquote><p><strong>1. 日志格式</strong></p><p>统一的日志格式有助于快速解析和分析日志：</p><ul><li><strong>时间戳</strong>：记录日志产生的精确时间。</li><li><strong>日志级别</strong>：明确指出该条日志的重要性。</li><li><strong>线程 ID</strong>：帮助追踪特定线程的行为。</li><li><strong>消息</strong>：描述发生了什么，以及任何必要的上下文信息。</li><li><strong>异常堆栈跟踪</strong>：如果有的话，记录完整的异常堆栈跟踪信息。</li></ul><p>示例日志格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2024-09-21 17:30:00 [INFO] [Thread-1] - Request received for /api/v1/users</span><br><span class="line">2024-09-21 17:30:01 [ERROR] [Thread-2] - Exception occurred while processing request /api/v1/data: java.lang.NullPointerException</span><br></pre></td></tr></table></figure><p><strong>2. 日志聚合与索引</strong></p><p>使用日志聚合工具（如 ELK Stack、Graylog、Splunk 等）来集中管理所有日志信息，并建立索引以便快速搜索：</p><ul><li><strong>集中存储</strong>：所有日志信息存储在一个地方，便于统一管理。</li><li><strong>全文搜索</strong>：支持全文搜索功能，帮助快速找到相关信息。</li><li><strong>图表展示</strong>：提供图表展示功能，可以直观地了解日志趋势。</li></ul><p><strong>3. 日志分析</strong></p><p>利用日志分析工具（如 Kibana、Grafana 等）进行日志分析，发现潜在的问题：</p><ul><li><strong>趋势分析</strong>：查看日志随时间的趋势变化。</li><li><strong>异常检测</strong>：自动检测异常行为，并产生告警。</li><li><strong>性能分析</strong>：分析性能瓶颈，找出影响系统性能的因素。</li></ul><h2 id="如何设计监控系统，确保线程池的健康状况能够实时监控并及时告警？"><a href="#如何设计监控系统，确保线程池的健康状况能够实时监控并及时告警？" class="headerlink" title="如何设计监控系统，确保线程池的健康状况能够实时监控并及时告警？"></a>如何设计监控系统，确保线程池的健康状况能够实时监控并及时告警？</h2><p><strong>1. 收集监控数据</strong></p><p>首先，需要确定要收集哪些监控数据。对于线程池来说，以下是一些关键的监控指标：</p><ul><li>**活动线程数 (activeCount)**：当前正在执行任务的线程数量。</li><li>**线程池大小 (poolSize)**：当前线程池中的线程总数。</li><li>**队列长度 (queueLength)**：等待处理的任务队列长度。</li><li>**任务完成数 (completedTaskCount)**：已完成的任务数量。</li><li><strong>拒绝策略执行次数</strong>：当任务被拒绝时的次数。</li><li>**线程存活时间 (keepAliveTime)**：非核心线程在空闲状态下存活的时间。</li><li>**线程池状态 (threadPoolState)**：线程池的当前状态（如运行中、关闭中等）。</li></ul><p><strong>2. 选择监控工具和技术</strong></p><p>Java Management Extensions (JMX)</p><ul><li><strong>MBeans</strong>：使用 <code>ThreadPoolExecutor</code> 的 MBeans 来暴露上述监控指标。</li><li><strong>JMX 客户端</strong>：可以使用 JConsole 或 VisualVM 这样的工具来查看这些指标。</li></ul><p>日志记录</p><ul><li><strong>日志级别</strong>：通过设置不同的日志级别（如 INFO、WARN、ERROR），记录线程池的关键事件。</li><li><strong>日志框架</strong>：使用如 Logback、Log4j 等日志框架来记录线程池的日志。</li></ul><p>应用性能监控 (APM)</p><ul><li><strong>APM 工具</strong>：如 New Relic、Datadog、Prometheus 等，可以用来监控应用程序的整体性能，包括线程池的运行状况。</li></ul><p><strong>3. 设置告警规则</strong></p><p>根据业务需求和系统容量，设置合理的阈值来触发告警。例如：</p><ul><li>当活动线程数超过某个阈值时。</li><li>当任务队列长度超过一定长度时。</li><li>当线程池拒绝任务的频率上升时。</li></ul><p><strong>4. 实现告警逻辑</strong></p><p>告警发送</p><ul><li><strong>邮件&#x2F;短信通知</strong>：当达到预设的阈值时，通过邮件或短信的方式通知相关人员。</li><li><strong>Webhook</strong>：可以设置 Webhook 与第三方服务（如 PagerDuty、Opsgenie）集成，自动触发告警流程。</li></ul><p>自动化响应</p><ul><li><strong>自动化脚本</strong>：编写自动化脚本来响应告警，例如自动扩容、重启服务等。</li><li><strong>CI&#x2F;CD 流水线</strong>：集成到 CI&#x2F;CD 流水线中，当检测到问题时自动触发修复流程。</li></ul><p><strong>5. 可视化仪表板</strong></p><p>使用可视化工具（如 Grafana、Kibana）来展示监控数据，帮助运维人员更容易地理解系统的运行状态。</p><p><strong>6. 定期审核与优化</strong></p><p>定期审查监控数据，根据实际运行情况调整监控阈值和告警策略，持续优化监控系统。</p><h2 id="如果系统需要重启，线程池的状态如何保存和恢复？"><a href="#如果系统需要重启，线程池的状态如何保存和恢复？" class="headerlink" title="如果系统需要重启，线程池的状态如何保存和恢复？"></a>如果系统需要重启，线程池的状态如何保存和恢复？</h2><p>用redis来保证。项目启动时，组件会去redis里读取线程池的配置，如果redis里没有就注册进去</p><h1 id="性能优化-1"><a href="#性能优化-1" class="headerlink" title="性能优化"></a>性能优化</h1><h2 id="如果系统负载变化很大，动态线程池组件需要做哪些改进来保证可扩展性？"><a href="#如果系统负载变化很大，动态线程池组件需要做哪些改进来保证可扩展性？" class="headerlink" title="如果系统负载变化很大，动态线程池组件需要做哪些改进来保证可扩展性？"></a>如果系统负载变化很大，动态线程池组件需要做哪些改进来保证可扩展性？</h2><blockquote><p>这不是本项目应该去做的，但是如果问到了可以这样回答</p></blockquote><p><strong>异步和非阻塞处理</strong></p><ul><li><p><strong>异步处理</strong>：引入异步处理机制，将一些耗时较长的任务放入异步执行，从而减少主线程的等待时间，提高整体处理能力。</p></li><li><p><strong>非阻塞 I&#x2F;O</strong>：使用 NIO 或 AIO 等非阻塞 I&#x2F;O 技术，减少 I&#x2F;O 操作带来的阻塞时间，使得每个线程能够处理更多的请求。</p></li></ul><p><strong>弹性伸缩</strong></p><ul><li><strong>云服务集成</strong>：利用云平台提供的弹性伸缩服务（如 AWS Auto Scaling、Kubernetes Horizontal Pod Autoscaler），根据实际需求动态增减计算资源。</li></ul><p><strong>缓存机制</strong></p><ul><li><strong>缓存策略</strong>：合理使用缓存来减轻后端数据库的压力，减少重复计算，加快响应速度。</li></ul><p><strong>测试与验证</strong></p><ul><li><p><strong>负载测试</strong>：定期进行负载测试，验证线程池的调整策略是否有效，并根据测试结果调整策略。</p></li><li><p><strong>A&#x2F;B 测试</strong>：在生产环境中使用 A&#x2F;B 测试来评估新策略的效果，确保新的调整不会带来负面影响。</p></li></ul><p>通过上述改进措施，动态线程池组件可以在面对大范围的负载变化时，保持良好的可扩展性和稳定性。</p><h2 id="在极端情况下，当系统压力过大导致线程池无法正常工作时，你将如何快速诊断并解决问题？"><a href="#在极端情况下，当系统压力过大导致线程池无法正常工作时，你将如何快速诊断并解决问题？" class="headerlink" title="在极端情况下，当系统压力过大导致线程池无法正常工作时，你将如何快速诊断并解决问题？"></a>在极端情况下，当系统压力过大导致线程池无法正常工作时，你将如何快速诊断并解决问题？</h2><h2 id="如果在生产环境中突然出现大量的请求导致线程池崩溃，你会如何快速定位问题并恢复服务？"><a href="#如果在生产环境中突然出现大量的请求导致线程池崩溃，你会如何快速定位问题并恢复服务？" class="headerlink" title="如果在生产环境中突然出现大量的请求导致线程池崩溃，你会如何快速定位问题并恢复服务？"></a>如果在生产环境中突然出现大量的请求导致线程池崩溃，你会如何快速定位问题并恢复服务？</h2><p><strong>1. 快速响应与初步诊断</strong></p><ul><li><p><strong>检查告警系统，确认问题</strong>：查看是否有相关的告警信息，如 CPU 使用率过高、内存溢出、线程池拒绝策略被触发等。</p></li><li><p><strong>查看应用日志</strong>：查找最近的日志条目，特别关注错误级别和警告级别的日志，寻找异常信息。</p></li><li><p><strong>查看系统日志</strong>：查看操作系统日志，了解是否有系统层面的问题，如磁盘空间不足、网络故障等。</p></li></ul><p><strong>2. 分析问题根源</strong></p><ul><li><p><strong>检查线程池配置</strong>：确认线程池的最大线程数、核心线程数、队列大小等配置是否合理。</p></li><li><p><strong>业务高峰期</strong>：如果是由于业务高峰期导致的，分析是否可以提前准备资源，如增加服务器或扩展线程池大小。</p></li><li><p><strong>异常请求</strong>：检查是否有异常请求导致了大量的任务积压，如有必要，可以临时禁用或限流这些请求。</p></li><li><p><strong>性能瓶颈</strong>：分析是否存在性能瓶颈，如数据库查询慢、外部服务响应慢等问题。</p></li><li><p><strong>资源限制</strong>：检查是否存在资源限制，如 JVM 的内存设置不合理导致 OOM。</p></li></ul><p><strong>3. 采取紧急措施</strong></p><ul><li><p><strong>横向扩展</strong>：增加更多的服务器或实例来分担负载。</p></li><li><p><strong>纵向扩展</strong>：增加单个服务器的资源，如内存、CPU 等。</p></li><li><p><strong>增加线程数</strong>：根据监控数据和系统资源情况，适当增加线程池的最大线程数。</p></li><li><p><strong>调整队列大小</strong>：根据业务需求调整队列的大小，确保既能处理大量请求又不至于消耗过多资源。</p></li><li><p><strong>客户端限流</strong>：在客户端实施限流措施，减少请求频率。</p></li><li><p><strong>服务端限流</strong>：在服务端实现限流逻辑，如使用令牌桶算法或漏桶算法。</p></li></ul><p><strong>4. 长期解决方案</strong></p><ul><li><p><strong>优化性能</strong>：针对性能瓶颈进行代码优化，如减少不必要的数据库查询、优化数据结构等。</p></li><li><p><strong>异常处理</strong>：加强异常处理逻辑，避免异常导致的资源泄露或无限循环等问题。</p></li><li><p><strong>自动化监控</strong>：建立更完善的监控体系，自动监控系统各项指标。</p></li><li><p><strong>告警策略</strong>：完善告警策略，确保在出现问题时能够及时通知相关人员。</p></li><li><p><strong>定期审查</strong>：定期审查系统配置和性能指标，确保系统处于最佳状态。</p></li><li><p><strong>负载测试</strong>：定期进行负载测试，模拟高峰时期的流量，验证系统的稳定性和可扩展性。</p></li></ul><h2 id="线程池组件是否有容错机制？如何在出现故障时保证服务的连续性和数据一致性？"><a href="#线程池组件是否有容错机制？如何在出现故障时保证服务的连续性和数据一致性？" class="headerlink" title="线程池组件是否有容错机制？如何在出现故障时保证服务的连续性和数据一致性？"></a>线程池组件是否有容错机制？如何在出现故障时保证服务的连续性和数据一致性？</h2><p><strong>1. 容错机制</strong></p><ul><li><p>拒绝策略：在线程池满员时决定如何处理新的任务请求。</p></li><li><p>重试机制：对于一些可以重试的任务，可以在任务执行失败时进行重试。</p></li><li><p>超时处理：当任务执行时间超过预设的超时时长，可以采取相应的措施，如终止任务、记录日志或抛出异常。</p></li></ul><p><strong>2. 服务连续性</strong></p><ul><li><p>水平扩展：增加更多的实例来分散请求，减轻单个实例的负载压力</p></li><li><p>异步处理：采用异步处理一些耗时较长的任务，将其放入MQ中处理。</p></li></ul><p><strong>3. 数据一致性</strong></p><ul><li><p>事务管理：使用事务管理来保证数据的一致性。要么全部成功，要么全部回滚。</p></li><li><p>数据库连接池：使用DB连接池来管理数据库连接。</p></li><li><p>分布式事务：对于跨服务的操作，可以使用分布式事务（如两阶段提交、三阶段提交）来保证数据一致性。</p></li><li><p>消息队列保证：使用 RabbitMQ 的持久化消息、确认机制等来保证消息不丢失。</p></li></ul><h2 id="在高并发场景下，如何实现负载均衡来优化资源使用？"><a href="#在高并发场景下，如何实现负载均衡来优化资源使用？" class="headerlink" title="在高并发场景下，如何实现负载均衡来优化资源使用？"></a>在高并发场景下，如何实现负载均衡来优化资源使用？</h2><blockquote><p>考察的是对负载均衡算法的理解</p></blockquote><p><strong>优化负载均衡算法</strong></p><p>负载均衡器可以根据不同的算法来分配请求到后端服务器：</p><ul><li>**轮询 (Round Robin)**：按顺序将请求分发给后端服务器。</li><li>**最少连接 (Least Connections)**：将请求分发给当前连接数最少的服务器。</li><li>**IP 哈希 (IP Hash)**：根据客户端 IP 地址哈希值来分发请求，使得来自同一个客户端的请求尽量分配到同一台服务器。</li><li>**URL 哈希 (URL Hash)**：根据请求 URL 的哈希值来分发请求。</li><li>**加权轮询 (Weighted Round Robin)**：根据服务器的能力赋予不同的权重，权重高的服务器获得更多的请求。</li></ul><p><strong>异步处理</strong></p><ul><li><strong>异步任务处理</strong>：对于耗时较长的任务，可以使用消息队列（如 RabbitMQ、Kafka）来异步处理，减轻主服务器的压力。</li></ul><p><strong>数据库读写分离</strong></p><ul><li><strong>读写分离</strong>：将数据库的读操作和写操作分离，使用不同的数据库实例来处理，提高数据库的并发处理能力。</li></ul><p><strong>缓存策略</strong></p><ul><li><strong>本地缓存</strong>：使用本地缓存（如 Ehcache、Caffeine）来减少对后端数据库的访问。</li><li><strong>分布式缓存</strong>：使用分布式缓存系统（如 Redis、Memcached）来存储热点数据，减轻后端服务器的负载。</li></ul><h1 id="———基于Java实现的关系型数据库———"><a href="#———基于Java实现的关系型数据库———" class="headerlink" title="———基于Java实现的关系型数据库———"></a><div align="center">———基于Java实现的关系型数据库———</div></h1><h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><h2 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h2><p>在 mbdb 项目中,我使用了 Java BIO 多线程模型进行网络通信。具体实现如下:</p><ol><li>服务端使用 <code>ServerSocket</code> 监听指定端口,等待客户端连接请求。</li><li>当有新的客户端连接请求到达时,服务端创建一个新的线程来处理该连接。</li><li>每个处理线程使用 <code>Socket</code> 对象与客户端进行通信，读取客户端发送的数据并处理。</li><li>为了优化性能，我使用了线程池来管理这些处理线程，避免频繁创建和销毁线程带来的开销。</li><li>处理完成后，线程将结果通过输出流返回给客户端，然后销毁。</li></ol><p>这种一请求一线程的模型虽然简单,但在高并发情况下可能会遇到性能瓶颈，因为每个客户端连接都需要一个独立的线程。在未来的版本中,我计划使用 NIO 或 AIO 模型来提高并发性能。</p><h2 id="预写日志"><a href="#预写日志" class="headerlink" title="预写日志"></a>预写日志</h2><p>预写日志的实现是通过在执行任何数据修改操作之前,先将操作记录到日志文件中。具体实现如下:</p><ol><li>使用 <code>FileOutputStream</code> 打开日志文件，以追加模式写入。</li><li>在执行插入或更新操作时，先将操作序列化并写入日志。</li><li>只有在日志写入成功后，才执行实际的数据库操作。</li><li>在系统启动时，先读取日志文件中的所有操作，重放到数据库中,以确保数据一致性。</li></ol><p>这种预写日志的机制确保了即使在系统崩溃时，也可以通过重放日志来恢复到最后一致的状态。</p><h2 id="SQL-解析"><a href="#SQL-解析" class="headerlink" title="SQL 解析"></a>SQL 解析</h2><p>在 mbdb 中,我实现了一个简单的 SQL 解析器,主要使用了正则表达式来识别基本的 SQL 语句结构。具体实现如下:</p><ol><li>定义几个正则表达式来匹配 <code>SELECT</code>、<code>INSERT</code> 和 <code>UPDATE</code> 语句。</li><li>使用正则表达式将 SQL 语句拆分为关键字、表名和字段名。</li><li>将这些信息存储在一个数据结构中，以便后续处理。</li><li>根据解析结果，调用相应的数据库操作方法来执行 SQL 语句。</li></ol><p>虽然这个 SQL 解析器功能相对简单,但已经能够处理基本的查询和数据操作。在未来的版本中,我计划扩展它的功能,支持更复杂的 SQL 语句。</p><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p>在事务管理方面，mbdb 实现了两阶段锁协议和 MVCC。具体实现如下:</p><ol><li>在事务开始时，获取所有需要的锁。</li><li>在事务结束时，释放所有获取的锁。</li><li>使用 <code>ConcurrentHashMap</code> 存储每个数据项的版本信息。</li><li>在读操作时，根据事务开始时间获取最新版本的数据。</li><li>在写操作时，创建一个新的数据版本,并更新版本号。</li></ol><p>这种机制确保了事务的可串行化,并消除了读写操作之间的阻塞。mbdb 提供了两种事务隔离级别：读提交和可重复读。</p><h2 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h2><p>mbdb 使用 B+ 树作为索引结构,提供了创建聚簇索引的功能。具体实现如下:</p><ol><li>每个索引节点包含多个键值对和指向子节点的指针。</li><li>在插入和删除操作时,根据 B+ 树的特性进行节点的分裂和合并,以保持树的平衡。</li><li>使用递归算法遍历树,查找、插入和删除索引项。</li><li>在表创建时,用户可以指定一个或多个字段作为聚簇索引。</li><li>在查询时,优先使用索引来加速数据检索。</li></ol><p>B+ 树索引的优点在于它能够保持数据的有序性,并且在查找和插入时性能较高。总之，mbdb 在设计和实现时充分利用了 Java 的多线程特性、文件 I&#x2F;O 以及数据结构等技术，以提供一个可靠、高效的关系型数据库管理系统。虽然目前功能还比较简单，但已经展示了一个基本的数据库系统的架构和实现。</p><h1 id="底层模块关系展示"><a href="#底层模块关系展示" class="headerlink" title="底层模块关系展示"></a>底层模块关系展示</h1><p>从这个依赖图中，拓扑排序一下就能看出实现顺序。本教程的实现顺序是 TM -&gt; DM -&gt; VM -&gt; IM -&gt; TBM</p><p>每个模块的职责如下：</p><ol><li>TM 通过维护 XID 文件来维护事务的状态，并提供接口供其他模块来查询某个事务的状态。</li><li>DM 直接管理数据库 DB 文件和日志文件。DM 的主要职责有：1) 分页管理 DB 文件，并进行缓存；2) 管理日志文件，保证在发生错误时可以根据日志进行恢复；3) 抽象 DB 文件为 DataItem 供上层模块使用，并提供缓存。</li><li>VM 基于两段锁协议实现了调度序列的可串行化，并实现了 MVCC 以消除读写阻塞。同时实现了两种隔离级别。</li><li>IM 实现了基于 B+ 树的索引，BTW，目前 where 只支持已索引字段。</li><li>TBM 实现了对字段和表的管理。同时，解析 SQL 语句，并根据语句操作表。</li></ol><img src="https://i-blog.csdnimg.cn/blog_migrate/b59faf9c5e9647dfd9bc2278d687b48f.jpeg" alt="MYDB 模块依赖" style="zoom: 80%;" /><h1 id="网络通信的设计"><a href="#网络通信的设计" class="headerlink" title="网络通信的设计"></a>网络通信的设计</h1><h2 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h2><ol><li>首先启动数据库服务端，服务端会监听本地的某个端口，我们通过客户端与服务端建立连接。</li><li>我没有设置账号和密码，所以会直接进入命令界面，socket会创建一个线程池，在死循环中等待我们输入命令。</li><li>一旦我们输入命令，服务端会创建一个worker页就是线程任务，丢给线程池去执行。</li></ol><h2 id="客户端设计"><a href="#客户端设计" class="headerlink" title="客户端设计"></a>客户端设计</h2><ol><li>首先，通过启动类<code>ClientLancher类</code>new一个<code>Socket类</code>发起连接</li><li>然后，new一个<code>Packager类</code>建立传输层，同时绑定<code>Transporter类</code>、<code>Encoder类</code>这些消息传递类</li><li>最后，通过一个命令输入输出类<code>Shell类</code>来接收命令、打印结果。</li></ol><h2 id="服务端设计"><a href="#服务端设计" class="headerlink" title="服务端设计"></a>服务端设计</h2><ol><li>使用Maven来执行启动类<code>ServerLancher类</code>，<code>ServerLancher类</code>中定义了服务端口、数据缓存大小</li><li>通过apache包中的<code>CommandLineParser</code>接收命令行，让<code>ServerLancher类</code>执行两件事：创建数据库、打开数据库<ol><li>如果是创建数据库，则会new一个事务管理器、数据管理器、版本管理器去指定的路径下创建一个数据库，创建的文件有：<code>.db</code>数据库文件、<code>.log</code>日志文件、<code>.xid</code>事务文件，创建完毕后结束服务；</li><li>如果是<strong>打开数据库</strong>，则会new一个事务管理器、数据管理器、版本管理器，还会再启动一个<code>Server类</code>去连接数据库。</li></ol></li><li>然后，数据库会往数据库启动文件<code>Booter类</code>获得数据库的路径，通过这一步知道你要操作的数据库在哪里；<ol><li>如果命令是创建数据库，则<code>Booter类</code>会完成创建，它会往数据库启动文件中写入空数据，完成数据库的创建；</li><li>如果命令是<strong>打开数据库</strong>，会启动<code>Server类</code>监听<code>ServerLancher类</code>中定义的端口。<code>Server类</code>会通过<code>ServerSocket</code>监听端口当Socket中有事件时就会启动一个创建一个线程任务，接收socket的消息，这个socket消息本质上就是我们在命令行输入的数据库操作命令，而这个命令是由客户端通过消息传递类<code>Transporter类</code>写入到<code>BufferedWriter</code>中的，只不过这个消息现在通过<code>Socket socket = ss.accept();</code>接收到了；</li></ol></li><li>socket接收到消息后会通过线程的<code>Runnable类</code>创建worker线程，也就是一个线程任务，这个线程任务中，将这个线程任务交给线程池去执行，至此服务端网络通信层的任务就完成了。</li></ol><h2 id="Java-BIO在项目中的使用场景是什么？相比NIO和AIO有什么不足？"><a href="#Java-BIO在项目中的使用场景是什么？相比NIO和AIO有什么不足？" class="headerlink" title="Java BIO在项目中的使用场景是什么？相比NIO和AIO有什么不足？"></a>Java BIO在项目中的使用场景是什么？相比NIO和AIO有什么不足？</h2><p>在项目中，我使用Java BIO来实现客户端和服务端的网络通信。BIO（Blocking I&#x2F;O）模式下，服务器端每接收到一个客户端连接请求，都会创建一个新的线程来处理该连接。在这个线程中，I&#x2F;O操作是阻塞的，意味着如果没有数据可读或可写，线程会一直等待。</p><p><strong>不足：</strong></p><ol><li><strong>性能问题：</strong> 在高并发情况下，每个客户端连接都需要一个独立的线程处理，这种模式会消耗大量的系统资源，且容易导致线程数量过多，增加了系统的上下文切换成本。</li><li><strong>可扩展性差：</strong> BIO模式不适合高并发场景，随着客户端数量的增加，服务器的性能会显著下降。</li></ol><p>相比之下，NIO（Non-blocking I&#x2F;O）和AIO（Asynchronous I&#x2F;O）能够更好地处理高并发连接，NIO通过使用单个线程处理多个连接，而AIO则进一步提升了I&#x2F;O操作的异步性和并发性能。</p><h1 id="SQL解析和语法树构建"><a href="#SQL解析和语法树构建" class="headerlink" title="SQL解析和语法树构建"></a>SQL解析和语法树构建</h1><h2 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h2><ol><li><p>如果缓存没有命中，数据库会进入解析器做两件事：词法分析、语法分析。</p></li><li><p>词法分析会通过字符串分割和比较识别出关键字，例如：select、from、where等等。</p></li><li><p>之后语法分析会根据我定义的语法类对象（Select类、From类、Where类……）构建一个语法树，这样方便后面模块获取 SQL 类型、表名、字段名、 where 条件等等。如果输入的sql语句语法不对，就会在这一阶段报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例：select语法树</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Select</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String tableName;</span><br><span class="line">    <span class="keyword">public</span> String[] fields;</span><br><span class="line">    <span class="keyword">public</span> Where where;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="缓存页"><a href="#缓存页" class="headerlink" title="缓存页"></a>缓存页</h2><ol><li><p>数据库会解析出 SQL 语句的第一个字段，看看是什么类型的语句，然后进入缓存里查找缓存数据。</p></li><li><p>查询缓存是以键值对的形式保存在内存中的，key 为 SQL 查询语句，value 为 SQL 语句查询的结果。如果命中就直接返回，反之继续往下走。</p><p>缓存的存储结构的设计：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> HashMap&lt;Long, T&gt; cache;                     <span class="comment">// 实际缓存的数据</span></span><br><span class="line"><span class="keyword">private</span> HashMap&lt;Long, Integer&gt; references;          <span class="comment">// 资源的引用个数</span></span><br><span class="line"><span class="keyword">private</span> HashMap&lt;Long, Boolean&gt; getting;             <span class="comment">// 正在被获取的资源</span></span><br><span class="line"><span class="comment">//维护了三个Map，查询时去cache里查，如果cache里有就返回，如果没有cache就去数据源里查，去查时往getting里放入数据对象，数据查出来后将数据放入cache中，将getting中的对象删掉，并将references计数+1，</span></span><br></pre></td></tr></table></figure><blockquote><p>缓存的设计：<a href="https://blog.csdn.net/qq_40856284/article/details/121646467">2. 引用计数缓存框架和共享内存数组</a></p><p>不使用LRU算法（因为资源驱逐不可控，上层模块无法感知），而是采用引用计数缓存框架，上层资源手动释放对资源的引用，确保资源的安全</p></blockquote></li></ol><p>?缓存的基本结构的设计：</p><p>?TODO</p><h2 id="执行器、优化器"><a href="#执行器、优化器" class="headerlink" title="执行器、优化器"></a>执行器、优化器</h2><ol><li>每条语句会经历三个阶段：</li><li>prepare 阶段，预处理阶段。检测表和字段是否存在，将 * 扩展为表上的所有列</li><li>optimize 阶段，优化阶段。会生成一个执行方案，即去查那张表、用什么索引（目前只实现了聚集索引，所以如果走非聚集索引的话，会全表扫描）</li><li>execute 阶段，执行阶段。根据执行计划执行语句，去操作数据文件、索引文件，最后将结果按照字符串的方式返回给客户端；</li></ol><h2 id="你是如何设计和实现简单的SQL解析器的？在解析过程中遇到的主要挑战是什么？"><a href="#你是如何设计和实现简单的SQL解析器的？在解析过程中遇到的主要挑战是什么？" class="headerlink" title="你是如何设计和实现简单的SQL解析器的？在解析过程中遇到的主要挑战是什么？"></a>你是如何设计和实现简单的SQL解析器的？在解析过程中遇到的主要挑战是什么？</h2><p>为了实现简单的SQL解析器，我首先定义了一个简单的SQL语法规则，并为每种SQL语句类型（如<code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>）设计了相应的解析方法。解析器通过词法分析（将SQL语句分解为标记）和语法分析（根据语法规则将标记组装为语法树）来理解和处理SQL语句。</p><p><strong>主要挑战：</strong></p><ol><li><strong>复杂的SQL语法：</strong> 即使是简单的SQL语法，也可能包含嵌套查询、别名、函数等复杂的元素，这些都会增加解析器的复杂性。</li><li><strong>错误处理：</strong> 在解析过程中如何识别并报告语法错误是一个难点，必须设计一个健壮的错误处理机制，以便用户能够及时发现并纠正SQL语句中的错误。</li></ol><h1 id="记录的设计"><a href="#记录的设计" class="headerlink" title="记录的设计"></a>记录的设计</h1><p>数据库中记录的单位是由接口<code>DataItem</code>和实现类<code>DataItemImpl</code>来实现的。<code>DataItemImpl</code>实现了对记录的操作。</p><p>一行记录的结构如下：</p><blockquote><p>[ValidFlag] [DataSize] [Data]<br>ValidFlag 1个字节，标识DataItem是否有效<br>DataSize  2个字节，标识Data部分的长度<br>Data         3个字节，数据</p></blockquote><h2 id="在实现数据持久化时，如何保证数据的一致性和持久性？"><a href="#在实现数据持久化时，如何保证数据的一致性和持久性？" class="headerlink" title="在实现数据持久化时，如何保证数据的一致性和持久性？"></a>在实现数据持久化时，如何保证数据的一致性和持久性？</h2><h2 id="你是如何设计数据库的数据结构和索引结构的？"><a href="#你是如何设计数据库的数据结构和索引结构的？" class="headerlink" title="你是如何设计数据库的数据结构和索引结构的？"></a>你是如何设计数据库的数据结构和索引结构的？</h2><p>记录的结构如上所示。</p><p>索引的结构分为叶子结点和非叶子结点：</p><ol><li><p>非叶子节点类<code>InternalNode</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;AbstractTreeNode&lt;K, V&gt;&gt; childrenNodes;  <span class="comment">// 孩子节点</span></span><br></pre></td></tr></table></figure></li><li><p>叶子节点类<code>LeafNode</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;K&gt; keys;         <span class="comment">// 叶子节点中的键，即主键索引值</span></span><br><span class="line"><span class="keyword">private</span> List&lt;V&gt; values;       <span class="comment">// 叶子节点中的值，即整行数据</span></span><br><span class="line"><span class="keyword">private</span> LeafNode&lt;K, V&gt; next;  <span class="comment">// 下一个叶子节点的指针</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="B-树索引是如何实现的？请详细描述一下创建索引的过程。"><a href="#B-树索引是如何实现的？请详细描述一下创建索引的过程。" class="headerlink" title="B+树索引是如何实现的？请详细描述一下创建索引的过程。"></a>B+树索引是如何实现的？请详细描述一下创建索引的过程。</h2><ol><li><p><strong>定义索引列</strong>：选择一个或多个适合创建索引的列。这些列通常是那些经常出现在<code>WHERE</code>子句中的列，或者是<code>JOIN</code>操作中用到的列。</p></li><li><p><strong>创建索引命令</strong>：在SQL中，可以通过<code>CREATE INDEX</code>语句来创建索引。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_age <span class="keyword">ON</span> student (age);</span><br><span class="line"><span class="keyword">CREATE</span> INDEX [idx_column_name] <span class="keyword">ON</span> [table_name] ([column_name]);</span><br></pre></td></tr></table></figure><p>这里<code>idx_column_name</code>是索引的名字，<code>table_name</code>是要应用索引的表名，<code>column_name</code>是被索引的列名。</p></li><li><p><strong>数据库管理系统构建索引</strong>：当执行完<code>CREATE INDEX</code>命令后，数据库管理系统会在后台开始构建索引。这个过程包括：</p><ul><li>遍历表中的每一行。</li><li>对于每行，提取出索引列的值。</li><li>按照B+树的方式插入这些键值对。如果树已满，则需要分裂节点以容纳新的键值对。</li></ul></li><li><p><strong>维护索引</strong>：一旦索引创建完成，每当表中的数据发生变化时（如INSERT、UPDATE、DELETE操作），数据库管理系统会自动更新索引，确保其与表数据保持一致。</p></li><li><p><strong>优化查询</strong>：当执行查询时，数据库管理系统会检查是否有可用的索引来加速查询处理。如果有合适的索引，它将使用索引来减少需要扫描的数据量。</p></li></ol><h2 id="在实现B-树索引时，你是如何处理索引的插入、删除和更新操作的？B-树相比其他树形结构有哪些优势？"><a href="#在实现B-树索引时，你是如何处理索引的插入、删除和更新操作的？B-树相比其他树形结构有哪些优势？" class="headerlink" title="在实现B+树索引时，你是如何处理索引的插入、删除和更新操作的？B+树相比其他树形结构有哪些优势？"></a>在实现B+树索引时，你是如何处理索引的插入、删除和更新操作的？B+树相比其他树形结构有哪些优势？</h2><p>在B+树索引中，插入、删除和更新操作都涉及到节点的分裂、合并和重新平衡：</p><ul><li><strong>插入：</strong> 如果插入的节点超过了B+树的最大容量，则会发生节点分裂，父节点可能会接收到新的中间节点。如果父节点也达到容量上限，则继续向上分裂，直到根节点。</li><li><strong>删除：</strong> 删除操作时，如果节点下的元素少于最小容量，则可能需要将其与相邻的兄弟节点合并，或从相邻节点借一个元素以维持B+树的平衡。</li><li><strong>更新：</strong> 更新操作类似于删除和插入，更新某个键值后，如果新键值改变了索引的顺序，可能会涉及节点的重组。</li></ul><p><strong>B+树的优势：</strong></p><ol><li><strong>节点分裂减少：</strong> B+树的内部节点仅存储索引值，不存储实际数据，因此树的分裂和合并操作比B树更少。</li><li><strong>范围查询高效：</strong> B+树的所有叶子节点通过指针相连，范围查询时可以顺序扫描叶子节点，而不需要回溯。</li><li><strong>磁盘I&#x2F;O友好：</strong> B+树的结构非常适合磁盘存储，因为它的节点大小可以与磁盘页大小匹配，减少磁盘I&#x2F;O操作。</li></ol><h2 id="数据的持久化是如何实现的？具体采用了哪些技术？"><a href="#数据的持久化是如何实现的？具体采用了哪些技术？" class="headerlink" title="数据的持久化是如何实现的？具体采用了哪些技术？"></a>数据的持久化是如何实现的？具体采用了哪些技术？</h2><p>采用了许多技术，例如：<strong>事务管理、日志记录、检查点、缓冲池、恢复机制</strong></p><p>记录的操作通过加锁实现了原子性。此外还通过redo log和undo log保证。</p><p>检查点（Checkpoint）机制用于定期将内存中的脏页（即已经被修改但还未写入磁盘的数据页）强制刷盘，并记录检查点的位置。检查点有助于减少在系统恢复期间需要处理的日志量。</p><p>此外，还有缓冲池（Buffer Pool）机制。缓冲池是数据库系统中用于缓存数据页的一个内存区域。当数据页被修改时，它们会被缓冲池管理器标记为“脏页”，并由缓冲池管理器决定何时将脏页写回到磁盘。</p><h1 id="日志的设计（可靠性设计）"><a href="#日志的设计（可靠性设计）" class="headerlink" title="日志的设计（可靠性设计）"></a>日志的设计（可靠性设计）</h1><h2 id="日志和恢复机制"><a href="#日志和恢复机制" class="headerlink" title="日志和恢复机制"></a>日志和恢复机制</h2><p><strong>WAL（Write-Ahead Logging）</strong>：在数据修改之前先写入日志，确保在系统故障时可以通过日志恢复数据。在进行插入、更新等数据库操作之前，系统会先将这些操作记录到日志中，这些日志通常存储在一个持久化的介质中，比如磁盘。当数据库发生崩溃或其他故障时，可以通过回放这些日志来恢复未完成的事务，确保数据的一致性和完整性。</p><p>具体来说，当事务开始时，系统会为该事务创建一个日志记录，记录下事务的操作内容。当事务提交时，日志记录会被标记为已完成。如果系统在操作过程中崩溃，数据库可以通过扫描日志文件，回滚未完成的事务或重做已完成但未提交的事务，从而恢复到故障前的一致状态。</p><p><strong>数据库日志文件（唯一）</strong>标准格式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[XChecksum] [Log1] [Log2] ... [LogN] [BadTail]</span><br></pre></td></tr></table></figure><blockquote><p>XChecksum 是后续所有日志计算的校验和，用于校验后续所有日志是否损坏<br>XChecksum 用于计算后续所有日志的Checksum，校验日志文件是否损坏<br>Log1 ~ LogN 是常规的日志数据<br>BadTail 是在数据库崩溃时，没有来得及写完的日志数据，BadTail 不一定存在</p></blockquote><p><strong>一条日志（大量）</strong>的格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Size] [Checksum] [Data]</span><br></pre></td></tr></table></figure><blockquote><p>Size：标识Data长度<br>Checksum：校验当前日志文件是否损坏<br>Data：日志数据</p></blockquote><p>日志文件操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向日志文件写入日志</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(<span class="type">byte</span>[] data)</span> &#123;</span><br><span class="line">    <span class="comment">// 将数据包裹成日志格式，得到二进制格式的日志</span></span><br><span class="line">    <span class="type">byte</span>[] checksum = Parser.int2Byte(calChecksum(<span class="number">0</span>, data));</span><br><span class="line">    <span class="type">byte</span>[] size = Parser.int2Byte(data.length);</span><br><span class="line">    <span class="type">byte</span>[] log = Bytes.concat(size, checksum, data);</span><br><span class="line">    <span class="comment">// 将日志写入日志文件</span></span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBuffer.wrap(log);</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fc.position(fc.size());</span><br><span class="line">        fc.write(buf);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        Panic.panic(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    updateXChecksum(log);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事务操作日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条日志</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] insertLog(<span class="type">long</span> xid, Page pg, <span class="type">byte</span>[] raw) &#123;</span><br><span class="line">    <span class="type">byte</span>[] logTypeRaw = &#123;LOG_TYPE_INSERT&#125;;</span><br><span class="line">    <span class="type">byte</span>[] xidRaw = Parser.long2Byte(xid);</span><br><span class="line">    <span class="type">byte</span>[] pgnoRaw = Parser.int2Byte(pg.getPageNumber());</span><br><span class="line">    <span class="type">byte</span>[] offsetRaw = Parser.short2Byte(PageX.getFSO(pg.getData()));</span><br><span class="line">    <span class="keyword">return</span> Bytes.concat(logTypeRaw, xidRaw, pgnoRaw, offsetRaw, raw);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新一条日志</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] updateLog(<span class="type">long</span> xid, DataItem di) &#123;</span><br><span class="line">    <span class="type">byte</span>[] logType = &#123;LOG_TYPE_UPDATE&#125;;</span><br><span class="line">    <span class="type">byte</span>[] xidRaw = Parser.long2Byte(xid);</span><br><span class="line">    <span class="type">byte</span>[] uidRaw = Parser.long2Byte(di.getUid());</span><br><span class="line">    <span class="type">byte</span>[] oldRaw = di.getOldRaw();</span><br><span class="line">    <span class="type">SubArray</span> <span class="variable">raw</span> <span class="operator">=</span> di.getRaw();</span><br><span class="line">    <span class="type">byte</span>[] newRaw = Arrays.copyOfRange(raw.raw, raw.start, raw.end);</span><br><span class="line">    <span class="keyword">return</span> Bytes.concat(logType, xidRaw, uidRaw, oldRaw, newRaw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何设计监控和日志记录系统来帮助诊断和调试？"><a href="#如何设计监控和日志记录系统来帮助诊断和调试？" class="headerlink" title="如何设计监控和日志记录系统来帮助诊断和调试？"></a>如何设计监控和日志记录系统来帮助诊断和调试？</h2><p>TODO</p><h2 id="重启故障恢复策略（Recover类）"><a href="#重启故障恢复策略（Recover类）" class="headerlink" title="重启故障恢复策略（Recover类）"></a>重启故障恢复策略（Recover类）</h2><ol><li>根据最大页号截断文件，丢弃损坏数据；<ul><li>读取日志文件的最大页号，根据最大页号截断文件，丢弃损坏数据</li></ul></li><li>执行重做操作，回滚已完成的事务；<ul><li>判断日志中的事务类型是插入还是更新：<ul><li>如果是插入的操作，则读取事务id、数据页编号、数据页偏移量、字节流；</li><li>如果是更新的操作，则读取事务id、数据页编号、数据页偏移量、修改前的的字节流、修改后的字节流。</li></ul></li><li>如果事务的状态是“已提交”或“已回滚”，则重做。</li><li>重做的具体操作：<ul><li>如果是插入的数据，则通过数据管理器，将字节流设为修改后的字节流，然后将到字节流写入到偏移量后面。</li><li>如果是更新的数据，则通过数据管理器，将字节流设为修改后的字节流，然后将到字节流写入到偏移量后面。</li></ul></li></ul></li><li>执行撤销操作，撤销未完成的事务；<ul><li>判断日志中的事务类型是插入还是更新：<ul><li>如果是插入的操作，则读取事务id、数据页编号、数据页偏移量、字节流；</li><li>如果是更新的操作，则读取事务id、数据页编号、数据页偏移量、修改前的的字节流、修改后的字节流。</li></ul></li><li>如果事务的状态是“活跃”，则回滚。</li><li>回滚的具体操作：<ul><li>如果是插入的数据，则通过数据管理器，将偏移量后面的字节流数据标记为invalid；</li><li>如果是更新的数据，则通过数据管理器，将字节流设为修改前的字节流，然后将到字节流写入到偏移量的后面。</li></ul></li></ul></li></ol><h2 id="数据库在故障重启后什么情况下会做重做日志？什么情况下会做回滚日志？"><a href="#数据库在故障重启后什么情况下会做重做日志？什么情况下会做回滚日志？" class="headerlink" title="数据库在故障重启后什么情况下会做重做日志？什么情况下会做回滚日志？"></a>数据库在故障重启后什么情况下会做重做日志？什么情况下会做回滚日志？</h2><h2 id="何时使用重做日志？"><a href="#何时使用重做日志？" class="headerlink" title="何时使用重做日志？"></a>何时使用重做日志？</h2><ul><li><strong>系统崩溃后的恢复</strong>：如果某个事务已经提交，但是它的<strong>修改还没有完全写入磁盘</strong>，那么在系统重启后会通过重做日志来重新执行这些事务的修改操作。</li></ul><h2 id="何时使用回滚日志？"><a href="#何时使用回滚日志？" class="headerlink" title="何时使用回滚日志？"></a>何时使用回滚日志？</h2><ul><li><strong>事务回滚</strong>：当一个事务因为某种原因（如遇到错误、用户手动回滚等）需要回滚时，数据库管理系统会使用回滚日志来撤销该事务所做的修改，将数据库恢复到事务开始前的状态。</li><li><strong>多版本并发控制（MVCC）</strong>：在支持多版本并发控制的数据库系统（如MySQL的InnoDB存储引擎）中，回滚日志还可以用于实现读取一致性视图，允许多个事务同时读取同一份数据的不同版本。</li></ul><blockquote><h2 id="重做日志的例子"><a href="#重做日志的例子" class="headerlink" title="重做日志的例子"></a>重做日志的例子</h2><p>假设事务 T1 修改了某一行数据，然后提交。如果在 T1 提交之后但其数据还未完全写入磁盘之前系统崩溃，那么在重启后，数据库管理系统会读取重做日志文件，找到 T1 的记录，并重新执行 T1 的修改操作，以确保事务 T1 的持久性。</p><h2 id="回滚日志的例子"><a href="#回滚日志的例子" class="headerlink" title="回滚日志的例子"></a>回滚日志的例子</h2><p>假设事务 T2 开始后修改了某一行数据，但在提交之前遇到了错误需要回滚。这时，数据库管理系统会读取回滚日志文件，找到 T2 修改前的数据状态，并将数据恢复到修改前的状态。</p></blockquote><h2 id="如何设计数据恢复机制，确保数据在意外中断后仍能正确恢复？"><a href="#如何设计数据恢复机制，确保数据在意外中断后仍能正确恢复？" class="headerlink" title="如何设计数据恢复机制，确保数据在意外中断后仍能正确恢复？"></a>如何设计数据恢复机制，确保数据在意外中断后仍能正确恢复？</h2><h2 id="数据库是否有容错机制？如何在出现故障时保证服务的连续性和数据一致性？"><a href="#数据库是否有容错机制？如何在出现故障时保证服务的连续性和数据一致性？" class="headerlink" title="数据库是否有容错机制？如何在出现故障时保证服务的连续性和数据一致性？"></a>数据库是否有容错机制？如何在出现故障时保证服务的连续性和数据一致性？</h2><p>TODO</p><h1 id="事务的设计与处理"><a href="#事务的设计与处理" class="headerlink" title="事务的设计与处理"></a>事务的设计与处理</h1><p>事务类，由版本控制器调用，每个事务对应一个Transaction对象</p><p><strong>每个事务类</strong>的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事务的唯一xid</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> xid;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务的隔离级别</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> level;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快照</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;Long, Boolean&gt; snapshot</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 错误信息</span></span><br><span class="line"><span class="keyword">public</span> Exception err;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否自动回滚</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> autoAborted;</span><br></pre></td></tr></table></figure><p><strong>事务控制器</strong>的设计：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超级事务，xid为0的事务永远为commited状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">SUPER_XID</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// XID文件头长度，记录了这个 XID 文件管理的事务的个数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LEN_XID_HEADER_LENGTH</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务文件的后缀</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">XID_SUFFIX</span> <span class="operator">=</span> <span class="string">&quot;.xid&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个事务的占用长度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">XID_FIELD_SIZE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务的三种状态</span></span><br><span class="line"><span class="comment"> * 0，active，正在进行，尚未结束</span></span><br><span class="line"><span class="comment"> * 1，committed，已提交</span></span><br><span class="line"><span class="comment"> * 2，aborted，已撤销（回滚）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// active，正在进行，尚未结束</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">FIELD_TRAN_ACTIVE</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 1，committed，已提交</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">FIELD_TRAN_COMMITTED</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 2，aborted，已撤销（回滚）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">FIELD_TRAN_ABORTED</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// xid的计数</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> xidCounter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Lock counterLock;</span><br><span class="line"><span class="keyword">private</span> RandomAccessFile file;</span><br><span class="line"><span class="keyword">private</span> FileChannel fc;</span><br></pre></td></tr></table></figure><h2 id="在事务处理中，你是如何实现事务的ACID特性的？"><a href="#在事务处理中，你是如何实现事务的ACID特性的？" class="headerlink" title="在事务处理中，你是如何实现事务的ACID特性的？"></a>在事务处理中，你是如何实现事务的ACID特性的？</h2><p><strong>原子性（Atomicity）</strong>：通过2PL和MVCC确保原子性，还通过redo log确保事务的修改可以被重做。</p><p><strong>一致性（Consistency）</strong>：在事务开始时检查事务是否满足一致性要求，即是否违反了数据库的完整性约束（如唯一性约束、外键约束等），并在整个事务执行过程中维持这些约束。</p><p><strong>隔离性（Isolation）</strong>：通过多种隔离级别MVCC来实现。</p><p><strong>持久性（Durability）</strong>：通过文件编程写入，如果在写入过程中系统发生崩溃，则通过使用redo log和checkpoint机制。</p><h2 id="在实现事务支持时，如何处理事务的提交和回滚？"><a href="#在实现事务支持时，如何处理事务的提交和回滚？" class="headerlink" title="在实现事务支持时，如何处理事务的提交和回滚？"></a>在实现事务支持时，如何处理事务的提交和回滚？</h2><p>提交（Commit）：当事务成功完成其所有操作并且决定提交时，需要将事务的更改永久地应用到数据库中。</p><ul><li>实现方法：<ul><li>将事务的状态从 <code>FIELD_TRAN_ACTIVE</code> 修改为 <code>FIELD_TRAN_COMMITTED</code>。</li><li>更新事务相关的数据结构（如版本链表、锁等）。</li><li>清理不再需要的旧版本。</li><li>如果使用了日志机制，确保所有相关的日志都已经持久化。</li></ul></li></ul><p>回滚（Rollback）：当事务执行过程中发生错误或决定不提交时，需要撤销事务所做的所有更改，使数据库恢复到事务开始前的状态。</p><ul><li>实现方法：<ul><li>将事务的状态从 <code>FIELD_TRAN_ACTIVE</code> 修改为 <code>FIELD_TRAN_ABORTED</code>。</li><li>释放事务持有的所有锁。</li><li>如果使用了 MVCC，清理事务的快照。</li><li>如果使用了日志机制，确保所有相关的日志都被正确处理。</li><li>清理临时数据结构。</li></ul></li></ul><h2 id="数据库故障重启，应该先做redo-log还是先做undo-log？"><a href="#数据库故障重启，应该先做redo-log还是先做undo-log？" class="headerlink" title="数据库故障重启，应该先做redo log还是先做undo log？"></a>数据库故障重启，应该先做redo log还是先做undo log？</h2><p>先处理重做日志（Redo Log），然后再处理回滚日志（Undo Log）。因为在故障恢复过程中，需要确保已经提交的事务的持久性（Durability），并且回滚未提交的事务。</p><h2 id="如何避免-Undo-Log-覆盖-Redo-Log-的操作"><a href="#如何避免-Undo-Log-覆盖-Redo-Log-的操作" class="headerlink" title="如何避免 Undo Log 覆盖 Redo Log 的操作"></a>如何避免 Undo Log 覆盖 Redo Log 的操作</h2><ol><li><strong>区分已提交和未提交的事务</strong>：<ul><li>在读取 Redo Log 记录时，会检查事务的状态。<strong>只有已提交的事务才会被重做。</strong></li><li>在读取 Undo Log 记录时，会检查事务的状态。<strong>只有未提交的事务才会被回滚。</strong></li></ul></li><li><strong>事务的版本控制</strong>：<ul><li>使用MVCC机制，通过事务的版本号区分不同事务的操作。在 MVCC 中，每个数据项都有一个版本号，记录了创建该版本的事务 ID 和版本的有效时间范围。</li><li>在恢复过程中，通过版本号来确定哪些版本是有效的，哪些版本需要被回滚。</li></ul></li></ol><h1 id="版本控制的实现与设计"><a href="#版本控制的实现与设计" class="headerlink" title="版本控制的实现与设计"></a>版本控制的实现与设计</h1><p>在介绍 MVCC 之前，首先明确<strong>记录</strong>和<strong>版本</strong>的概念。</p><p>DM 层向上层提供了数据项（Data Item）的概念，VM 通过管理所有的数据项，向上层提供了记录（Entry）的概念。</p><p>上层模块通过 VM 操作数据的最小单位，就是记录。VM 则在其内部，为每个记录，维护了多个版本（Version）。每当上层模块对某个记录进行修改时，VM 就会为这个记录创建一个新的版本。</p><h2 id="版本控制器的设计"><a href="#版本控制器的设计" class="headerlink" title="版本控制器的设计"></a>版本控制器的设计</h2><p>隔离级别的实现方式是通过<strong>版本控制器</strong>创建<strong>版本</strong>，每个版本根据事务的隔离级别在事务的生命周期中创建。</p><p>VM向上层抽象出entry，entry结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[XMIN]: XMIN 是创建该条记录（版本）的事务编号，</span><br><span class="line">[XMAX]: XMAX 则是删除该条记录（版本）的事务编号。当上层模块通过 VM 删除某个 Entry 时，实际的操作是设置其 XMAX 为某条事务的编号，由于设置了 XMAX，当后续再次尝试读取该 Entry 时，会因为寻找不到合适的版本而返回 not found 的错误。从而实现了事务间的隔离性。</span><br><span class="line">[data]: 数据</span><br></pre></td></tr></table></figure><h2 id="读已提交"><a href="#读已提交" class="headerlink" title="读已提交"></a>读已提交</h2><p>事务在读取数据时，只能读取已经提交事务产生的数据。如果一个记录的最新版本被另一个事务加锁，当另一个事务想要读取这条记录时，它将读取该记录的上一个已提交版本。最新的被加锁的版本，对于另一个事务来说，是不可见的。</p><p>为了避免这种情况，我们可以为每个版本维护了两个变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XMIN：创建该版本的事务编号，在版本创建时填写</span><br><span class="line">XMAX：删除该版本的事务编号，在版本被删除、有新版本出现时填写</span><br></pre></td></tr></table></figure><p>XMAX 这个变量解释了为什么 DM 层不提供删除操作，当想删除一个版本时，只需要设置 XMAX 就行了，这样的话这个版本对每一个 XMAX 之后的事务都是不可见的，也就等价于删除了。</p><h2 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h2><p>不可重复度，如果一个事务在两次读取同一数据项之间，另一个事务对该数据项进行了更新并提交，那么第一次读取和第二次读取可能会得到不同的结果。</p><p>为了避免这种情况，我们可以规定：事务只能读取它开始时, 就已经结束的那些事务产生的数据版本，即通过版本管理器，一个事务只能读取到与自己的xid一致的xmin的版本记录。</p><h2 id="解释一下两阶段锁协议（2PL）和MVCC如何工作？"><a href="#解释一下两阶段锁协议（2PL）和MVCC如何工作？" class="headerlink" title="解释一下两阶段锁协议（2PL）和MVCC如何工作？"></a>解释一下两阶段锁协议（2PL）和MVCC如何工作？</h2><p><strong>两阶段锁协议（2PL）：</strong> 两阶段锁协议是保证事务可串行化的一种方法。它分为两个阶段：</p><ol><li><strong>加锁阶段：</strong> 事务开始执行时，需要的所有锁都必须在这个阶段获得。这个阶段允许事务获取新锁，但不能释放已获得的锁。</li><li><strong>解锁阶段：</strong> 一旦事务释放了一把锁，就进入了解锁阶段，在此阶段不能再获得任何新的锁。</li></ol><p><strong>多版本并发控制（MVCC）：</strong> MVCC允许数据库在处理读写操作时无需加锁。它通过维护数据的多个版本，实现了对同一数据的并发读写。具体来说，数据库为每个事务创建一个快照，事务只会看到在它开始时已经提交的事务的结果。这样可以避免读写操作的阻塞，提升系统的并发性。</p><h2 id="为什么需要两阶段锁协议（2PL）和MVCC这两种机制？"><a href="#为什么需要两阶段锁协议（2PL）和MVCC这两种机制？" class="headerlink" title="为什么需要两阶段锁协议（2PL）和MVCC这两种机制？"></a>为什么需要两阶段锁协议（2PL）和MVCC这两种机制？</h2><ul><li><strong>2PL</strong> 确保了写操作的可串行化，避免了数据不一致。</li><li><strong>MVCC</strong> 提供了更高的并发性能，尤其是在读操作频繁的情况下。</li></ul><h2 id="如何实现多版本并发控制（MVCC）来保证并发事务的一致性？"><a href="#如何实现多版本并发控制（MVCC）来保证并发事务的一致性？" class="headerlink" title="如何实现多版本并发控制（MVCC）来保证并发事务的一致性？"></a>如何实现多版本并发控制（MVCC）来保证并发事务的一致性？</h2><h2 id="在高并发场景下，如何确保数据的一致性和隔离性？"><a href="#在高并发场景下，如何确保数据的一致性和隔离性？" class="headerlink" title="在高并发场景下，如何确保数据的一致性和隔离性？"></a>在高并发场景下，如何确保数据的一致性和隔离性？</h2><p>TODO</p><h2 id="如何解决版本跳跃？"><a href="#如何解决版本跳跃？" class="headerlink" title="如何解决版本跳跃？"></a><em>如何解决版本跳跃？</em></h2><p>版本跳跃指的是一个事务看到的数据版本与另一个事务看到的数据版本不同，即使它们都是合法的版本。</p><h2 id="版本跳跃产生的原因"><a href="#版本跳跃产生的原因" class="headerlink" title="版本跳跃产生的原因"></a><em>版本跳跃产生的原因</em></h2><p>版本跳跃可能发生在以下几种情况下：</p><ol><li><strong>事务开始时间不同</strong>：事务开始的时间不同，因此它们可能看到不同的版本。例如，事务T1在时间戳T开始，事务T2在时间戳T+1开始，它们可能看到不同版本的数据。</li><li><strong>读取操作与数据版本不匹配</strong>：在某些情况下，事务的读取操作可能与当前的数据版本不匹配，导致读取到的数据版本不是最新的或者不是预期的版本。</li><li><strong>并发控制策略不同</strong>：不同的MVCC实现可能有不同的并发控制策略，可能导致事务看到的数据版本不同。</li></ol><h2 id="解决版本跳跃的方法"><a href="#解决版本跳跃的方法" class="headerlink" title="解决版本跳跃的方法"></a><em>解决版本跳跃的方法</em></h2><p>解决版本跳跃的关键在于确保事务的一致性和隔离性。以下是一些常用的方法：</p><ol><li><strong>严格的时间戳分配</strong>：<ul><li>确保每个事务有一个严格递增的时间戳或事务ID。这样可以确保每个事务看到的数据版本是一致的。</li></ul></li><li><strong>使用快照隔离（Snapshot Isolation, SI）</strong>：<ul><li>快照隔离是MVCC中最常用的一种隔离级别，它可以防止版本跳跃。每个事务在其开始时创建一个快照，该快照包含了事务开始时的数据版本。事务在其执行期间只能看到该快照中的数据版本，这样可以避免版本跳跃。</li></ul></li><li><strong>事务开始时创建快照</strong>：<ul><li>在事务开始时创建一个快照，该快照包含了事务开始时所有可见的数据版本。事务在其执行期间只能看到该快照中的数据版本。</li></ul></li><li><strong>版本链管理</strong>：<ul><li>对每个数据项维护一个版本链，确保版本链中的每个版本都按照时间顺序排列。这样可以确保事务读取时能够找到正确版本的数据。</li></ul></li><li><strong>版本有效性检查</strong>：<ul><li>在读取数据版本时，检查版本的有效性，确保版本在事务的可见范围内。例如，事务T1只能看到在其开始时间之前提交的版本。</li></ul></li><li><strong>使用全局版本管理器</strong>：<ul><li>可以引入一个全局版本管理器来统一管理所有事务的版本信息，确保版本的一致性。</li></ul></li></ol><h2 id="MYDB的解决方案"><a href="#MYDB的解决方案" class="headerlink" title="MYDB的解决方案"></a><em>MYDB的解决方案</em></h2><p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409210112655.png" alt="image-20240921011219487"></p><h2 id="死锁检测（hard）"><a href="#死锁检测（hard）" class="headerlink" title="死锁检测（hard）"></a><em>死锁检测（hard）</em></h2><ol><li><strong>构建等待图（Wait-for Graph）</strong>：<ul><li>使用一个图结构来表示事务之间的等待关系。每个事务节点（XID）和资源节点（UID）都是图中的顶点。</li><li>如果事务 Ti 正在等待事务 Tj 持有的资源，则在图中添加一条从 Ti 到 Tj 的边。</li></ul></li><li><strong>检测环路</strong>：<ul><li>如果等待图中存在环路，则表明存在死锁。检测环路可以通过深度优先搜索（DFS）或其他图遍历算法来实现。</li><li>查找图中是否有环的算法也非常简单，就是一个深搜。思路：为每个节点设置一个访问戳，都初始化为 -1，随后遍历所有节点，以每个非 -1 的节点作为根进行深搜，并将深搜该连通图中遇到的所有节点都设置为同一个数字，不同的连通图数字不同。这样，如果在遍历某个图时，遇到了之前遍历过的节点，说明出现了环。</li></ul></li></ol><h1 id="—————实习（Legacy）—————"><a href="#—————实习（Legacy）—————" class="headerlink" title="—————实习（Legacy）—————"></a><div align="center">—————实习（Legacy）—————</div></h1><h1 id="实习的业务问题"><a href="#实习的业务问题" class="headerlink" title="实习的业务问题"></a>实习的业务问题</h1><p><strong>问题1：实现用户端短信登陆，将用户Session数据转移到Redis存储，实现分布式会话</strong></p><ol><li><p>请简述你如何设计并实现用户短信登录的流程，包括验证码的生成、发送和验证。</p><p>短信登录流程设计：我们首先生成一个唯一的验证码，并将其存储到Redis中，设置一定的过期时间。然后将这个验证码通过短信服务发送到用户的手机上。用户在前端输入验证码并提交后，我们与Redis中存储的验证码进行比对，如果一致则验证成功，创建用户会话并登录。</p></li><li><p>你为什么选择将Session数据转移到Redis存储？这样做的好处和潜在问题是什么？</p><p>Redis作为内存数据库，读写速度快，适合存储临时数据。将Session数据转移到Redis中，可以实现跨服务器共享Session，从而支持分布式会话。潜在问题在于，如果Redis服务故障，可能导致用户会话丢失，因此需要考虑Redis的高可用性。</p></li><li><p>在实现分布式会话时，你如何处理Session的一致性和失效问题？</p><p>使用Redis的分布式锁机制确保Session数据的一致性。同时，为每个Session设置一个过期时间，当Session过期后自动失效，防止长时间占用资源。</p></li></ol><p><strong>问题3：采用Kafka监听消息队列，完成延时发布文章功能</strong></p><ol><li><p>请解释你如何利用Kafka实现延时发布文章的功能？具体使用了Kafka的哪些特性？</p><p>当文章创建时，我们将其封装为消息并发送到Kafka的延时队列中，设置相应的延时时间。Kafka会在指定的时间后将消息发送到相应的主题，我们的消费者监听这个主题并处理消息，完成文章的发布。</p></li><li><p>当Kafka中的消息处理失败时，你如何保证消息不丢失？</p><p>配置了Kafka的消息持久化，确保即使Kafka服务重启，消息也不会丢失。同时，消费者在处理消息时，会进行确认操作，只有确认后的消息才会从Kafka中删除。如果处理失败，消息会重新进入队列等待再次处理。</p></li><li><p>Kafka在高并发场景下可能会遇到哪些挑战？你如何优化Kafka的性能？</p><p>在高并发场景下，通过增加Kafka的分区数、调整消费者的并发数以及优化消息的序列化方式等手段来提高Kafka的性能。</p></li></ol><p><strong>问题6：完成服务订单管理功能，包括创建订单、取消订单、删除订单、历史订单等</strong></p><ol><li><p>请描述一下你如何设计服务订单管理系统的数据库模型？</p><p>订单管理系统设计了包括订单表、订单项表、用户表等在内的数据库模型。订单表存储订单的基本信息，如订单号、用户ID、创建时间等；订单项表存储订单的详细信息，如商品名称、数量、价格等。通过外键关联，我们实现了订单与订单项之间的关联关系。</p></li><li><p>在处理订单状态变更（如取消、删除）时，你是如何保证数据的一致性和完整性的？</p><p>在处理订单状态变更时，我们使用了数据库的事务管理来确保数据的一致性。例如，在取消订单时，我们需要同时更新订单状态和订单项的状态，这两个操作必须作为一个整体来完成，要么全部成功，要么全部失败。通过使用Spring框架的事务管理功能，我们可以方便地实现这一点。</p></li><li><p>对于历史订单数据的查询和展示，你采用了哪些优化策略？</p><p>对于历史订单的查询和展示，我们采用了分页和索引优化的策略。首先，我们为订单表的关键字段建立了索引，以提高查询效率。其次，我们使用了分页查询的方式，每次只加载部分订单数据到内存中，降低了内存消耗。同时，我们还提供了多种查询条件，方便用户根据订单状态、时间等条件进行筛选和排序。</p></li></ol><p><strong>问题7：使用Redis优化用户端的查询接口，定时缓存热点服务数据，搭配布隆过滤器防止缓存穿透</strong></p><ol><li><p>你如何确定哪些数据是热点服务数据？定时缓存的策略是怎样的？</p><p>通过分析用户请求日志和系统访问数据，确定了哪些数据是热点服务数据。这些数据通常具有访问频率高、变化不频繁的特点。</p></li><li><p>在使用Redis缓存数据时，你如何保证数据的一致性和实时性？</p><p>使用了Redis的缓存机制来存储这些热点数据。通过定时任务，我们定期从数据库中加载最新的热点数据到Redis中，并设置适当的过期时间。这样，当用户请求这些数据时，可以直接从Redis中获取，提高了查询速度。</p></li><li><p>请解释一下布隆过滤器在防止缓存穿透中的作用和实现原理。</p><p>布隆过滤器可以快速地判断一个元素是否存在于某个集合中，而不需要实际存储这个元素。在查询Redis之前，我们先通过布隆过滤器判断数据是否可能存在。如果布隆过滤器判断数据不存在，则直接返回空结果，避免了对Redis的无效查询。</p></li></ol><p><strong>问题8：在优惠券分发接口中，使用Redisson+Lua实现一人一单，解决超卖问题</strong></p><ol><li><p>能否详细解释一下你如何使用Redisson和Lua实现一人一单的优惠券分发逻辑的？</p><p>使用了Redisson的分布式锁和Lua脚本来实现一人一单的优惠券分发逻辑。首先，我们使用Redisson的分布式锁来确保同一时间只有一个线程能够处理优惠券的分发。然后，我们编写了一个Lua脚本，该脚本在Redis中原子地执行优惠券的扣减和分配操作。通过这两个机制的结合，我们确保了每个用户只能领取一张优惠券。</p></li><li><p>在高并发场景下，你的优惠券分发系统如何保证性能和稳定性？</p><p>通过水平扩展Redis集群、优化Lua脚本的性能以及调整Redisson的配置参数等手段来提高系统的性能和稳定性。同时，我们还建立了监控和报警机制，及时发现并处理可能出现的性能瓶颈或异常。</p></li><li><p>如果在优惠券分发过程中出现了超卖问题，你如何检测和修复这个问题？</p><p>如果出现了超卖问题，我们会首先通过日志和监控数据定位问题的原因。然后，我们会根据具体情况采取回滚优惠券、补偿用户等措施来修复问题，并总结经验教训，完善系统的容错和恢复能力。</p></li></ol><h1 id="实习的基础知识"><a href="#实习的基础知识" class="headerlink" title="实习的基础知识"></a>实习的基础知识</h1><p><strong>问题1（短信登录与Redis存储Session）：</strong></p><ul><li><p>请简述Session在Web应用中的作用，以及为什么我们需要将其转移到Redis中？</p><p>Session在Web应用中的作用：Session在Web应用中用于跟踪用户的会话状态，存储用户在网站上的活动信息，如登录状态、购物车内容等。通过Session，网站能够在用户的不同请求之间保持状态，提供个性化的服务。</p><p>为什么将Session转移到Redis中：将Session转移到Redis中可以实现Session的共享和持久化。传统的Session存储在单个服务器的内存中，当服务器宕机或扩展时，Session数据容易丢失或不可访问。而Redis作为内存数据库，具有高性能和可靠性，可以实现Session的分布式存储和快速访问，支持水平扩展和容错。</p></li><li><p>Redis的数据结构有哪些？并说明每种数据结构的适用场景。</p><p>字符串（String）、哈希（Hash）、列表（List）、集合（Set）和有序集合（Sorted Set）。每种数据结构都有其特定的应用场景。例如，字符串可用于简单的键值存储；哈希可用于存储结构化数据；列表可用于实现队列或栈等数据结构；集合可用于存储不重复的元素；有序集合则支持元素的排序和范围查询。</p></li><li><p>你如何理解分布式会话，以及实现它需要注意哪些关键点？</p></li></ul><p><strong>问题3（Kafka延时队列）：</strong></p><ul><li><p>Kafka的核心概念有哪些？它们是如何协同工作的？</p><p>Kafka的核心概念：Kafka的核心概念包括Producer（生产者）、Broker（代理服务器）、Consumer（消费者）、Topic（主题）和Partition（分区）。Producer负责发送消息到Kafka；Broker负责存储和转发消息；Consumer从Kafka中消费消息；Topic是消息的类别；Partition是Topic的物理分区，用于实现消息的并行处理和存储。</p></li><li><p>请描述一下Kafka的延时队列是如何实现的，它适用于哪些场景？</p><p>Kafka延时队列的实现及适用场景：Kafka通过其延时消息功能实现延时队列。生产者可以设置消息的延时时间，使消息在指定的时间后才会被消费者消费。这适用于需要实现定时任务、订单超时处理、消息重试等场景。</p></li><li><p>在处理Kafka消息时，如何确保消息的可靠性和一致性？</p><p>确保消息的可靠性和一致性：为了确保消息的可靠性和一致性，Kafka采用了多种机制，如消息的持久化存储、消息的确认机制、消息的幂等性处理等。同时，可以通过设置消息的重复发送策略、消费者的容错处理等方式来进一步保障消息的可靠性。</p></li></ul><p><strong>问题6（服务订单管理）：</strong></p><ul><li><p>在设计订单管理系统时，通常需要考虑哪些核心功能和模块？</p><p>订单管理系统的核心功能包括订单创建、订单查询、订单修改、订单取消和订单统计等。对应的模块可以包括用户模块、商品模块、支付模块、物流模块等，这些模块共同协作以实现订单的全流程管理。</p></li><li><p>如何确保订单数据的完整性和一致性？</p><p>可以通过数据库的事务管理、数据校验、日志记录等方式来实现。同时，在设计系统时，需要考虑到并发控制和数据一致性的问题，避免出现数据冲突或不一致的情况。</p></li><li><p>在处理大量订单数据时，你通常采取哪些优化措施来提高性能？</p><p>在处理大量订单数据时，可以采用分页查询、索引优化、缓存机制等方式来提高性能。此外，还可以考虑使用分布式数据库或大数据处理技术来扩展系统的处理能力，应对高并发的场景。</p></li></ul><p><strong>问题7（Redis优化与缓存策略）：</strong></p><ul><li><p>请简述Redis在缓存场景中的优势以及常见使用方式。</p><p>优势主要体现在高性能、低延迟、支持多种数据结构以及丰富的操作命令上。它可以将热点数据存储在内存中，快速响应客户端的请求，减轻数据库的压力。</p></li><li><p>什么是缓存穿透、缓存雪崩和缓存击穿？如何预防和处理这些问题？</p><p>缓存穿透是指查询一个不存在的数据，由于缓存中也没有该数据，导致每次请求都要去数据库查询，造成数据库压力过大。可以通过布隆过滤器或缓存空对象等方式来预防。缓存雪崩是指大量缓存数据同时失效或过期，导致大量请求直接打到数据库上。可以通过设置缓存的过期时间分散一些、使用缓存预热和降级策略等方式来应对。缓存击穿是指热点数据缓存过期，此时大量并发请求会穿透缓存直接访问数据库。可以通过设置热点数据永不过期或使用互斥锁等方式来避免。</p></li><li><p>在设计缓存策略时，你通常如何权衡数据的实时性和缓存的命中率？</p><p>如果数据实时性要求较高，可以设置较短的缓存过期时间或采用实时更新的策略；</p><p>如果数据实时性要求不，可以设置较长的缓存过期时间或采用定时刷新的策略；</p><p>同时，可以通过监控和分析缓存的命中率和性能数据来优化缓存策略。</p></li></ul><p><strong>问题8（优惠券分发与防超卖策略）：</strong></p><ul><li><p>在实现优惠券分发功能时，如何确保每个用户只能领取一次优惠券？</p><p>可以在数据库中为每个用户设置一个优惠券领取状态字段，并在用户领取优惠券时更新该字段。同时，可以使用Redis的分布式锁或数据库的事务来保证操作的原子性，避免重复领取。</p></li><li><p>请解释超卖现象是如何发生的，以及如何通过技术手段来避免它？</p><p>可以采用乐观锁或悲观锁来控制并发操作，确保同一时间只有一个线程能够修改库存数量。此外，还可以使用Redis的Lua脚本来原子地执行库存扣减和优惠券发放操作，避免超卖的发生。</p></li><li><p>在高并发场景下，你通常如何设计优惠券分发系统来保证其性能和稳定性？</p><p>可以通过水平扩展服务器、使用高性能的数据库和缓存系统、优化代码和算法等方式来提高系统的处理能力。同时，需要建立监控和报警机制，及时发现和处理可能出现的性能瓶颈或异常。</p></li></ul><h1 id="实习的面试问题"><a href="#实习的面试问题" class="headerlink" title="实习的面试问题"></a>实习的面试问题</h1><ol><li><strong>ThreadLocal的用途和实现：</strong><br>ThreadLocal主要用于保存线程私有数据，避免线程间的数据共享和竞争。它可以在多线程环境下为每个线程提供独立的变量副本，从而避免锁竞争带来的性能损耗。实现上，ThreadLocal内部使用了一个ThreadLocalMap来存储每个线程的变量副本。这个Map的键是线程对象，值是线程的变量副本。当线程访问ThreadLocal变量时，ThreadLocal会通过当前线程作为键从Map中获取对应的变量副本；如果Map中不存在该键，则创建一个新的变量副本并存储到Map中。</li><li><strong>MySQL索引的设置与优化：</strong><br>MySQL索引的设置和优化是提高数据库查询性能的重要手段。在设置索引时，需要根据查询的条件和顺序选择合适的索引类型和列。例如，对于经常用于查询条件的列，可以创建单列索引或联合索引；对于需要覆盖查询结果的列，可以选择合适的覆盖索引。在优化索引时，可以通过分析查询语句、避免全表扫描、定期维护索引等方式来提高查询效率。</li><li><strong>Spring AOP原理：</strong><br>Spring AOP的原理主要基于动态代理和切面编程。动态代理是指在运行时动态地为目标对象创建代理对象，从而在不修改目标对象代码的情况下增强其功能。切面编程则是将跨多个类的通用逻辑（如日志记录、事务管理等）封装成切面，并将其织入到目标对象的执行流程中。Spring AOP通过代理类和切面类来实现这一功能，代理类负责拦截目标对象的方法调用，并根据切面类中的定义执行相应的逻辑。</li><li><strong>Spring动态代理的应用场景：</strong><br>Spring动态代理主要应用于需要为已有对象提供额外功能而又不修改其代码的场景。例如，我们可以在不修改业务逻辑代码的情况下为其添加日志记录、性能监控或事务管理等功能。通过Spring动态代理，我们可以灵活地扩展和增强已有对象的功能，提高代码的可维护性和可扩展性。</li><li><strong>MyBatis的一级缓存和二级缓存：</strong><br>MyBatis的一级缓存是SqlSession级别的缓存，它默认开启并自动管理。一级缓存用于存储同一个SqlSession中执行的相同SQL语句的结果集。当再次执行相同的SQL语句时，MyBatis会先从一级缓存中查找结果，如果找到则直接返回缓存结果，避免了重复查询数据库。二级缓存是Mapper级别的缓存，它可以被多个SqlSession共享。二级缓存用于存储跨SqlSession的相同SQL语句的结果集。通过合理配置和使用一、二级缓存，可以有效地提高MyBatis的查询性能。</li><li><strong>MyBatis的执行过程：</strong><br>MyBatis的执行过程大致如下：首先，MyBatis会根据配置文件和映射文件初始化SqlSessionFactory；然后，通过SqlSessionFactory创建SqlSession对象；接着，SqlSession根据Mapper接口或XML映射文件生成Mapper代理对象；当调用Mapper代理对象的方法时，MyBatis会根据方法名和参数生成SQL语句并执行；最后，MyBatis将执行结果映射成Java对象并返回给调用者。</li><li><strong>Redis缓存穿透：</strong><br>Redis缓存穿透是指查询一个不存在的数据，由于缓存中也没有该数据，导致每次请求都要去数据库中查询，从而给数据库带来压力。解决这个问题的方法之一是使用布隆过滤器来过滤掉不存在的请求，或者在缓存中存储一个空对象或特殊标记来表示该数据不存在。</li><li><strong>高频数据的存储：</strong><br>高频数据的存储需要考虑数据的实时性、并发性和持久化需求。常见的存储方案包括使用内存数据库（如Redis）来存储实时数据，通过负载均衡和分片技术来提高并发性能，同时定期将数据持久化到磁盘或分布式存储系统中以保证数据的可靠性。</li><li><strong>Redis和数据库的一致性问题：</strong><br>Redis和数据库的一致性问题主要发生在数据更新时。由于Redis是内存数据库，其数据更新速度通常比数据库快，因此可能导致Redis中的数据与数据库中的数据不一致。解决这个问题的方法之一是使用双写策略，即在更新数据库的同时也更新Redis；或者使用延时双删策略，即在删除数据库数据前先删除Redis中的数据，并在一定时间后再次删除Redis中的数据以防止脏读。此外，还可以使用分布式锁或事务来保证数据的一致性。</li><li><strong>Redis宕机数据丢失问题：</strong><br>Redis宕机时，如果未采取持久化措施，内存中的数据将会丢失。为了解决这个问题，Redis提供了两种持久化方式：RDB（快照）和AOF（追加文件）。RDB通过定期将内存中的数据生成快照并保存到磁盘上来实现持久化，而AOF则通过记录每次写操作到日志文件中来实现数据的持久化。在实际应用中，可以根据业务需求选择适合的持久化方式，并配置合理的持久化策略，以确保数据的可靠性。</li><li><strong>JVM垃圾回收算法：</strong><br>JVM中的垃圾回收算法主要包括标记-清除、标记-整理、复制和分代收集等。标记-清除算法通过标记出不再使用的对象并清除它们来回收内存空间；标记-整理算法在标记的基础上对存活对象进行整理，以便消除内存碎片；复制算法将可用内存划分为两个大小相等的区域，每次只使用其中一个区域，当该区域内存用完时，将存活对象复制到另一个区域并清空当前区域；分代收集算法则根据对象的生命周期将内存划分为不同的代，并针对不同的代采用不同的回收策略。</li><li><strong>OOM（OutOfMemoryError）问题的排查：</strong><br>当JVM出现OOM错误时，通常是因为堆内存不足。排查OOM问题可以从以下几个方面入手：首先，检查堆内存设置是否合理，是否需要根据应用需求调整堆内存大小；其次，分析堆内存中的对象占用情况，找出占用内存较大的对象；然后，根据对象类型和来源分析是否存在内存泄漏或对象生命周期过长的问题；最后，优化代码和配置，减少不必要的对象创建和内存占用。</li><li><strong>JVM分区：</strong><br>JVM的内存分区主要包括堆、栈、方法区、程序计数器和本地方法栈等。堆用于存储对象实例，是垃圾回收的主要区域；栈用于存储基本数据类型和对象引用，每个线程都有一个私有的栈；方法区用于存储已被虚拟机加载的类信息、常量、静态变量等；程序计数器用于记录当前线程执行的字节码位置；本地方法栈则为虚拟机执行本地方法提供服务。</li><li><strong>Linux命令杀死线程：</strong><br>在Linux中，线程是进程的一部分，因此没有直接杀死线程的命令。要杀死一个线程，实际上是杀死包含该线程的整个进程。可以使用<code>kill</code>命令来发送信号给进程，从而终止它。例如，使用<code>kill -9 &lt;进程ID&gt;</code>可以发送SIGKILL信号强制终止进程。要获取进程ID，可以使用<code>ps</code>命令结合其他选项来查找。</li><li><strong>一次IO操作的内核与用户态切换次数：</strong><br>一次完整的IO操作通常涉及多次内核态与用户态之间的切换。以读取文件为例，大致过程如下：首先，用户态程序发起读文件请求，进入内核态；内核态处理请求，将数据从磁盘读入内核缓冲区；然后，内核将数据从内核缓冲区拷贝到用户态缓冲区，并切换回用户态；最后，用户态程序处理数据。在这个过程中，至少发生了两次用户态与内核态之间的切换。</li><li><strong>参数：</strong><br>由于您没有具体指出是哪个方面的参数，我无法给出具体的回答。参数通常用于配置和控制程序或系统的行为。在不同的上下文中，参数可能包括命令行参数、配置文件中的设置、系统属性、环境变量等。如果您能提供更具体的上下文或需求，我将能够给出更准确的回答。</li></ol><h2 id="session、cookie和cache的区别是什么"><a href="#session、cookie和cache的区别是什么" class="headerlink" title="session、cookie和cache的区别是什么"></a>session、cookie和cache的区别是什么</h2><p>在Web应用程序中，session、cookie和cache是常用的存储数据的方式，它们在功能和用途上有所不同，其区别如下： </p><p>Session Session是服务器端存储数据的一种方式，它通过在服务器上存储一个唯一的标识符（Session ID）来跟踪用户的会话状态。</p><p>Session可以存储任何类型的数据，例如用户登录状态、购物车内容等。 Session的优点是数据的安全性高，不容易被恶意篡改和伪造，同时可以保存较大量的数据。缺点是需要在服务器上进行存储和管理，会占用服务器的资源，需要开发人员进行维护。 </p><p>Cookie Cookie是一种在客户端存储数据的方式，它通过在用户的浏览器上存储一个小型的文本文件来保存数据。</p><p>Cookie可以存储一些临时的用户数据，例如用户的偏好设置、购物车内容等。 优点是存储数据的速度快，不需要在服务器上进行存储和管理，缺点是数据容易被篡改和伪造，同时每个浏览器对于Cookie的数量和大小都有限制。 Cache Cache是一种缓存数据的方式，它可以将频繁访问的数据存储在内存中，以提高访问速度。Cache可以存储一些不经常更新的数据，例如静态文件、数据库查询结果等。 </p><p>Cache的优点是访问速度快，可以大大减少对数据库和其他数据源的访问次数，缺点是需要开发人员进行维护，以避免缓存数据的过期和失效。同时，缓存数据的大小也需要控制，避免占用过多的内存资源。 总的来说，Session、Cookie和Cache在功能和用途上有所不同，可以根据实际需要选择合适的存储方式。</p><h2 id="session怎么提高效率？"><a href="#session怎么提高效率？" class="headerlink" title="session怎么提高效率？"></a>session怎么提高效率？</h2><p>Session持久化：将session信息存储在持久化存储中，如数据库、文件系统或NoSQL存储中，这样可以避免将所有session信息存储在内存中，从而减少内存的使用量。</p><p> Session复制：将session信息从一台服务器复制到另一台服务器上，这样可以实现负载均衡，并将会话信息在多个服务器之间共享。 </p><p>Session失效策略：设置合理的session失效策略，例如根据用户活动时间、最大不活动时间等来决定session的失效时间，可以减少无用的session信息。</p><p> 集群：使用集群环境来分散请求和负载，这样可以使应用程序在多个服务器上运行，从而提高应用程序的性能和可扩展性。</p><p> 总之，为了提高会话管理的效率，需要使用合理的持久化和集群技术，并设置合理的会话失效策略，以避免会话信息的无限增长。</p>]]></content>
    
    
    <summary type="html">Java, all in one！</summary>
    
    
    
    <category term="学习" scheme="https://01petard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://01petard.github.io/tags/Java/"/>
    
    <category term="项目" scheme="https://01petard.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>My Java Guide - 缓存</title>
    <link href="https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20%E7%BC%93%E5%AD%98/"/>
    <id>https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20%E7%BC%93%E5%AD%98/</id>
    <published>2024-10-14T16:23:00.000Z</published>
    <updated>2024-10-14T16:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="——————–缓存总述——————–"><a href="#——————–缓存总述——————–" class="headerlink" title="——————–缓存总述——————–"></a><div align="center">——————–缓存总述——————–</div></h1><p>缓存是一种用于提高数据访问速度和系统性能的技术。通过将频繁访问的数据存储在内存或其他快速访问介质中，缓存可以显著减少数据访问的延迟和减轻后端系统的负载。</p><h1 id="常见的缓存类型"><a href="#常见的缓存类型" class="headerlink" title="常见的缓存类型"></a>常见的缓存类型</h1><h2 id="内存缓存"><a href="#内存缓存" class="headerlink" title="内存缓存"></a>内存缓存</h2><ul><li><strong>Redis</strong>：一个高性能的键值存储系统，支持多种数据结构（如字符串、哈希、列表、集合等），广泛用于缓存和会话管理。</li><li><strong>Memcached</strong>：一个高性能的分布式内存对象缓存系统，主要用于加速动态Web应用程序。</li></ul><h2 id="文件缓存"><a href="#文件缓存" class="headerlink" title="文件缓存"></a>文件缓存</h2><ul><li><strong>本地文件系统</strong>：将数据缓存到本地文件系统中，适用于静态内容的缓存。</li><li><strong>分布式文件系统</strong>：如 HDFS（Hadoop Distributed File System），用于大规模数据存储和缓存。</li></ul><h2 id="数据库缓存"><a href="#数据库缓存" class="headerlink" title="数据库缓存"></a>数据库缓存</h2><ul><li><strong>查询缓存</strong>：数据库系统内部的缓存机制，用于缓存查询结果，减少对磁盘的访问。</li><li><strong>结果集缓存</strong>：将查询结果缓存到内存中，减少对数据库的访问次数。</li></ul><h2 id="应用程序缓存"><a href="#应用程序缓存" class="headerlink" title="应用程序缓存"></a>应用程序缓存</h2><ul><li><strong>本地缓存</strong>：应用程序内部的缓存，通常使用 HashMap 或其他数据结构实现。</li><li><strong>分布式缓存</strong>：使用分布式缓存系统（如 Redis、Memcached）在多个应用程序实例之间共享缓存数据。</li></ul><h1 id="更新策略"><a href="#更新策略" class="headerlink" title="更新策略"></a>更新策略</h1><ul><li><strong>写穿策略</strong>：每次写操作都同时更新缓存和后端数据源。</li><li><strong>读穿策略</strong>：每次读操作都先检查缓存，如果未命中则从后端数据源获取数据并更新缓存。</li><li><strong>写回策略</strong>：写操作只更新缓存，定期或在某些条件下将缓存中的数据同步到后端数据源。</li><li><strong>刷新策略</strong>：定期或在某些条件下清空缓存，强制从后端数据源重新加载数据。</li></ul><h1 id="失效策略"><a href="#失效策略" class="headerlink" title="失效策略"></a>失效策略</h1><ul><li><strong>时间失效</strong>：设置缓存数据的有效时间，超过时间后自动失效。</li><li><strong>容量失效</strong>：当缓存达到最大容量时，使用 LRU（最近最少使用）、LFU（最不经常使用）等算法移除一些数据。</li><li><strong>显式失效</strong>：应用程序显式地从缓存中移除数据，通常在数据更新时使用。</li></ul><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ol><li><strong>网页缓存</strong>：缓存静态内容（如 HTML、CSS、JavaScript 文件），减少服务器负载，提高页面加载速度。</li><li><strong>数据库查询缓存</strong>：缓存数据库查询结果，减少对数据库的访问次数，提高查询性能。</li><li><strong>API 响应缓存</strong>：缓存 API 响应，减少后端服务的调用次数，提高 API 响应速度。</li><li><strong>会话缓存</strong>：缓存用户会话信息，提高用户会话管理的性能。</li><li><strong>全文搜索缓存</strong>：缓存搜索结果，提高搜索性能。</li></ol><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><ol><li><strong>合理设置缓存时间</strong>：根据数据的更新频率和重要性，合理设置缓存的有效时间。</li><li><strong>使用缓存预热</strong>：在系统启动或高峰期前，预先加载常用数据到缓存中。</li><li><strong>缓存降级</strong>：在缓存失效或不可用时，提供合理的降级策略，确保系统仍能正常运行。</li><li><strong>监控和告警</strong>：监控缓存系统的状态，设置告警机制，及时发现和处理问题。</li><li><strong>数据一致性管理</strong>：使用合理的缓存更新和失效策略，确保缓存数据和后端数据源的一致性。</li></ol><h1 id="优点、缺点"><a href="#优点、缺点" class="headerlink" title="优点、缺点"></a>优点、缺点</h1><ol><li><p><strong>提高性能</strong>：通过减少对后端系统的访问次数，提高数据访问速度和系统性能。</p></li><li><p><strong>减轻负载</strong>：减少后端系统的负载，提高系统的可用性和稳定性。</p></li><li><p><strong>提高用户体验</strong>：加快数据访问速度，提升用户的使用体验。</p></li><li><p><strong>节省资源</strong>：减少对计算和网络资源的消耗，降低运营成本。</p></li><li><p><strong>数据一致性问题</strong>：缓存数据和后端数据源之间的数据一致性难以保证，可能导致数据不一致的问题。</p></li><li><p><strong>复杂性增加</strong>：引入缓存机制会增加系统的复杂性，需要管理和维护缓存系统。</p></li><li><p><strong>内存占用</strong>：缓存数据占用内存，如果管理不当可能导致内存溢出等问题。</p></li><li><p><strong>缓存击穿</strong>：大量请求同时访问同一个缓存数据，导致缓存失效后的瞬间大量请求涌入后端系统，造成后端系统压力过大。</p></li></ol><h1 id="——————多级缓存架构——————"><a href="#——————多级缓存架构——————" class="headerlink" title="——————多级缓存架构——————"></a><div align="center">——————多级缓存架构——————</div></h1><p><strong>缓存是提升性能最直接的方法 多级缓存分为：客户端，应用层，服务层，数据层</strong></p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409291343412.png" alt="image-20240929134351240" style="zoom:80%;" /><h1 id="客户端缓存"><a href="#客户端缓存" class="headerlink" title="客户端缓存"></a>客户端缓存</h1><p><strong>客户端缓存</strong>：主要对浏览器的静态资源进行缓存 通过在浏览器设置Expires，时间段内以文件形式把图片保存在本地，减少多次请求静态资源带来的带宽损耗（解决并发手段） 。</p><p>例如：百度的logo，可以给logo设置一个过期时间，第一次请求时缓存logo图片和过期时间，之后每次请求时都查看过期时间，如果还没过期就从磁盘读取。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409291346791.png" alt="image-20240929134627949" style="zoom: 55%;" /><h1 id="应用层缓存"><a href="#应用层缓存" class="headerlink" title="应用层缓存"></a>应用层缓存</h1><h2 id="CDN（重量级）"><a href="#CDN（重量级）" class="headerlink" title="CDN（重量级）"></a>CDN（重量级）</h2><p>CDN内容分发网络是静态资源分发的主要技术手段，有效解决带宽集中占用以及数据分发问。</p><p>CDN是一项基础设施，一般由云服务厂商提供。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409291353093.png" alt="image-20240929134936325" style="zoom: 40%;" /><p><strong>CDN的核心技术</strong>： 根据请求访问DNS节点， 自动转发到就近CDN节点，检查资源是否被缓存，若已缓存则返回资源否则回源数据节点提取，并缓存到就近CDN节点，再由就近CDN节点进行返回。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409291354963.png" style="zoom:50%;" /><p><strong>CDN的使用</strong>（aliyun）：</p><p>响应头Expires和Cache-control的区别： </p><ol><li>均为通知浏览器进行文件缓存</li><li><code>Expires</code> 指在缓存的过期时间</li><li><code>Cache-control</code> 指缓存的有效期</li></ol><p>响应头的设置：<code>Expires</code> 设置时间，<code>Cache-Control</code> 设置时长。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409291359167.png" alt="image-20240929135902050" style="zoom:45%;" /><h2 id="Nginx（轻量级）"><a href="#Nginx（轻量级）" class="headerlink" title="Nginx（轻量级）"></a>Nginx（轻量级）</h2><p>Nginx对Tomcat集群做软负载均衡，提供高可用性。有静态资源缓存和压缩功能（在本地缓存文件）</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409291408454.png" alt="image-20240929140735084" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409291410414.png" alt="image-20240929140909820" style="zoom:50%;" /><h1 id="服务层缓存"><a href="#服务层缓存" class="headerlink" title="服务层缓存"></a>服务层缓存</h1><p>服务层缓存：进程内缓存和进程外缓存</p><ul><li>进程内缓存：在应用程序的内存中，数据运行时载入程序开辟的缓存，存储在应用程序进程内部，访问速度非常快，因为它不需要通过网络或其他进程间通信机制来访问数据。<ul><li>开源实现：<strong>HashMap、EhCache、Caffeine、Hibernate一二级缓存、Mybatis一二级缓存，SpringMVC页面缓存</strong></li></ul></li><li>进程外缓存：独立于应用程序运行，存储在应用程序进程之外的缓存系统，具备更好的持久性、更高的并发性和更好的伸缩性。进程外缓存可以跨越多个服务器，提供分布式的服务，从而支持更大规模的应用程序。<ul><li>开源实现：<strong>Redis、Memcached、Ignite、Hazelcast、Voldemort</strong></li></ul></li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409291412233.png" alt="image-20240929141145143" style="zoom:50%;" /><h1 id="数据层缓存"><a href="#数据层缓存" class="headerlink" title="数据层缓存"></a>数据层缓存</h1><p>第一种情况，缓存的数据是稳定的。例如：邮政编码、地域区块、归档数据……</p><p>第二种情况，瞬时可能会产生极高并发的场景。例如：股市开盘、商品秒杀……</p><p>第三种情况，一定程度上允许数据不一致。例如：网站公告……</p><p><em>一种数据同步方案：</em></p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409291543934.png" alt="image-20240929154329762" style="zoom:40%;" /><h1 id="———进程外缓存（SpringCache）———"><a href="#———进程外缓存（SpringCache）———" class="headerlink" title="———进程外缓存（SpringCache）———"></a><div align="center">———进程外缓存（SpringCache）———</div></h1><blockquote><p>只适合单体项目，遇到分布式，一碰就碎！纯FW！</p></blockquote><h1 id="SpringCache"><a href="#SpringCache" class="headerlink" title="SpringCache"></a>SpringCache</h1><p>Spring Cache 是 Spring 框架提供的一个抽象层，用于简化缓存的使用。它提供了一种声明式的方式，在方法调用时自动管理缓存。</p><p>特点：</p><ul><li><strong>声明式缓存</strong>：通过注解（如 <code>@Cacheable</code>、<code>@CachePut</code>、<code>@CacheEvict</code>）来管理缓存，无需手动编写缓存逻辑。</li><li><strong>多种缓存提供商支持</strong>：支持多种缓存提供商，如 Redis、Caffeine、EhCache 等。</li><li><strong>灵活的缓存策略</strong>：可以通过配置文件或注解来定义缓存策略，如缓存键生成、缓存失效等。</li></ul><h1 id="Caffeine"><a href="#Caffeine" class="headerlink" title="Caffeine"></a>Caffeine</h1><p>Caffeine 专注于本地缓存，继承了 Google Guava 缓存的优点，并进行了优化，提供了更好的性能和灵活性。</p><p>特点：</p><ul><li><strong>高性能</strong>：使用高效的并发数据结构和算法，提供极高的吞吐量和低延迟。</li><li><strong>自动内存管理</strong>：支持自动清除未使用的缓存项，避免内存泄漏。</li><li><strong>丰富的缓存策略</strong>：支持多种缓存策略，如 LRU（最近最少使用）、LFU（最不经常使用）、TTL（生存时间）等。</li></ul><h1 id="EhCache"><a href="#EhCache" class="headerlink" title="EhCache"></a>EhCache</h1><p>EhCache 支持本地缓存和分布式缓存，广泛应用于各种企业级应用中，提供高性能的缓存解决方案。</p><p>特点：</p><ul><li><strong>本地缓存</strong>：支持内存和磁盘存储，可以灵活配置缓存策略。</li><li><strong>分布式缓存</strong>：支持多种分布式缓存模式，如 RMI、JGroups、Terracotta 等。</li><li><strong>丰富的配置选项</strong>：提供详细的配置选项，如缓存大小、缓存过期时间、缓存策略等。</li><li><strong>集成广泛</strong>：可以与多种框架和工具集成，如 Spring、Hibernate、MyBatis 等。</li></ul><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><table><thead><tr><th align="center">特性&#x2F;功能</th><th align="center">Caffeine</th><th align="center">EhCache</th></tr></thead><tbody><tr><td align="center"><strong>类型</strong></td><td align="center">本地缓存</td><td align="center">本地缓存 + 分布式缓存</td></tr><tr><td align="center"><strong>缓存提供商</strong></td><td align="center">本地缓存</td><td align="center">本地缓存 + 分布式缓存</td></tr><tr><td align="center"><strong>性能</strong></td><td align="center">高性能</td><td align="center">高性能</td></tr><tr><td align="center"><strong>配置方式</strong></td><td align="center">代码 + 配置文件</td><td align="center">配置文件</td></tr><tr><td align="center"><strong>缓存策略</strong></td><td align="center">多种策略（LRU、LFU、TTL等）</td><td align="center">多种策略（LRU、LFU、TTL等）</td></tr><tr><td align="center"><strong>集成</strong></td><td align="center">易于与 Spring 集成</td><td align="center">广泛集成（Spring、Hibernate等）</td></tr><tr><td align="center"><strong>分布式支持</strong></td><td align="center">不支持分布式缓存</td><td align="center">支持多种分布式缓存模式</td></tr><tr><td align="center"><strong>内存管理</strong></td><td align="center">自动内存管理</td><td align="center">手动配置内存管理</td></tr></tbody></table><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><strong>Caffeine</strong>：高性能的本地缓存库，适合对性能要求较高的场景，特别是单机应用。</li><li><strong>EhCache</strong>：支持本地缓存和分布式缓存，适合需要分布式缓存支持的企业级应用。</li></ul><h1 id="————-进程内缓存（Redis）————"><a href="#————-进程内缓存（Redis）————" class="headerlink" title="————-进程内缓存（Redis）————-"></a><div align="center">————-进程内缓存（Redis）————-</div></h1><h1 id="缓存的使用场景"><a href="#缓存的使用场景" class="headerlink" title="缓存的使用场景"></a>缓存的使用场景</h1><p>缓存：穿透、击穿、雪崩、双写一致、持久化、数据过期策略，数据淘汰策略<br>分布式锁：setnx、redisson<br>消息队列、延迟队列</p><h1 id="常见数据类型的应用场景"><a href="#常见数据类型的应用场景" class="headerlink" title="常见数据类型的应用场景"></a>常见数据类型的应用场景</h1><ul><li><strong>String</strong> 类型的应用场景：缓存对象、常规计数、分布式锁、共享 session 信息等。</li><li><strong>List</strong> 类型的应用场景：消息队列（但是有两个问题：1. 生产者需要自行实现全局唯一 ID；2. 不能以消费组形式消费数据）等。</li><li><strong>Hash</strong> 类型：缓存对象、购物车等。</li><li><strong>Set</strong> 类型：聚合计算（并集、交集、差集）场景，比如点赞、共同关注、抽奖活动等。</li><li><strong>Zset</strong> 类型：排序场景，比如排行榜、电话和姓名排序等。</li></ul><p><em>Redis 后续版本又支持四种数据类型，它们的应用场景如下：</em></p><ul><li>BitMap（2.2 版新增）：二值状态统计的场景，比如签到、判断用户登陆状态、连续签到用户总数等；</li><li>HyperLogLog（2.8 版新增）：海量数据基数统计的场景，比如百万级网页 UV 计数等；</li><li>GEO（3.2 版新增）：存储地理位置信息的场景，比如滴滴叫车；</li><li>Stream（5.0 版新增）：消息队列，相比于基于 List 类型实现的消息队列，有这两个特有的特性：自动生成全局唯一消息ID，支持以消费组形式消费数据。</li></ul><h1 id="Redis-的I-x2F-O多路复用模型"><a href="#Redis-的I-x2F-O多路复用模型" class="headerlink" title="Redis 的I&#x2F;O多路复用模型"></a>Redis 的I&#x2F;O多路复用模型</h1><p>简单来说有以下几个原因：</p><ol><li>完全基于内存的，C语言编写</li><li>采用单线程，避免不必要的上下文切换可竞争条件</li><li>使用多路I&#x2F;O复用模型，非阻塞IO</li></ol><blockquote><p>例如：bgsave 和 bgrewriteaof  都是在<strong>后台</strong>执行操作，不影响主线程的正常使用，不会产生阻塞</p></blockquote><p>详细的说有以下几个原因</p><ul><li>Redis 的大部分操作<strong>都在内存中完成</strong>，并且采用了高效的数据结构，因此 Redis 瓶颈可能是机器的内存或者网络带宽，而并非 CPU，既然 CPU 不是瓶颈，那么自然就采用单线程的解决方案了；</li><li>Redis 采用单线程模型可以<strong>避免了多线程之间的竞争</strong>，省去了多线程切换带来的时间和性能上的开销，而且也不会导致死锁问题。</li><li>Redis 采用了<strong>I&#x2F;O 多路复用机制</strong>处理大量的客户端 Socket 请求，IO 多路复用机制是指一个线程处理多个 IO 流，就是我们经常听到的 select&#x2F;epoll 机制。简单来说，在 Redis 只运行单线程的情况下，该机制允许内核中，同时存在多个监听 Socket 和已连接 Socket。内核会一直监听这些 Socket 上的连接请求或数据请求。一旦有请求到达，就会交给 Redis 线程处理，这就实现了一个 Redis 线程处理多个 IO 流的效果。</li></ul><p><strong>I&#x2F;O多路复用</strong>是指利用单个线程来同时监听多个Socket ，并在某个Socket可读、可写时得到通知，从而避免无效的等待，充分利用CPU资源。目前的I&#x2F;O多路复用都是采用的epoll模式实现，它会在通知用户进程Socket就绪的同时，把已就绪的Socket写入用户空间，不需要挨个遍历Socket来判断是否就绪，提升了性能。</p><p><strong>I&#x2F;O多路复用模型</strong>是Redis的网络模型，它结合事件的处理器来应对多个Socket请求，比如，提供了连接应答处理器、命令回复处理器，命令请求处理器；</p><p>在Redis6.0之后，为了提升更好的性能，在命令回复处理器使用了多线程来处理回复事件，在命令请求处理器中，将命令的转换使用了多线程，增加命令转换速度，在命令执行的时候，依然是单线程</p><h1 id="Redis-的两种数据持久化"><a href="#Redis-的两种数据持久化" class="headerlink" title="Redis 的两种数据持久化"></a>Redis 的两种数据持久化</h1><ul><li><p>RDB（Redis Database Backup file：Redis数据备份文件）</p><p>RDB：是一个二进制的快照文件，它是把Redis内存存储的数据写到磁盘上，当Redis实例宕机恢复数据的时候，方便从RDB的快照文件中恢复数据</p><p>开启RDB：在redis.conf文件中找到，格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">save</span> <span class="number">900</span> <span class="number">1</span>     <span class="comment"># 900秒内，如果至少有1个key被修改，则执行bgsave </span></span><br><span class="line"><span class="string">save</span> <span class="number">300</span> <span class="number">10</span>    <span class="comment"># 原理同上</span></span><br><span class="line"><span class="string">save</span> <span class="number">60</span> <span class="number">10000</span>  <span class="comment"># 原理同上</span></span><br></pre></td></tr></table></figure><p>RDB执行原理：bgsave开始时会fork主进程得到子进程，子进程共享主进程的内存数据。完成fork后读取内存数据并写入 RDB 文件。</p></li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404072145797.png" alt="image-20240407214533706" style="zoom:50%;" /><ul><li><p>AOF（Append Only File：追加文件）</p><p>AOF：Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件</p><p>开启AOF：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启AOF功能，默认是no</span></span><br><span class="line"><span class="string">appendonly</span> <span class="literal">yes</span></span><br><span class="line"><span class="comment"># AOF文件的名称</span></span><br><span class="line"><span class="string">appendfilename</span> <span class="string">&quot;appendonly.aof&quot;</span></span><br></pre></td></tr></table></figure><p>修改AOF的记录频率：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示每执行一次写命令，立即记录到AOF文件</span></span><br><span class="line"><span class="string">appendfsync</span> <span class="string">always</span> </span><br><span class="line"><span class="comment"># 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案</span></span><br><span class="line"><span class="string">appendfsync</span> <span class="string">everysec</span> </span><br><span class="line"><span class="comment"># 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span></span><br><span class="line"><span class="string">appendfsync</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>配置项</strong></th><th><strong>刷盘时机</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td>always</td><td>同步刷盘</td><td>可靠性高，几乎不丢数据</td><td>性能影响大</td></tr><tr><td>everysec</td><td>每秒刷盘</td><td>性能适中</td><td>最多丢失1秒数据</td></tr><tr><td>no</td><td>操作系统控制</td><td>性能最好</td><td>可靠性较差，可能丢失大量数据</td></tr></tbody></table><p>修改AOF的自动去重写阈值：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示每执行一次写命令，立即记录到AOF文件</span></span><br><span class="line"><span class="string">appendfsync</span> <span class="string">always</span> </span><br><span class="line"><span class="comment"># 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案</span></span><br><span class="line"><span class="string">appendfsync</span> <span class="string">everysec</span> </span><br><span class="line"><span class="comment"># 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span></span><br><span class="line"><span class="string">appendfsync</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure></li><li><p>RDB与AOF对比：</p><table><thead><tr><th>** **</th><th><strong>RDB</strong></th><th><strong>AOF</strong></th></tr></thead><tbody><tr><td>持久化方式</td><td>定时对整个内存做快照</td><td>记录每一次执行的命令</td></tr><tr><td>数据完整性</td><td>不完整，两次备份之间会丢失</td><td>相对完整，取决于刷盘策略</td></tr><tr><td>文件大小</td><td>会有压缩，文件体积小</td><td>记录命令，文件体积很大</td></tr><tr><td>宕机恢复速度</td><td>很快</td><td>慢</td></tr><tr><td>数据恢复优先级</td><td>低，因为数据完整性不如AOF</td><td>高，因为数据完整性更高</td></tr><tr><td>系统资源占用</td><td>高，大量CPU和内存消耗</td><td>低，主要是磁盘IO资源但AOF重写时会占用大量CPU和内存资源</td></tr><tr><td>使用场景</td><td>可以容忍数分钟的数据丢失，追求更快的启动速度</td><td>对数据安全性要求较高常见</td></tr></tbody></table></li></ul><h1 id="Redis-的-Pipeline-功能是什么？"><a href="#Redis-的-Pipeline-功能是什么？" class="headerlink" title="Redis 的 Pipeline 功能是什么？"></a>Redis 的 Pipeline 功能是什么？</h1><p>pipeline（管道）使得客户端可以一次性将要执行的多条命令封装成块一起发送给服务端</p><p><strong>优点</strong>：</p><ol><li><strong>减少网络往返次数</strong>：<ul><li>Pipeline 可以将多次网络往返减少为一次，显著提高了执行效率。</li></ul></li><li><strong>提高吞吐量</strong>：<ul><li>对于批量操作，使用 Pipeline 可以显著提高吞吐量，尤其是在高延迟网络环境中。</li></ul></li><li><strong>简化代码逻辑</strong>：<ul><li>对于批量操作，使用 Pipeline 可以简化客户端代码，避免频繁地打开和关闭连接。</li></ul></li></ol><h1 id="缓存的常见问题"><a href="#缓存的常见问题" class="headerlink" title="缓存的常见问题"></a>缓存的常见问题</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p><strong>缓存穿透</strong>：查询一个不存在的数据，mysql查询不到数据也不会直接写入缓存，就会导致每次请求都查数据库</p><p><strong>解决方案</strong>：</p><ul><li>缓存空数据，查询返回的数据为空，仍把这个空结果进行缓存（简单，但是消耗内存，且可能会发生不一致的问题）</li><li>布隆过滤器（内存占用较少，没有多余key，但是实现复杂，存在误判）</li></ul><p><strong>布隆过滤器</strong>原理：布隆过滤器是一个以（bit）位为单位的很长的数组，数组中每个单元只能存储二进制数0或1。当一个key来了之后经过3次hash计算，模于数组长度找到数据的下标然后把数组中原来的0改为1，这样一来，三个数组的位置就能标明一个key的存在。</p><p><strong>布隆过滤器在项目中的使用流程</strong>：</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202408261457059.png" alt="image-20240826145725870" style="zoom: 40%;" /><p>如果数据被删除了怎么办？1). 定时异步重建布隆过滤器；2). 换用“计数型布隆过滤器”</p><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p><strong>缓存击穿</strong>：key过期的时候，恰好这时间点对这个key有大量的并发请求过来，这些并发的请求可能会瞬间把DB压垮</p><p><strong>解决方案</strong>：</p><ul><li>互斥锁（强一致性，但是性能差）</li><li>逻辑过期（高可用性、性能优，但是有一致性问题）</li></ul><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404072123362.png" alt="image-20240407212348197" style="zoom: 50%;" /><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p><strong>缓存雪崩</strong>：是指在同一时段大量的缓存key同时效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p><strong>解决方案</strong>：</p><ul><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性（哨兵模式、集群模式）</li><li>给缓存业务添加降级限流策略（ngxin或spring cloud gateway）</li><li>给业务添加多级缓存（Guava或Caffeine）</li></ul><h2 id="大Key问题"><a href="#大Key问题" class="headerlink" title="大Key问题"></a>大Key问题</h2><blockquote><p>什么是 大 key？</p></blockquote><ul><li>String 类型的值大于 10 KB；</li><li>Hash、List、Set、ZSet 类型的元素的个数超过 5000个；</li></ul><blockquote><p>大 key 带来的问题</p></blockquote><ul><li><strong>客户端超时阻塞</strong>。由于 Redis 执行命令是单线程处理，然后在操作大 key 时会比较耗时，那么就会阻塞 Redis，从客户端这一视角看，就是很久很久都没有响应。</li><li><strong>引发网络阻塞</strong>。每次获取大 key 产生的网络流量较大，如果一个 key 的大小是 1 MB，每秒访问量为 1000，那么每秒会产生 1000MB 的流量，这对于普通千兆网卡的服务器来说是灾难性的。</li><li><strong>阻塞工作线程</strong>。如果使用 del 删除大 key 时，会阻塞工作线程，这样就没办法处理后续的命令。</li><li><strong>内存分布不均</strong>。集群模型在 slot 分片均匀情况下，会出现数据和查询倾斜情况，部分有大 key 的 Redis 节点占用内存多，QPS 也会比较大。</li></ul><blockquote><p><em>如何找到大 key ？</em></p></blockquote><p><em><strong>1、–bigkeys 查找大key</strong></em></p><p>可以通过 redis-cli –bigkeys 命令查找大 key：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">--bigkeys</span><br></pre></td></tr></table></figure><p>使用的时候注意事项：</p><ul><li>最好选择在从节点上执行该命令。因为主节点上执行时，会阻塞主节点；</li><li>如果没有从节点，那么可以选择在 Redis 实例业务压力的低峰阶段进行扫描查询，以免影响到实例的正常运行；或者可以使用 -i 参数控制扫描间隔，避免长时间扫描降低 Redis 实例的性能。</li></ul><p>该方式的不足之处：</p><ul><li>这个方法只能返回每种类型中最大的那个 bigkey，无法得到大小排在前 N 位的 bigkey；</li><li>对于集合类型来说，这个方法只统计集合元素个数的多少，而不是实际占用的内存量。但是，一个集合中的元素个数多，并不一定占用的内存就多。因为，有可能每个元素占用的内存很小，这样的话，即使元素个数有很多，总内存开销也不大；</li></ul><p><em><strong>2、使用 SCAN 命令查找大 key</strong></em></p><p>使用 SCAN 命令对数据库扫描，然后用 TYPE 命令获取返回的每一个 key 的类型。</p><p>对于 String 类型，可以直接使用 STRLEN 命令获取字符串的长度，也就是占用的内存空间字节数。</p><p>对于集合类型来说，有两种方法可以获得它占用的内存大小：</p><ul><li>如果能够预先从业务层知道集合元素的平均大小，那么，可以使用下面的命令获取集合元素的个数，然后乘以集合元素的平均大小，这样就能获得集合占用的内存大小了。List 类型：<code>LLEN</code> 命令；Hash 类型：<code>HLEN</code> 命令；Set 类型：<code>SCARD</code> 命令；Sorted Set 类型：<code>ZCARD</code> 命令；</li><li>如果不能提前知道写入集合的元素大小，可以使用 <code>MEMORY USAGE</code> 命令（需要 Redis 4.0 及以上版本），查询一个键值对占用的内存空间。</li></ul><p><em><strong>3、使用 RdbTools 工具查找大 key</strong></em></p><p>使用 RdbTools 第三方开源工具，可以用来解析 Redis 快照（RDB）文件，找到其中的大 key。</p><p>比如，下面这条命令，将大于 10 kb 的  key  输出到一个表格文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdb dump.rdb -c memory --bytes 10240 -f redis.csv</span><br></pre></td></tr></table></figure><h1 id="数据一致性问题"><a href="#数据一致性问题" class="headerlink" title="数据一致性问题"></a>数据一致性问题</h1><h2 id="先删除缓存，还是先修改数据库？"><a href="#先删除缓存，还是先修改数据库？" class="headerlink" title="先删除缓存，还是先修改数据库？"></a>先删除缓存，还是先修改数据库？</h2><ul><li><p><strong>先修改数据库，再删除缓存</strong></p><blockquote><ol><li><strong>原子性</strong>：数据库操作通常是原子的，这意味着它可以作为一个单一的工作单元执行，要么完全成功，要么完全失败。因此，先修改数据库可以确保数据的一致性。</li><li><strong>降低脏读的风险</strong>：如果在修改数据库之前删除了缓存，那么在缓存被重新填充之前，其他请求可能会读取到旧的（或脏）数据。</li><li><strong>简化逻辑</strong>：通常，在修改数据库后，删除缓存是一个简单的操作，因为缓存中的条目可以通过其键来直接定位。</li></ol></blockquote></li><li><p><strong>先删除缓存，再修改数据库，再删除一遍缓存</strong></p><blockquote><ol><li><strong>降低延迟</strong>：在某些场景中，先删除缓存可以减少缓存与数据库之间的数据不一致时间，因为一旦缓存被删除，后续请求将直接从数据库读取数据。</li><li><strong>避免并发问题</strong>（一致性）：在某些高并发的场景下，如果先修改数据库再删除缓存，可能会出现一个请求A修改数据库但还未删除缓存，此时另一个请求B读取到旧的缓存数据并基于旧数据进行了某些操作，然后请求A删除了缓存，此时如果请求B的数据操作依赖于最新的数据库数据，就可能出现问题。</li></ol></blockquote></li></ul><h2 id="数据一致性的组件、设计"><a href="#数据一致性的组件、设计" class="headerlink" title="数据一致性的组件、设计"></a>数据一致性的组件、设计</h2><p><strong>组件</strong>：</p><ul><li>使用<strong>Canal</strong>实现数据同步：不更改业务代码，部署一个Canal服务。Canal服务把自己伪装成MySQL的一个从节点，当MySQL数据更新以后，Canal会读取bin log数据，然后在通过Canal的客户端获取到数据，更新缓存即可。</li><li>采用<strong>Redisson</strong>实现读写锁，在读的时候添加<strong>共享锁</strong>，可以保证共享读操作，互斥读写操作。当更新数据的时候，添加<strong>排他锁</strong>，互斥读写和读操作，确保在写数据的避免读脏数据。</li></ul><p><strong>设计</strong>：</p><ol><li><strong>同步双写</strong>：实时性较好，实现简单，但是需要改造大量程序。</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202408261246461.png" alt="image-20240826124656414" style="zoom:40%;" /><ol start="2"><li><strong>基于MQ异步多写</strong>：适合分布式场景，耦合低，延迟取决于MQ的消费速度。</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202408261248812.png" alt="image-20240826124848734" style="zoom:40%;" /><ol start="3"><li><strong>定时任务</strong>：效率最高，但是延迟最高。需要业务表中设计一个last-update字段。</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202408261250432.png" alt="image-20240826125021381" style="zoom:40%;" /><ol start="4"><li><strong>闪电缓存</strong>：实现最简单，不需要对缓存进行管理，但会加大数据库的压力。</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410121238743.png" alt="image-20240826125357267" style="zoom:40%;" /><ol start="5"><li><strong>binlog监听</strong>：让Flink-CDC伪装成slave，通过监听数据库二进制日志（Binlog）来实现对缓存的同步更新。</li></ol><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202408261246944.png" alt="image-20240826124629849" style="zoom:40%;" /><h1 id="数据删除策略"><a href="#数据删除策略" class="headerlink" title="数据删除策略"></a>数据删除策略</h1><ul><li><p><strong>惰性删除</strong>，在设置该key过期时间后，我们不去管它，当需要该key时，我们在检查其是否过期，如果过期，我们就删掉它，反之返回该key。</p></li><li><p><strong>定期删除</strong>，就是说每隔一段时间，我们就对一些key进行检查，删除里面过期的key。</p><p>定期清理的两种模式：</p><ul><li>SLOW模式是定时任务，执行频率默认为10hz，每次不超过25ms，以通过修改配置文件redis.conf 的 <strong>hz</strong> 选项来调整这个次数。</li><li>FAST模式执行频率不固定，每次事件循环会尝试执行，但两次间隔不低于2ms，每次耗时不超过1ms。</li></ul></li></ul><h1 id="数据淘汰策略"><a href="#数据淘汰策略" class="headerlink" title="数据淘汰策略"></a>数据淘汰策略</h1><ul><li>noeviction(默认)： 不淘汰任何key，但是内存满时不允许写入新数据。</li><li>volatile-ttl： 对设置了TTL的key，比较key的剩余TTL值，TTL越小越先被淘汰。</li><li>allkeys-random：对全体key ，随机进行淘汰。</li><li>volatile-random：对设置了TTL的key ，随机进行淘汰。</li><li><strong>allkeys-lru</strong>： 对全体key，基于LRU算法进行淘汰</li><li><strong>volatile-lru</strong>： 对设置了TTL的key，基于LRU算法进行淘汰</li><li>allkeys-lfu： 对全体key，基于LFU算法进行淘汰</li><li>volatile-lfu： 对设置了TTL的key，基于LFU算法进行淘汰</li></ul><p>LRU(Least Recently Used)：最少最近使用，用当前时间减去最后一次访问时间，这个值越大则淘汰优先级越高。</p><p>LFU(Least Frequently Used)：最少频率使用。会统计每个key的访问频率，值越小淘汰优先级越高</p><p><strong>数据淘汰策略-使用建议：</strong></p><ol><li>优先使用 <strong>allkeys-lru</strong> 策略。充分利用 LRU 算法的优势，把最近最常访问的数据留在缓存中。如果业务有明显的冷热数据区分，建议使用。</li><li>如果业务中数据访问频率差别不大，没有明显冷热数据区分，建议使用 <strong>allkeys-random</strong> ，随机选择淘汰。</li><li>如果业务中有置顶的需求，可以使用 <strong>volatile-lru</strong> 策略，同时置顶数据不设置过期时间，这些数据就一直不被删除，会淘汰其他设置过期时间的数据。</li><li>如果业务中有短时高频访问的数据，可以使用 <strong>allkeys-lfu</strong> 或 <strong>volatile-lfu</strong> 策略。</li></ol><p><strong>保证热点数据</strong>可以使用 <strong>allkeys-lru</strong> （挑选最近最少使用的数据淘汰）淘汰策略，那留下来的都是经常访问的热点数据</p><h1 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h1><ul><li><strong>Cache Aside（旁路缓存）策略</strong>；</li><li><em>Read&#x2F;Write Through（读穿 &#x2F; 写穿）策略；</em>（仅存在于理论中）</li><li><em>Write Back（写回）策略；（仅存在于理论中）</em></li></ul><p>实际开发中，Redis 和 MySQL 的更新策略用的是 <strong>Cache Aside</strong>，另外两种策略应用不了。</p><h2 id="Cache-Aside（旁路缓存）策略"><a href="#Cache-Aside（旁路缓存）策略" class="headerlink" title="Cache Aside（旁路缓存）策略"></a>Cache Aside（旁路缓存）策略</h2><p>Cache Aside（旁路缓存）策略是最常用的，应用程序直接与「数据库、缓存」交互，并负责对缓存的维护，该策略又可以细分为「读策略」和「写策略」。</p><img src="https://cdn.xiaolincoding.com//mysql/other/6e3db3ba2f829ddc14237f5c7c00e7ce-20230309232338149.png" alt="img" style="zoom:80%;" /><h2 id="Read-x2F-Write-Through（读穿-x2F-写穿）策略"><a href="#Read-x2F-Write-Through（读穿-x2F-写穿）策略" class="headerlink" title="Read&#x2F;Write Through（读穿 &#x2F; 写穿）策略"></a><em>Read&#x2F;Write Through（读穿 &#x2F; 写穿）策略</em></h2><p>Read&#x2F;Write Through（读穿 &#x2F; 写穿）策略原则是应用程序只和缓存交互，不再和数据库交互，而是由缓存和数据库交互，相当于更新数据库的操作由缓存自己代理了。</p><p><em><strong>1、Read Through 策略</strong></em></p><p>先查询缓存中数据是否存在，如果存在则直接返回，如果不存在，则由缓存组件负责从数据库查询数据，并将结果写入到缓存组件，最后缓存组件将数据返回给应用。</p><p><em><strong>2、Write Through 策略</strong></em></p><p>当有数据更新的时候，先查询要写入的数据在缓存中是否已经存在：</p><ul><li>如果缓存中数据已经存在，则更新缓存中的数据，并且由缓存组件同步更新到数据库中，然后缓存组件告知应用程序更新完成。</li><li>如果缓存中数据不存在，直接更新数据库，然后返回；</li></ul><p>下面是 Read Through&#x2F;Write Through 策略的示意图：</p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E5%85%AB%E8%82%A1%E6%96%87/WriteThrough.jpg" alt="img" style="zoom: 50%;" /><p>Read Through&#x2F;Write Through 策略的特点是由缓存节点而非应用程序来和数据库打交道，在我们开发过程中相比 Cache Aside 策略要少见一些，原因是我们经常使用的分布式缓存组件，无论是 Memcached 还是 Redis 都不提供写入数据库和自动加载数据库中的数据的功能。而我们在使用本地缓存的时候可以考虑使用这种策略。</p><h2 id="Write-Back（写回）策略"><a href="#Write-Back（写回）策略" class="headerlink" title="Write Back（写回）策略"></a><em>Write Back（写回）策略</em></h2><p>Write Back（写回）策略在更新数据的时候，只更新缓存，同时将缓存数据设置为脏的，然后立马返回，并不会更新数据库。对于数据库的更新，会通过批量异步更新的方式进行。</p><p>实际上，Write Back（写回）策略也不能应用到我们常用的数据库和缓存的场景中，因为 Redis 并没有异步更新数据库的功能。</p><p>Write Back 是计算机体系结构中的设计，比如 CPU 的缓存、操作系统中文件系统的缓存都采用了 Write Back（写回）策略。</p><p><strong>Write Back 策略特别适合写多的场景</strong>，因为发生写操作的时候， 只需要更新缓存，就立马返回了。比如，写文件的时候，实际上是写入到文件系统的缓存就返回了，并不会写磁盘。</p><p><strong>但是带来的问题是，数据不是强一致性的，而且会有数据丢失的风险</strong>，因为缓存一般使用内存，而内存是非持久化的，所以一旦缓存机器掉电，就会造成原本缓存中的脏数据丢失。所以你会发现系统在掉电之后，之前写入的文件会有部分丢失，就是因为 Page Cache 还没有来得及刷盘造成的。</p><p>这里贴一张 CPU 缓存与内存使用 Write Back 策略的流程图：</p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E5%85%AB%E8%82%A1%E6%96%87/writeback.png" alt="img" style="zoom: 80%;" /><h1 id="—————-分布式缓存—————"><a href="#—————-分布式缓存—————" class="headerlink" title="—————-分布式缓存—————-"></a><div align="center">—————-分布式缓存—————-</div></h1><h1 id="主从同步"><a href="#主从同步" class="headerlink" title="主从同步"></a>主从同步</h1><img src="https://pic.code-nav.cn/mianshiya/question_picture/1772087337535152129/jJA9JNgt_image_mianshiya.png" alt="image.png" style="zoom:30%;" /><p>主从同步：单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，可以搭建主从集群，实现读写分离。一般都是一主多从，主节点负责写数据，从节点负责读数据，主节点写入数据之后，需要把数据同步到从节点中</p><p>主从同步数据的流程：</p><ul><li><p>全量同步：从节点第一次与主节点建立连接的时候会使用全量同步</p><img src="https://pic.code-nav.cn/mianshiya/question_picture/1772087337535152129/zQyotf09_image_mianshiya.png" alt="image.png" style="zoom: 25%;" /><ul><li>从节点请求主节点同步数据，其中从节点会携带自己的replication id和offset偏移量。</li><li>主节点判断是否是第一次请求，主要判断的依据就是，主节点与从节点是否是同一个replication id，如果不是，就说明是第一次同步，那主节点就会把自己的replication id和offset发送给从节点，让从节点与主节点的信息保持一致</li><li>在同时主节点会执行bgsave，生成rdb文件后，发送给从节点去执行，从节点先把自己的数据清空，然后执行主节点发送过来的rdb文件，这样就保持了一致</li></ul><p>当然，如果在rdb生成执行期间，依然有请求到了主节点，而主节点会以命令的方式记录到缓冲区，缓冲区是一个日志文件，最后把这个日志文件发送给从节点，这样就能保证主节点与从节点完全一致了，后期再同步数据的时候，都是依赖于这个日志文件，这个就是全量同步</p></li><li><p>增量同步：当从节点服务重启之后，数据就不一致了，所以这个时候，从节点会请求主节点同步数据，主节点还是判断不是第一次请求，不是第一次就获取从节点的offset值，然后主节点从命令日志中获取offset值之后的数据，发送给从节点进行数据同步</p><img src="https://pic.code-nav.cn/mianshiya/question_picture/1772087337535152129/9GIJIcHv_image_mianshiya.png" alt="img" style="zoom: 25%;" /></li></ul><h1 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h1><p>通过一组哨兵（通常是几个 Redis 实例）来监控多个 Redis 主从实例的运行状态，并在主实例发生故障时，自动完成故障转移。</p><p><strong>哨兵机制的主要功能包括：</strong></p><ol><li><p><strong>监控（Monitoring）</strong>：哨兵会定期检查主节点（Master）和从节点（Slave），以及其他哨兵的状态。每个哨兵节点会定时向所有的 Master、Slave 以及其他的 Sentinel 发送 PING 命令来检查它们的健康状况。此外，哨兵也可以监控任意给定的函数，并在条件满足时触发动作。</p></li><li><p><strong>故障转移（Failure Detection and Automatic Failover）</strong>：当主节点失效时，哨兵能够自动将其中一个从节点升级为主节点，从而实现自动故障转移。这一过程涉及到哨兵之间的协商，确保只有一个哨兵进行实际的故障转移操作。哨兵之间使用 Raft 或类似的协议来达成一致，以防止脑裂（split-brain）情况的发生。</p></li><li><p><strong>通知（Notification）</strong>：在故障转移之后，哨兵会通知客户端新的主节点的位置。此外，哨兵还可以通过订阅与发布（PUB&#x2F;SUB）机制来发送其他通知信息。</p></li><li><p><strong>配置中心（Configuration Provider）</strong>：哨兵充当了 Redis 集群的配置中心的角色。客户端可以通过哨兵获取当前集群的状态，包括主节点的位置等信息。</p></li></ol><p><strong>哨兵机制的关键概念</strong></p><ul><li><strong>主观下线（Subjective Down）</strong>：当一个哨兵认为一个主节点或从节点已经下线时，它会标记该节点为主观下线状态。</li><li><strong>客观下线（Objective Down）</strong>：当足够数量的哨兵（根据配置文件中的多数原则）同意一个节点已经下线时，该节点就会被标记为客观下线状态。此时，哨兵就可以开始故障转移的过程。</li></ul><p><strong>哨兵的工作流程</strong></p><ol><li><strong>哨兵检测</strong>：每个哨兵节点独立地监控 Redis 主节点和从节点的健康状况。</li><li><strong>共识形成</strong>：当多个哨兵确认主节点已经失效后，它们会通过共识算法（如 Raft）选出一个领导哨兵来进行故障转移。</li><li><strong>故障转移</strong>：领导哨兵将从节点转换为主节点，并更新相关的从节点和客户端的配置信息。</li><li><strong>通知客户端</strong>：哨兵通知客户端新的主节点的位置，使客户端可以继续正常工作。</li></ol><h1 id="分片集群"><a href="#分片集群" class="headerlink" title="分片集群"></a>分片集群</h1><p><strong>分片集群有什么作用？分片集群中数据是怎么存储和读取的？</strong></p><p>分片集群主要解决的是<strong>海量数据存储</strong>的问题，集群中有多个master，每个master保存不同数据，并且还可以给每个master设置多个slave节点，就可以继续增大集群的高并发能力。同时每个master之间通过ping监测彼此健康状态，类似于哨兵模式。客户端请求可以访问集群任意节点，最终都会被转发到正确节点、</p><p>Redis 集群引入了哈希槽的概念，有 16384 个哈希槽，集群中每个主节点绑定了一定范围的哈希槽范围， key通过 CRC16 校验后对 16384 取模来决定放置哪个槽，通过槽找到对应的节点进行存储。</p><h1 id="脑裂"><a href="#脑裂" class="headerlink" title="脑裂"></a>脑裂</h1><p>由于网络等原因可能会出现脑裂的情况，master节点与sentinel处于不同的网络分区，使得sentinel没有能够心跳感知到master，所以通过选举的方式提升了一个salve为master，这样就存在了两个master，就像大脑分裂了一样，这样会导致客户端还在old master那里写入数据，新节点无法同步数据，当网络恢复后，sentinel会将old master降为salve，这时再从新master同步数据，这会导致old master中的大量数据丢失。</p><p><strong>解决方案</strong>：</p><ol><li>设置尽量少的salve节点个数，比如设置至少要有一个从节点才能同步数据</li><li>设置主从同步的延迟超时时间，达不到要求就拒绝请求，就可以避免大量的数据丢失。</li></ol><h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><h2 id="常见分布式锁"><a href="#常见分布式锁" class="headerlink" title="常见分布式锁"></a>常见分布式锁</h2><p><code>互斥锁</code>、<code>排他锁</code>、<code>可重入锁</code>：锁的基本思想</p><p><code>读写锁</code>：互斥锁的扩充</p><p><code>同步锁</code>：本质就是互斥锁</p><p><code>表锁</code>、<code>行锁</code>、<code>间隙锁</code>：数据库中的互斥锁</p><p><code>共享锁</code>：数据库中的读写锁</p><p><code>排他锁</code>：互斥锁的别名</p><p><code>悲观锁</code>、<code>乐观锁</code>：一种抽象概念</p><p><code>分布式锁</code>：分布式场景下的互斥锁</p><h2 id="分布式锁有哪些应用场景？"><a href="#分布式锁有哪些应用场景？" class="headerlink" title="分布式锁有哪些应用场景？"></a>分布式锁有哪些应用场景？</h2><p>有两种常见场景：</p><ul><li><p>电商超卖</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404101314095.png" alt="image-20240410131415868" style="zoom: 30%;" /></li><li><p>假脱机打印问题</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404101315234.png" alt="image-20240410131506091" style="zoom: 30%;" /></li></ul><h2 id="分布式操作会发生什么问题？"><a href="#分布式操作会发生什么问题？" class="headerlink" title="分布式操作会发生什么问题？"></a>分布式操作会发生什么问题？</h2><p><strong>产生原因</strong>：多个执行体操作同一份共享数据。</p><p>在并发场景中，在需要操作同一个共享数据时，如果当前的进程或线程对数据的操作还没有结束的话，另一个进程或线程也开始操作这个数据，这个时候就会发生无法预测的结果。解决这个问题的一种思路就是：我们可以控制执行体的时序，在当前的这个执行体对共享数据的操作完成前，不允许其他的执行体去操作这个共享数据。具体我们可以设置一个公共的标记，这个标记对每个执行体都可见，当这个标记不可见的时候，执行体可以重新设置这个标记，这个标记就是锁，对于解决<strong>多线程</strong>、<strong>多进程</strong>、<strong>分布式服务</strong>同时竞争共享资源所产生的一系列问题思想都是加锁。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404101325704.png" alt="image-20240410132556603" style="zoom:50%;" /><h2 id="分布式锁的实现原理"><a href="#分布式锁的实现原理" class="headerlink" title="分布式锁的实现原理"></a>分布式锁的实现原理</h2><ol><li><p>加锁：使用SETNX命令设置一个键值对，如果键不存在则设置成功并获得锁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET lock_key &quot;lock_value&quot; NX EX 30</span><br></pre></td></tr></table></figure></li><li><p>获取锁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WATCH lock_key</span><br><span class="line">MULTI</span><br><span class="line">SET lock_key &quot;lock_value&quot; NX EX 30</span><br><span class="line">EXEC</span><br></pre></td></tr></table></figure></li><li><p>释放锁：删除该键值对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EVAL &quot;</span><br><span class="line">if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then</span><br><span class="line">    return redis.call(&#x27;del&#x27;, KEYS[1])</span><br><span class="line">else</span><br><span class="line">    return 0</span><br><span class="line">end</span><br><span class="line">&quot; SHA 1 lock_key lock_value</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>实现细节</strong></p><ol><li><strong>超时时间</strong>：设置一个合理的超时时间很重要，过长会导致资源浪费，过短可能导致锁的丢失。</li><li><strong>重试机制</strong>：如果获取锁失败，客户端应该实现一个重试机制，并且在重试之间加入适当的延时，以避免争用。</li><li><strong>公平性</strong>：上述实现并没有保证锁的获取公平性。如果需要公平锁，可以考虑在获取锁时加入时间戳或其他机制。</li><li>使用唯一标识符(如UUID)作为值，防止误删其他客户端的锁</li><li><em>考虑Redis主从复制的延迟问题，使用Redlock算法</em></li></ol></blockquote><h2 id="分布式锁可能遇到的问题有哪些？"><a href="#分布式锁可能遇到的问题有哪些？" class="headerlink" title="分布式锁可能遇到的问题有哪些？"></a>分布式锁可能遇到的问题有哪些？</h2><p><strong>锁超时</strong></p><ol><li>锁未能正确释放、锁长时间不被释放，合理设置锁的超时时间；</li><li>锁频繁续期，合理设置锁的超时时间。</li></ol><p><strong>锁重试</strong></p><ol><li>锁被争用，导致性能下降，可以适当延长重试间隔时间。</li><li>锁因网络延迟等原因，无法及时获取或释放锁，可以在超时前多次尝试获取锁。</li></ol><p><strong>锁验证</strong></p><ol><li>锁被争用，是不公平的，使用时间戳机制实现公平锁。</li><li>锁被删除时验证锁的所有者，使用 Lua 脚本或UUID检查并删除锁。</li></ol><h2 id="Redisson的看门狗机制"><a href="#Redisson的看门狗机制" class="headerlink" title="Redisson的看门狗机制"></a><em>Redisson的看门狗机制</em></h2><p><strong>作用</strong>：避免死锁。</p><p><strong>实现原理</strong>：当锁住的一个业务还没有执行完成的时候，Redisson每隔一段时间就检查当前业务是否还持有锁，如果持有就增加加锁的持有时间，当业务执行完成之后需要使用释放锁就可以了。</p>]]></content>
    
    
    <summary type="html">Java, all in one！</summary>
    
    
    
    <category term="学习" scheme="https://01petard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://01petard.github.io/tags/Java/"/>
    
    <category term="缓存" scheme="https://01petard.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>My Java Guide - 计算机基础</title>
    <link href="https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    <id>https://01petard.github.io/2024/10/15/My%20Java%20Guide%20-%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</id>
    <published>2024-10-14T16:23:00.000Z</published>
    <updated>2024-10-14T16:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#<div align="center">——————操作系统——————</div></p><h1 id="用户态和内核态"><a href="#用户态和内核态" class="headerlink" title="用户态和内核态"></a>用户态和内核态<a id="UserMode"></a><a id="KernelMode"></a></h1><p>指处理器运行在<strong>不同权限级别</strong>的两种模式。这两种模式的设计目的是为了<strong>提高系统的安全性</strong>，并且防止用户程序错误地影响到整个系统的稳定性和数据的安全性。</p><p><strong>用户态（User Mode）</strong></p><p>用户态是指普通应用程序运行时所在的模式。在这种模式下，<strong>应用程序只能访问受限制的系统资源和服务</strong>。用户态程序不能直接访问硬件或执行某些特权指令，这样可以防止由于程序错误或恶意行为而导致系统崩溃或数据损坏。</p><p>在用户态下运行的应用程序包括但不限于：</p><ul><li>文档编辑器</li><li>游戏</li><li>浏览器</li><li>办公软件</li><li>大部分用户级服务</li></ul><p><strong>内核态（Kernel Mode）</strong></p><p>内核态是指操作系统内核运行时所在的模式。在内核态下，<strong>程序拥有完全的系统访问权限</strong>，可以执行任何指令，直接访问硬件资源。这种模式下的代码通常是经过严格审查的，因为任何错误都可能导致系统不稳定甚至崩溃。</p><p>在内核态下运行的组件包括：</p><ul><li>文件系统驱动</li><li>设备驱动</li><li>网络协议栈</li><li>进程调度器</li><li>内存管理模块</li></ul><p><strong>用户态和内核态之间的转换</strong></p><p>用户态下的应用程序需要调用操作系统提供的<strong>系统调用</strong>（System Call）来请求内核提供的服务，例如读写文件、分配内存、创建进程等。当应用程序发起一个系统调用时，CPU会从用户态切换到内核态，操作系统内核处理完请求后再从内核态切换回用户态。这种转换涉及到：</p><ul><li><strong>保护上下文</strong>：保存用户态的寄存器状态和程序计数器。</li><li><strong>执行系统调用处理程序</strong>：操作系统内核中的代码负责处理系统调用。</li><li><strong>恢复上下文</strong>：完成系统调用后，恢复用户态的寄存器状态和程序计数器。</li></ul><h1 id="进程的调度算法"><a href="#进程的调度算法" class="headerlink" title="进程的调度算法"></a>进程的调度算法</h1><table><thead><tr><th align="left">调度算法</th><th>描述</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td align="left">先来先服务（First-Come, First-Served, FCFS）</td><td>按照进程到达的先后顺序进行调度</td><td>实现简单，易于理解</td><td>可能导致长进程饿死短进程（长作业优先），响应时间较长</td></tr><tr><td align="left">短作业优先（Shortest Job First, SJF）</td><td>总是选择预计执行时间最短的进程来执行</td><td>可以最小化平均等待时间</td><td>需要知道进程的确切执行时间，实现复杂，且可能不公平对待长进程</td></tr><tr><td align="left">最短剩余时间优先（Shortest Remaining Time First, SRTF）</td><td>总是选择剩余执行时间最短的进程来执行</td><td>可以动态调整，更好地适应实际情况</td><td>需要实时更新剩余时间，实现较为复杂</td></tr><tr><td align="left">时间片轮转（Round Robin, RR）</td><td>给每个就绪队列中的进程分配一个固定的时间片（时间量子），并在时间片结束后强制切换到下一个进程</td><td>简单公平，适用于交互式系统</td><td>时间片的选择至关重要，否则可能会影响响应时间和吞吐量</td></tr><tr><td align="left">优先级调度（Priority Scheduling）</td><td>根据进程的优先级来调度，优先级高的进程优先执行</td><td>可以根据进程的重要性灵活调度</td><td>可能造成饥饿（starvation），即低优先级的进程永远得不到执行的机会</td></tr></tbody></table><blockquote><p>……还有很多，不列举了</p></blockquote><h1 id="进程间的通信方式"><a href="#进程间的通信方式" class="headerlink" title="进程间的通信方式"></a>进程间的通信方式</h1><p>进程间通信（IPC）主要包括以下几种方式：</p><ol><li><strong>管道</strong>（Pipe）是最古老的进程间通信机制之一，所有的 UNIX 系统都支持这种机制。管道实质上是内核维护的一块内存缓冲区。Linux 系统中通过 <code>pipe()</code> 函数创建管道，这会生成两个文件描述符，分别对应管道的读端和写端。无名管道仅限于具有亲缘关系的进程间通信。</li><li><strong>命名管道（FIFO）</strong> 命名管道（Named Pipe 或 FIFO 文件）克服了无名管道只能用于亲缘进程通信的限制。命名管道提供了一个路径名与之关联，作为文件系统中的一个 FIFO 文件存在。任何能够访问该路径的进程，即便与创建该 FIFO 的进程无关，也可以通过该 FIFO 进行通信。</li><li><strong>信号</strong> 信号是进程间通信的另一种古老方式，作为一种异步通知机制，它可以在一个进程中产生中断，使进程能够响应某些事件。信号可以看作是软件层次上的中断机制，用于处理突发事件。</li><li><strong>消息队列</strong> 消息队列是一个链表结构，其中包含具有特定格式和优先级的消息。具有写权限的进程可以按规则向消息队列中添加消息，而具有读权限的进程可以从队列中读取消息。消息队列是随内核持续存在的。</li><li><strong>共享内存</strong> 共享内存允许多个进程共享同一块物理内存区域。这种机制允许进程直接在共享内存中进行数据交换，不需要内核的干预，因此速度较快。</li><li><strong>内存映射</strong> 内存映射技术将磁盘文件的数据映射到内存，用户可以通过修改内存中的内容来间接修改磁盘文件。</li><li><strong>信号量</strong> 信号用于解决进程或线程间的同步问题。对信号量的操作包括 P 操作（减 1）和 V 操作（加 1），用于控制进程或线程的互斥访问。</li><li><strong>Socket</strong> Socket 是网络中不同主机上应用程序之间进行双向通信的端点的抽象。它为应用层提供了使用网络协议进行数据交换的机制，主要用于网络中不同主机上的进程间通信。</li></ol><h1 id="什么是软中断、什么是硬中断？"><a href="#什么是软中断、什么是硬中断？" class="headerlink" title="什么是软中断、什么是硬中断？"></a>什么是软中断、什么是硬中断？</h1><table><thead><tr><th align="center">中断类型</th><th>描述</th><th>特点</th><th>例子</th></tr></thead><tbody><tr><td align="center">硬中断</td><td>由硬件设备引发的中断信号</td><td><strong>外部来源</strong>：由外部硬件设备引发。<br><strong>硬件触发</strong>：通常由设备通过 IRQ 线向 CPU 发送中断信号。<br><strong>实时性</strong>：通常要求立即响应。<br><strong>硬件驱动程序处理</strong>：中断处理程序通常由硬件驱动程序编写。</td><td><strong>键盘中断</strong>：按下键盘按键。<br><strong>网络中断</strong>：网络适配器接收到数据包。<br><strong>定时器中断</strong>：定时器硬件定时发送中断信号。</td></tr><tr><td align="center">软中断</td><td>由软件指令或内核代码触发的中断信号</td><td><strong>内部来源</strong>：由软件指令或内核代码触发。<br><strong>软件触发</strong>：通过特定的指令或函数调用触发。<br><strong>灵活性</strong>：可以根据需要随时触发。<br><strong>内核处理</strong>：通常由内核中的中断处理程序处理。</td><td><strong>系统调用</strong>：应用程序调用系统服务。<br><strong>时间片到期</strong>：时间片结束时触发。<br> <strong>异常处理</strong>：如页错误、除零错误等。</td></tr></tbody></table><h1 id="什么是分段、什么是分页？"><a href="#什么是分段、什么是分页？" class="headerlink" title="什么是分段、什么是分页？"></a>什么是分段、什么是分页？</h1><table><thead><tr><th>特点</th><th>分段（Segmentation）</th><th>分页（Paging）</th></tr></thead><tbody><tr><td><strong>逻辑划分</strong></td><td>将逻辑地址空间划分为多个逻辑段，每个段代表程序的一部分。</td><td>将逻辑地址空间划分为固定大小的页面。</td></tr><tr><td><strong>大小</strong></td><td>段的大小可以是动态变化的，每个段可以有不同的大小。</td><td>页面的大小是固定的，通常是 4KB 或更大。</td></tr><tr><td><strong>映射</strong></td><td>段可以映射到物理内存中的连续或非连续区域。</td><td>页面映射到物理内存中的连续或非连续区域。</td></tr><tr><td><strong>保护</strong></td><td>每个段可以单独保护和管理，有利于实现访问控制和保护。</td><td>页面级别的保护，但通常不如分段灵活。</td></tr><tr><td><strong>缺点</strong></td><td>实现复杂，可能导致内存碎片。</td><td>可能导致内存碎片，但通常较少。</td></tr><tr><td><strong>应用场景</strong></td><td>适合需要逻辑分段的应用程序，如操作系统内核、数据库管理系统等。</td><td>适合大多数应用程序，特别是需要虚拟内存支持的应用程序。</td></tr><tr><td><strong>代表性系统</strong></td><td>Unix、早期的 Windows 操作系统。</td><td>Linux、现代 Windows 操作系统。</td></tr></tbody></table><h1 id="什么是-Channel？"><a href="#什么是-Channel？" class="headerlink" title="什么是 Channel？"></a>什么是 Channel？</h1><p>在计算机科学和软件开发中，“Channel”（通道）是一个广泛使用的术语，它在不同的上下文中可以有不同的含义。这里我们将讨论几种常见的“Channel”的定义及其用途：</p><h2 id="1-操作系统中的-Channel"><a href="#1-操作系统中的-Channel" class="headerlink" title="1. 操作系统中的 Channel"></a>1. 操作系统中的 Channel</h2><p>在操作系统中，“Channel”通常指的是用于在进程之间进行通信的一种机制。它可以看作是一种高级的 IPC（Inter-Process Communication）机制，用于在进程之间传递数据。</p><p><strong>特点</strong>：</p><ul><li><strong>通信媒介</strong>：Channel 作为进程间通信的媒介，可以实现数据的发送和接收。</li><li><strong>同步</strong>：通常 Channel 机制会包含同步机制，确保数据的正确传递。</li></ul><p><strong>例子</strong>：</p><ul><li><strong>管道（Pipe）</strong>：在 Unix&#x2F;Linux 系统中，管道是一种典型的 Channel，用于连接两个进程，使一个进程的输出成为另一个进程的输入。</li><li><strong>命名管道（Named Pipe&#x2F;FIFO）</strong>：与管道类似，但可以在不同的进程或用户之间共享，通过文件名来标识。</li></ul><h2 id="2-并发编程中的-Channel"><a href="#2-并发编程中的-Channel" class="headerlink" title="2. 并发编程中的 Channel"></a>2. 并发编程中的 Channel</h2><p>在并发编程中，Channel 是一种用于通信和同步的基本原语，特别是在函数式编程语言和并发模型（如 Go 语言的 goroutines）中。</p><p><strong>特点</strong>：</p><ul><li><strong>数据传递</strong>：Channel 用于在并发执行的线程或协程之间传递数据。</li><li><strong>同步机制</strong>：Channel 提供了一种同步方式，确保数据的有序传递和一致性。</li><li><strong>阻塞行为</strong>：Channel 可以是阻塞的或非阻塞的，具体取决于是否有数据可以接收或发送。</li></ul><p><strong>例子</strong>：</p><ul><li><strong>Go 语言的 Channel</strong>：Go 语言中的 Channel 是用于 goroutine 之间通信的基本机制，可以传递任意类型的数据。</li><li><strong>Haskell 的 TChan</strong>：Haskell 中的 <code>TChan</code> 是一种用于线程间通信的 Channel。</li></ul><h2 id="3-网络通信中的-Channel"><a href="#3-网络通信中的-Channel" class="headerlink" title="3. 网络通信中的 Channel"></a>3. 网络通信中的 Channel</h2><p>在网络通信中，“Channel”通常指的是一种逻辑上的连接或通信路径，用于传输数据。</p><p><strong>特点</strong>：</p><ul><li><strong>逻辑连接</strong>：在网络层面上，Channel 可以指一条逻辑上的连接，如 TCP 连接。</li><li><strong>数据传输</strong>：Channel 用于在网络节点之间传输数据包。</li></ul><p><strong>例子</strong>：</p><ul><li><strong>TCP 连接</strong>：TCP 连接可以视为一种 Channel，用于在客户端和服务器之间建立稳定的双向通信路径。</li><li><strong>WebSocket</strong>：WebSocket 是一种全双工的通信协议，可以在客户端和服务器之间建立持久的 Channel。</li></ul><h2 id="4-应用程序中的-Channel"><a href="#4-应用程序中的-Channel" class="headerlink" title="4. 应用程序中的 Channel"></a>4. 应用程序中的 Channel</h2><p>在某些应用程序中，Channel 也可以指一种用于组织和管理数据流的方式。</p><p><strong>特点</strong>：</p><ul><li><strong>数据组织</strong>：Channel 可以用于组织不同类型的数据流。</li><li><strong>逻辑隔离</strong>：不同的 Channel 可以用于隔离不同类型的数据传输。</li></ul><p><strong>例子</strong>：</p><ul><li><strong>多媒体播放器中的音频&#x2F;视频 Channel</strong>：在多媒体播放器中，音频和视频数据流可以被视为不同的 Channel。</li><li><strong>消息队列中的 Topic</strong>：在消息队列系统（如 Apache Kafka）中，Topic 可以被视为一种 Channel，用于组织不同类型的消息。</li></ul><blockquote><ul><li><strong>Buffer</strong>：用于缓存数据，提高 I&#x2F;O 效率。</li><li><strong>Selector</strong>：用于监控多个文件描述符的状态，实现多路复用。</li><li><strong>Reactor</strong>：结合 Selector 和事件驱动的设计模式，用于处理并发 I&#x2F;O 操作。</li><li><strong>Select、Poll、Epoll</strong>：三种不同的文件描述符监控机制，分别适用于不同场景。</li></ul></blockquote><h1 id="什么是-Buffer？"><a href="#什么是-Buffer？" class="headerlink" title="什么是 Buffer？"></a>什么是 Buffer？</h1><p><code>Buffer</code>通常指用于临时存储数据的内存区域。在计算机科学中，Buffer 主要用于缓存数据，以便进行批量处理或提高数据传输效率。</p><p><strong>作用</strong>：</p><ul><li><strong>数据缓存</strong>：临时存储数据，以减少 I&#x2F;O 操作次数。</li><li><strong>流量控制</strong>：在数据传输过程中，用于平滑数据流，防止数据丢失。</li><li><strong>同步</strong>：在多线程或多进程环境中，Buffer 用于同步数据。</li></ul><p><strong>例子</strong>：</p><ul><li><strong>网络编程中的 Buffer</strong>：在网络编程中，接收的数据通常先存储在一个 Buffer 中，然后再进行处理。</li><li><strong>文件系统中的 Buffer</strong>：在文件系统中，读取或写入的数据通常先存储在 Buffer 中，以减少磁盘 I&#x2F;O 操作。</li></ul><h1 id="什么是-Selector？"><a href="#什么是-Selector？" class="headerlink" title="什么是 Selector？"></a>什么是 Selector？</h1><p><code>Selector</code>是一种用于监控多个文件描述符（File Descriptor）状态的技术，通常用于网络编程中的多路复用（Multiplexing）。</p><p><strong>作用</strong>：</p><ul><li><strong>多路复用</strong>：同时监控多个文件描述符的状态，如读写就绪状态。</li><li><strong>非阻塞</strong>：当没有数据可读或可写时，不会阻塞当前线程。</li><li><strong>效率</strong>：相比于传统的阻塞 I&#x2F;O，使用 Selector 可以大大提高 I&#x2F;O 效率。</li></ul><p><strong>例子</strong>：</p><ul><li><strong>Java NIO 中的 Selector</strong>：在 Java 的 NIO（New IO）框架中，<code>Selector</code> 用于监控多个 <code>SocketChannel</code> 的状态。</li><li><strong>POSIX 系统中的 Select 和 Poll</strong>：在 POSIX 系统中，<code>select()</code> 和 <code>poll()</code> 是常用的 Selector 实现。</li></ul><h1 id="什么是-Reactor？"><a href="#什么是-Reactor？" class="headerlink" title="什么是 Reactor？"></a>什么是 Reactor？</h1><p><code>Reactor</code>是一种设计模式，用于处理并发 I&#x2F;O 操作。它结合了 Selector 和事件驱动的设计思想，通常用于构建高性能的网络服务器。</p><p><strong>作用</strong>：</p><ul><li><strong>事件驱动</strong>：监听并处理多个 I&#x2F;O 事件。</li><li><strong>非阻塞</strong>：当没有 I&#x2F;O 事件发生时，不会阻塞当前线程。</li><li><strong>可扩展性</strong>：通过事件循环处理 I&#x2F;O 事件，易于扩展和维护。</li></ul><p><strong>例子</strong>：</p><ul><li><strong>Reactor 模式</strong>：在高性能服务器中，Reactor 模式常用于处理大量的并发连接。</li><li><strong>事件驱动框架</strong>：如 libevent、libuv 等，提供了基于 Reactor 模式的设计框架。</li></ul><h1 id="Select、Poll、Epoll-之间有什么区别？"><a href="#Select、Poll、Epoll-之间有什么区别？" class="headerlink" title="Select、Poll、Epoll 之间有什么区别？"></a>Select、Poll、Epoll 之间有什么区别？</h1><p><strong>Select</strong>：<code>select()</code> 是一个用于监控多个文件描述符的系统调用。</p><ul><li>支持的文件描述符数量有限（通常为 FD_SETSIZE）。</li><li>可以同时监控读、写和异常状态。</li><li>在 Linux 中，<code>select()</code> 的效率较低，因为需要遍历所有的文件描述符。</li></ul><p><strong>适用场景</strong>：适合文件描述符较少的场景。</p><hr><p><strong>Poll</strong>：<code>poll()</code> 是 <code>select()</code> 的改进版本，同样用于监控多个文件描述符的状态。</p><ul><li>不受文件描述符数量限制。</li><li>每个文件描述符的状态信息保存在 <code>pollfd</code> 结构中。</li><li>效率高于 <code>select()</code>，因为不需要遍历所有文件描述符。</li></ul><hr><p><strong>适用场景</strong>：适合文件描述符较多的场景。</p><p><strong>Epoll</strong>：<code>epoll()</code> 是 Linux 内核提供的一个高效的文件描述符监控机制。</p><ul><li>使用事件驱动的方式，只有状态改变的文件描述符才会被激活。</li><li>支持动态添加和删除监控对象。</li><li>效率最高，因为只关心状态发生变化的文件描述符。</li></ul><p><strong>适用场景</strong>：适合高性能网络服务器，尤其是需要处理大量并发连接的场景。</p><h1 id="—————-计算机网络—————"><a href="#—————-计算机网络—————" class="headerlink" title="—————-计算机网络—————-"></a><div align="center">—————-计算机网络—————-</div></h1><h1 id="分层模型"><a href="#分层模型" class="headerlink" title="分层模型"></a>分层模型</h1><h2 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h2><p><strong>OSI 七层模型</strong> 是国际标准化组织提出的一个网络分层模型，其大体结构以及每一层提供的功能如下图所示：</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404061359765.png" alt="OSI 七层模型" style="zoom:100%;"/><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202404061359201.png" alt="osi七层模型2" style="zoom:40%;" /><h2 id="TCP-x2F-IP-四层模型"><a href="#TCP-x2F-IP-四层模型" class="headerlink" title="TCP&#x2F;IP 四层模型"></a>TCP&#x2F;IP 四层模型</h2><p><strong>TCP&#x2F;IP 四层模型</strong> 是目前被广泛采用的一种模型,我们可以将 TCP &#x2F; IP 模型看作是 OSI 七层模型的精简版本，由以下 4 层组成：</p><ol><li>应用层</li><li>传输层</li><li>网络层</li><li>网络接口层</li></ol><p>需要注意的是，我们并不能将 TCP&#x2F;IP 四层模型 和 OSI 七层模型完全精确地匹配起来，不过可以简单将两者对应起来，如下图所示：</p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-ip-4-model.png" alt="TCP/IP 四层模型" style="zoom:100%;" /><h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><h2 id="常见网络协议汇总"><a href="#常见网络协议汇总" class="headerlink" title="常见网络协议汇总"></a>常见网络协议汇总</h2><p><strong>1. 应用层有哪些常见的协议？</strong></p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/application-layer-protocol.png" alt="应用层常见协议" style="zoom:100%;" /><ul><li><strong>HTTP（Hypertext Transfer Protocol，超文本传输协议）</strong>：基于 TCP 协议，是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。</li><li><strong>SMTP（Simple Mail Transfer Protocol，简单邮件发送协议）</strong>：基于 TCP 协议，是一种用于发送电子邮件的协议。注意 ：SMTP 协议只负责邮件的发送，而不是接收。要从邮件服务器接收邮件，需要使用 POP3 或 IMAP 协议。</li><li><strong>POP3&#x2F;IMAP（邮件接收协议）</strong>：基于 TCP 协议，两者都是负责邮件接收的协议。IMAP 协议是比 POP3 更新的协议，它在功能和性能上都更加强大。IMAP 支持邮件搜索、标记、分类、归档等高级功能，而且可以在多个设备之间同步邮件状态。几乎所有现代电子邮件客户端和服务器都支持 IMAP。</li><li><strong>FTP（File Transfer Protocol，文件传输协议）</strong> : 基于 TCP 协议，是一种用于在计算机之间传输文件的协议，可以屏蔽操作系统和文件存储方式。注意 ⚠️：FTP 是一种不安全的协议，因为它在传输过程中不会对数据进行加密。建议在传输敏感数据时使用更安全的协议，如 SFTP。</li><li><strong>Telnet（远程登陆协议）</strong>：基于 TCP 协议，用于通过一个终端登陆到其他服务器。Telnet 协议的最大缺点之一是所有数据（包括用户名和密码）均以明文形式发送，这有潜在的安全风险。这就是为什么如今很少使用 Telnet，而是使用一种称为 SSH 的非常安全的网络传输协议的主要原因。</li><li><strong>SSH（Secure Shell Protocol，安全的网络传输协议）</strong>：基于 TCP 协议，通过加密和认证机制实现安全的访问和文件传输等业务</li><li><strong>RTP（Real-time Transport Protocol，实时传输协议）</strong>：通常基于 UDP 协议，但也支持 TCP 协议。它提供了端到端的实时传输数据的功能，但不包含资源预留存、不保证实时传输质量，这些功能由 WebRTC 实现。</li><li><strong>DNS（Domain Name System，域名管理系统）</strong>: 基于 UDP 协议，用于解决域名和 IP 地址的映射问题。</li></ul><p><strong>2. 传输层有哪些常见的协议？</strong></p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/transport-layer-protocol.png" alt="传输层常见协议" style="zoom:100%;" /><ul><li><strong>TCP（Transmission Control Protocol，传输控制协议 ）</strong>：提供 <strong>面向连接</strong> 的，<strong>可靠</strong> 的数据传输服务。</li><li><strong>UDP（User Datagram Protocol，用户数据协议）</strong>：提供 <strong>无连接</strong> 的，<strong>尽最大努力</strong> 的数据传输服务（不保证数据传输的可靠性），简单高效。</li></ul><p><strong>3. 网络层有哪些常见的协议？</strong></p><img src="https://javaguide.cn/assets/nerwork-layer-protocol-VpGZIByy.png" alt="网络层常见协议" style="zoom:100%;" /><ul><li><strong>IP（Internet Protocol，网际协议）</strong>：TCP&#x2F;IP 协议中最重要的协议之一，属于网络层的协议，主要作用是定义数据包的格式、对数据包进行路由和寻址，以便它们可以跨网络传播并到达正确的目的地。目前 IP 协议主要分为两种，一种是过去的 IPv4，另一种是较新的 IPv6，目前这两种协议都在使用，但后者已经被提议来取代前者。</li><li><strong>ARP（Address Resolution Protocol，地址解析协议）</strong>：ARP 协议解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。</li><li><strong>ICMP（Internet Control Message Protocol，互联网控制报文协议）</strong>：一种用于传输网络状态和错误消息的协议，常用于网络诊断和故障排除。例如，Ping 工具就使用了 ICMP 协议来测试网络连通性。</li><li><strong>NAT（Network Address Translation，网络地址转换协议）</strong>：NAT 协议的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。具体地说，在一个小的子网（局域网，LAN）内，各主机使用的是同一个 LAN 下的 IP 地址，但在该 LAN 以外，在广域网（WAN）中，需要一个统一的 IP 地址来标识该 LAN 在整个 Internet 上的位置。</li><li><strong>OSPF（Open Shortest Path First，开放式最短路径优先）</strong> ）：一种内部网关协议（Interior Gateway Protocol，IGP），也是广泛使用的一种动态路由协议，基于链路状态算法，考虑了链路的带宽、延迟等因素来选择最佳路径。</li><li><strong>RIP(Routing Information Protocol，路由信息协议）</strong>：一种内部网关协议（Interior Gateway Protocol，IGP），也是一种动态路由协议，基于距离向量算法，使用固定的跳数作为度量标准，选择跳数最少的路径作为最佳路径。</li><li><strong>BGP（Border Gateway Protocol，边界网关协议）</strong>：一种用来在路由选择域之间交换网络层可达性信息（Network Layer Reachability Information，NLRI）的路由选择协议，具有高度的灵活性和可扩展性。</li></ul><h2 id="TCP-与-UDP-的区别"><a href="#TCP-与-UDP-的区别" class="headerlink" title="TCP 与 UDP 的区别"></a>TCP 与 UDP 的区别</h2><ol><li><strong>是否面向连接</strong>：UDP 在传送数据之前不需要先建立连接。而 TCP 提供面向连接的服务，在传送数据之前必须先建立连接，数据传送结束后要释放连接。</li><li><strong>是否是可靠传输</strong>：远地主机在收到 UDP 报文后，不需要给出任何确认，并且不保证数据不丢失，不保证是否顺序到达。TCP 提供可靠的传输服务，TCP 在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制。通过 TCP 连接传输的数据，无差错、不丢失、不重复、并且按序到达。</li><li><strong>是否有状态</strong>：这个和上面的“是否可靠传输”相对应。TCP 传输是有状态的，这个有状态说的是 TCP 会去记录自己发送消息的状态比如消息是否发送了、是否被接收了等等。为此 ，TCP 需要维持复杂的连接状态表。而 UDP 是无状态服务，简单来说就是不管发出去之后的事情了（<strong>这很渣男！</strong>）。</li><li><strong>传输效率</strong>：由于使用 TCP 进行传输的时候多了连接、确认、重传等机制，所以 TCP 的传输效率要比 UDP 低很多。</li><li><strong>传输形式</strong>：TCP 是面向字节流的，UDP 是面向报文的。</li><li><strong>首部开销</strong>：TCP 首部开销（20 ～ 60 字节）比 UDP 首部开销（8 字节）要大。</li><li><strong>是否提供广播或多播服务</strong>：TCP 只支持点对点通信，UDP 支持一对一、一对多、多对一、多对多；</li><li>……</li></ol><p>我把上面总结的内容通过表格形式展示出来了！确定不点个赞嘛？</p><table><thead><tr><th></th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>是否面向连接</td><td>是</td><td>否</td></tr><tr><td>是否可靠</td><td>是</td><td>否</td></tr><tr><td>是否有状态</td><td>是</td><td>否</td></tr><tr><td>传输效率</td><td>较慢</td><td>较快</td></tr><tr><td>传输形式</td><td>字节流</td><td>数据报文段</td></tr><tr><td>首部开销</td><td>20 ～ 60 bytes</td><td>8 bytes</td></tr><tr><td>是否提供广播或多播服务</td><td>否</td><td>是</td></tr></tbody></table><h2 id="TCP-和-UDP-的选择"><a href="#TCP-和-UDP-的选择" class="headerlink" title="TCP 和 UDP 的选择"></a>TCP 和 UDP 的选择</h2><ul><li><strong>UDP 一般用于即时通信</strong>，比如：语音、 视频、直播等等。这些场景对传输数据的准确性要求不是特别高，比如你看视频即使少个一两帧，实际给人的感觉区别也不大。</li><li><strong>TCP 用于对传输准确性要求特别高的场景</strong>，比如文件传输、发送和接收邮件、远程登录等等。</li></ul><h2 id="HTTP-和-HTTPS-的区别"><a href="#HTTP-和-HTTPS-的区别" class="headerlink" title="HTTP 和 HTTPS 的区别"></a>HTTP 和 HTTPS 的区别</h2><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-vs-https.png" alt="HTTP 和 HTTPS 对比" style="zoom:100%;" /><ul><li><strong>端口号</strong>：HTTP 默认是 80，HTTPS 默认是 443。</li><li><strong>URL 前缀</strong>：HTTP 的 URL 前缀是 <code>http://</code>，HTTPS 的 URL 前缀是 <code>https://</code>。</li><li><strong>安全性和资源消耗</strong>：HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS 是运行在 SSL&#x2F;TLS 之上的 HTTP 协议，SSL&#x2F;TLS 运行在 TCP 之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。</li><li><strong>SEO（搜索引擎优化）</strong>：搜索引擎通常会更青睐使用 HTTPS 协议的网站，因为 HTTPS 能够提供更高的安全性和用户隐私保护。使用 HTTPS 协议的网站在搜索结果中可能会被优先显示，从而对 SEO 产生影响。</li></ul><h2 id="URI-和-URL-的区别"><a href="#URI-和-URL-的区别" class="headerlink" title="URI 和 URL 的区别"></a>URI 和 URL 的区别</h2><ul><li>URI(Uniform Resource Identifier) 是统一资源标志符，可以唯一标识一个资源。</li><li>URL(Uniform Resource Locator) 是统一资源定位符，可以提供该资源的路径。它是一种具体的 URI，即 URL 可以用来标识一个资源，而且还指明了如何 locate 这个资源。</li></ul><p>URI 的作用像身份证号一样，URL 的作用更像家庭住址一样。URL 是一种具体的 URI，它不仅唯一标识资源，而且还提供了定位该资源的信息。</p><h2 id="什么是-WebSocket？"><a href="#什么是-WebSocket？" class="headerlink" title="什么是 WebSocket？"></a>什么是 WebSocket？</h2><p>WebSocket 是一种基于 TCP 连接的全双工通信协议，即客户端和服务器可以同时发送和接收数据。</p><p>WebSocket 协议在 2008 年诞生，2011 年成为国际标准，几乎所有主流较新版本的浏览器都支持该协议。不过，WebSocket 不只能在基于浏览器的应用程序中使用，很多编程语言、框架和服务器都提供了 WebSocket 支持。</p><p>WebSocket 协议本质上是应用层的协议，用于弥补 HTTP 协议在持久通信能力上的不足。客户端和服务器仅需一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><h2 id="WebSocket-和-HTTP-的区别"><a href="#WebSocket-和-HTTP-的区别" class="headerlink" title="WebSocket 和 HTTP 的区别"></a>WebSocket 和 HTTP 的区别</h2><p>WebSocket 和 HTTP 两者都是基于 TCP 的应用层协议，都可以在网络中传输数据。</p><p>下面是二者的主要区别：</p><ul><li>WebSocket 是一种双向实时通信协议，而 HTTP 是一种单向通信协议。并且，HTTP 协议下的通信只能由客户端发起，服务器无法主动通知客户端。</li><li>WebSocket 使用 ws:&#x2F;&#x2F; 或 wss:&#x2F;&#x2F;（使用 SSL&#x2F;TLS 加密后的协议，类似于 HTTP 和 HTTPS 的关系） 作为协议前缀，HTTP 使用 http:&#x2F;&#x2F; 或 https:&#x2F;&#x2F; 作为协议前缀。</li><li>WebSocket 可以支持扩展，用户可以扩展协议，实现部分自定义的子协议，如支持压缩、加密等。</li><li>WebSocket 通信数据格式比较轻量，用于协议控制的数据包头部相对较小，网络开销小，而 HTTP 通信每次都要携带完整的头部，网络开销较大（HTTP&#x2F;2.0 使用二进制帧进行数据传输，还支持头部压缩，减少了网络开销）。</li></ul><h1 id="TCP-x2F-IP-协议"><a href="#TCP-x2F-IP-协议" class="headerlink" title="TCP&#x2F;IP 协议"></a>TCP&#x2F;IP 协议</h1><h2 id="常见的-HTTP-状态码"><a href="#常见的-HTTP-状态码" class="headerlink" title="常见的 HTTP 状态码"></a>常见的 HTTP 状态码</h2><blockquote><p><em><strong>信息响应类（1xx）</strong>：请求已被接受，需要客户端继续操作。</em></p><p><em><strong>重定向类（3xx）</strong>：需要客户端采取进一步的动作来完成请求。</em></p></blockquote><p><strong>成功类（2xx）</strong>：请求已经被成功处理。</p><ul><li><strong>200 OK</strong>：请求已成功，返回请求的数据。</li><li><strong>204 无内容</strong>：服务器成功处理了请求，但没有返回任何内容。</li></ul><p><strong>客户端错误类（4xx）</strong>：请求包含语法错误或无法完成请求。</p><ul><li><strong>400 错误请求</strong>：服务器不能理解请求报文。</li><li><strong>401 未授权</strong>：请求要求用户的身份认证。</li><li><strong>403 禁止</strong>：服务器理解请求客户端的请求，但是拒绝执行此请求。</li></ul><p><strong>服务器错误类（5xx）</strong>：服务器发生错误，无法完成请求。</p><ul><li><strong>500 内部服务器错误</strong>：服务器遇到未知错误。</li><li><strong>501 未实现</strong>：服务器不支持请求的功能。</li><li><strong>502 坏网关</strong>：作为网关或代理工作的服务器从上游服务器收到了无效响应。</li><li><strong>503 服务不可用</strong>：服务器暂时过载或维护。</li><li><strong>504 网关超时</strong>：作为网关或代理工作的服务器没有及时从上游服务器收到请求。</li><li><strong>505 HTTP 版本不受支持</strong>：服务器不支持请求中所用的 HTTP 协议版本。</li></ul><h2 id="三次握手的过程"><a href="#三次握手的过程" class="headerlink" title="三次握手的过程"></a>三次握手的过程</h2><ol><li>SYN（同步序列编号，Synchronize）：<ul><li>客户端发送一个 SYN 包给服务器端，表示请求建立连接。这个包中包含了一个初始化的序号（Sequence Number），用于后续的数据传输。</li></ul></li><li>SYN-ACK（同步-确认，Synchronize-Acknowledge）：<ul><li>服务器端接收到 SYN 包之后，会发送一个 SYN-ACK 包作为应答。这个包中包含了一个自己的初始化序号，并且还包含了一个确认序号（Acknowledgment Number），这个确认序号是对客户端发出的 SYN 包的序号加一的确认。</li></ul></li><li>ACK（确认，Acknowledge）：<ul><li>客户端接收到服务器的 SYN-ACK 包后，会发送一个 ACK 包作为确认，这个包仅仅包含确认序号，确认序号是对服务器发出的 SYN-ACK 包的序号加一的确认。这样就完成了三次握手的过程，连接建立完成。</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Client                               Server</span><br><span class="line">   |                                   |</span><br><span class="line">   |-----&gt; SYN (seq=x)                |      （第一次握手）</span><br><span class="line">   |                                   |</span><br><span class="line">   |                                   |&lt;---- SYN,ACK (seq=y,ack=x+1) （第二次握手）</span><br><span class="line">   |                                   |</span><br><span class="line">   |-----&gt; ACK (seq=x+1,ack=y+1)      |      （第三次握手）</span><br></pre></td></tr></table></figure><h2 id="四次挥手的过程"><a href="#四次挥手的过程" class="headerlink" title="四次挥手的过程"></a>四次挥手的过程</h2><ol><li><strong>FIN（结束标志，Finish）</strong>：<ul><li>假设客户端想要关闭连接，它会发送一个 FIN 段到服务器，这个 FIN 段表明客户端已经没有更多的数据要发送了。该 FIN 段包含客户端的序列号 Seq &#x3D; X。</li></ul></li><li><strong>ACK（确认标志，Acknowledge）</strong>：<ul><li>服务器接收到客户端的 FIN 段后，会发送一个 ACK 段作为响应。这个 ACK 段确认了它已经收到了客户端的 FIN 段，并且确认了客户端的序列号 Seq &#x3D; X + 1。此时，服务器可能仍然有未发送完的数据，所以这个 ACK 段可能还包含了一些待发送的数据。该 ACK 段包含服务器的序列号 Seq &#x3D; Y 和确认号 Ack &#x3D; X + 1。</li></ul></li><li><strong>FIN（结束标志，Finish）</strong>：<ul><li>当服务器完成了所有数据的发送后，它也会发送一个 FIN 段到客户端，表明服务器也没有更多的数据要发送了。这个 FIN 段包含服务器的序列号 Seq &#x3D; Z。</li></ul></li><li><strong>ACK（确认标志，Acknowledge）</strong>：<ul><li>客户端接收到服务器的 FIN 段后，同样发送一个 ACK 段作为确认，表明它已经收到了服务器的 FIN 段，并且确认了服务器的序列号 Seq &#x3D; Z + 1。此时，连接就可以正式关闭了。</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Client                               Server</span><br><span class="line">   |                                   |</span><br><span class="line">   |-----&gt; FIN (seq=X)                |      （第一次挥手）</span><br><span class="line">   |                                   |</span><br><span class="line">   |                                   |&lt;---- ACK (seq=Y, ack=X+1) （第二次挥手）</span><br><span class="line">   |                                   |</span><br><span class="line">   |                                   |----&gt; FIN (seq=Z)              |      （第三次挥手）</span><br><span class="line">   |                                   |</span><br><span class="line">   |-----&gt; ACK (seq=X+1, ack=Z+1)     |      （第四次挥手）</span><br></pre></td></tr></table></figure><h2 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h2><p>在标准的TCP&#x2F;IP协议栈中，终止一个TCP连接主要是通过四次挥手来完成的。然而，在某些特殊情况下，还有其他的机制可以导致TCP连接的中断：</p><ol><li><strong>RST（复位）包</strong>：发送一个带有RST标志的TCP段可以立即终止一个TCP连接。这种方式通常用于异常情况，如主机崩溃后重启或检测到恶意流量时。使用RST包断开会丢失未确认的数据，并且不会等待已发送的数据被接收。</li><li><strong>超时</strong>：如果一段长时间内没有任何数据传输活动，TCP连接可能会因为超时而自动关闭。这种机制是为了防止死链的存在。</li><li><strong>操作系统强制关闭</strong>：在某些情况下，操作系统可以直接关闭TCP连接，例如当系统检测到连接的一端已经不可达时。</li></ol><h2 id="粘包、拆包"><a href="#粘包、拆包" class="headerlink" title="粘包、拆包"></a>粘包、拆包</h2><p>粘包（Packet Clumping）：指的是多个数据包在TCP层被合并成一个大的数据包进行发送，导致接收方无法区分这些数据包的边界。这通常发生在TCP的拥塞控制算法工作时，或者当发送方连续发送小的数据包而接收方在一个接收缓冲区中接收到的数据量超过了单个数据包的大小时。</p><p><strong>发生原因</strong>：</p><ul><li>发送方连续发送多个小的数据段，但接收方一次只收到了一个数据段。</li><li>这些数据段在TCP层被合并成了一个较大的数据段进行传输。</li></ul><p><strong>解决方案</strong>：</p><ul><li>在发送数据时添加定长的包头。</li><li>使用特殊的分隔符来标识每个消息的边界。</li><li>使用固定长度的消息格式。</li></ul><p>拆包（Packet Fragmentation）：指的是一个较大的数据包在传输过程中被分割成几个更小的数据包进行发送，导致接收方接收到多个数据段，这些数据段原本属于同一个消息。</p><p><strong>发生原因</strong>：</p><ul><li>当一个数据包的大小超过了一定限制（如MTU，最大传输单元），路由器或网络设备可能会将其分割成几个较小的数据包进行传输。</li><li>接收方会收到这些被分割的数据包，并需要重组它们以恢复原始的消息。</li></ul><p><strong>解决方案</strong>：</p><ul><li>通常情况下，TCP协议本身会处理这些被分割的数据包的重组，不需要应用层做额外的工作。</li><li>如果频繁出现拆包问题，可以考虑调整发送的数据包大小，使其不超过网络的最大传输单元（MTU）。</li></ul><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p><strong>主要作用</strong>：</p><ol><li><strong>流量控制</strong>：滑动窗口使得接收方可以控制发送方发送数据的速度，从而避免因发送速度过快而导致接收方无法及时处理数据。</li><li><strong>提高带宽利用率</strong>：通过动态调整窗口大小，可以根据网络状况和接收方的能力最大化带宽的使用效率。</li><li><strong>减少数据重传</strong>：通过有效的流量控制，减少因接收方缓冲区满而造成的丢包，从而减少不必要的数据重传。</li><li><strong>改善延迟和吞吐量</strong>：滑动窗口机制有助于平衡延迟和吞吐量之间的关系，使得在网络条件变化时仍能保持较好的性能。</li></ol><p><strong>工作原理</strong>：</p><p>滑动窗口的核心思想是维护一个滑动的窗口范围，发送方和接收方通过TCP报文中的序号和确认号来协商这个窗口的大小和位置。</p><ul><li><strong>窗口大小</strong>：TCP头部中的“窗口大小”字段指明了接收方希望接收的数据量，即接收方缓冲区还能接受多少字节的数据。</li><li><strong>序号和确认号</strong>：TCP报文中的序号用来标识数据的第一个字节的编号，而确认号则是指接收方期望接收的下一个字节的序号。</li><li><strong>发送方的行为</strong>：发送方根据接收方提供的窗口大小发送数据，并且不能超出这个窗口的范围。一旦发送的数据达到了窗口的上限，发送方就需要等待接收方的确认或窗口更新后再继续发送。</li><li><strong>接收方的行为</strong>：接收方接收到数据后，会根据接收到的数据量更新窗口大小，并通过ACK（确认）报文告诉发送方最新的窗口大小。</li></ul><h2 id="拥塞控制的步骤"><a href="#拥塞控制的步骤" class="headerlink" title="拥塞控制的步骤"></a>拥塞控制的步骤</h2><p>TCP拥塞控制是为了防止过多的数据注入到网络中，从而引起网络拥塞的一种机制。TCP拥塞控制主要包括以下几个步骤或阶段：</p><p><strong>1）慢启动（Slow Start）</strong></p><p>慢启动阶段的目标是迅速增大拥塞窗口（Congestion Window, cwnd），同时避免过多地增加网络负载。在这个阶段，发送方会逐步增加发送的分组数量，直到达到某个阈值（ssthresh，slow start threshold）。</p><ul><li><strong>初始状态</strong>：当一个新的TCP连接建立时，或者网络中发生严重拥塞后重新开始传输时，cwnd通常被初始化为一个MSS（最大段大小）。</li><li><strong>指数增长</strong>：每经过一个往返时间（Round Trip Time, RTT），cwnd就会翻倍。也就是说，发送方每次接收到一个ACK都会增加一个MSS的发送量。</li></ul><p><strong>2）拥塞避免（Congestion Avoidance）</strong></p><p>当cwnd达到ssthresh时，进入拥塞避免阶段。这个阶段的目的是更加平缓地增加cwnd，以避免网络拥塞。</p><ul><li><strong>线性增长</strong>：每经过一个RTT，cwnd增加一个MSS的大小。也就是说，发送方每次接收到一个ACK时，并不会像慢启动那样翻倍增加，而是按部就班地增加。</li><li><strong>目标</strong>：逐步增大cwnd，同时监控网络状况，避免拥塞。</li></ul><p><strong>3）快重传（Fast Retransmit）</strong></p><p>快重传是一种加速重传丢失分组的机制。它允许发送方在没有等到重传计时器到期的情况下就重传丢失的数据。</p><ul><li><strong>触发条件</strong>：当发送方收到三个重复的ACK（意味着接收方已经接收到后面的分组，但中间的一个或几个分组丢失了），它就会立即重传丢失的分组，而不是等待计时器超时。</li><li><strong>结果</strong>：这可以更快地恢复丢失的数据，减少传输延迟。</li></ul><p><strong>4）快恢复（Fast Recovery）</strong></p><p>快恢复是在快重传之后的一个阶段，其目的是快速恢复到正常传输状态。</p><ul><li><strong>降低阈值</strong>：当快重传触发时，ssthresh会被减半（通常是设置为当前cwnd的一半），然后cwnd设置为ssthresh。</li><li><strong>试探性增长</strong>：随后，发送方试探性地增大cwnd。每收到一个丢失分组的ACK，cwnd增加一个MSS。如果接收到足够多的ACK，则认为网络状况良好，可以回到拥塞避免阶段。</li></ul><h2 id="Token、Session、Cookie"><a href="#Token、Session、Cookie" class="headerlink" title="Token、Session、Cookie"></a>Token、Session、Cookie</h2><p>都用于维护<strong>客户端</strong>和<strong>服务器</strong>之间<strong>用户认证和会话管理</strong>，其区别如下： </p><p><strong>Cookie</strong></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>简单易实现：存储在客户端（静态文件、数据库查询结果）</td><td>安全风险：有被串改风险</td></tr><tr><td>本地缓存：读取速度快，不占用服务器存储</td><td>容量限制：4KB</td></tr><tr><td></td><td>可用限制：用户可能禁用</td></tr></tbody></table><p><strong>Session</strong></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>安全性高：存储在服务器端，不容易被恶意篡改和伪造</td><td>占用服务器资源</td></tr><tr><td>容量大：可以保存对象、大量的数据</td><td>扩展性差（分布式集群）</td></tr><tr><td></td><td>依然需要依赖cookie跨域限制</td></tr></tbody></table><blockquote><h1 id="Session怎么提高效率？"><a href="#Session怎么提高效率？" class="headerlink" title="Session怎么提高效率？"></a>Session怎么提高效率？</h1><p><strong>Session持久化</strong>：将session信息存储在持久化存储中，如数据库、文件系统或NoSQL存储中，这样可以避免将所有session信息存储在内存中，从而减少内存的使用量。</p><p><strong>Session复制</strong>：将session信息从一台服务器复制到另一台服务器上，这样可以实现负载均衡，并将会话信息在多个服务器之间共享。 </p><p><strong>Session失效策略</strong>：设置合理的session失效策略，例如根据用户活动时间、最大不活动时间等来决定session的失效时间，可以减少无用的session信息。</p><p><strong>集群</strong>：使用集群环境来分散请求和负载，这样可以使应用程序在多个服务器上运行，从而提高应用程序的性能和可扩展性。</p><p>总之，为了提高会话管理的效率，需要使用合理的持久化和集群技术，并设置合理的会话失效策略，以避免会话信息的无限增长。</p></blockquote><p><strong>Token</strong></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>无状态性：服务器无需存储，提升可扩展性和性能</td><td>存储安全：客户端丢失或泄露Token可能导致安全问题</td></tr><tr><td>安全性：通过签名保证数据的完整性和来源的可靠性</td><td>传输负载：Token较多信息，会增加HTTP请求的大小</td></tr><tr><td>自包含性：Token自身包含用户信息和过期时间等，减少对服务器的查询</td><td></td></tr></tbody></table><h2 id="JWT-Token"><a href="#JWT-Token" class="headerlink" title="JWT Token"></a>JWT Token</h2><h2 id="JWT-的组成"><a href="#JWT-的组成" class="headerlink" title="JWT 的组成"></a>JWT 的组成</h2><p>JWT 由三部分组成，每一部分由点号（<code>.</code>）分隔：</p><ol><li><strong>Header（头部）</strong></li><li><strong>Payload（载荷）</strong></li><li><strong>Signature（签名）</strong></li></ol><p><strong>Header（头部）</strong>：头部包含关于 JWT 的元数据，通常是一个 JSON 对象，编码为 Base64URL 字符串。头部包含的信息可能包括使用的签名算法（如 HMAC 使用 SHA-256 或 RSA 使用 SHA-256）以及令牌类型（通常是 “JWT”）。示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Payload（载荷）</strong>：载荷是存储 JWT 数据的地方。这也是一个 JSON 对象，编码为 Base64URL 字符串。载荷包含了一系列声明（Claims），声明可以是标准的也可以是自定义的。一些常用的声明包括 <code>iss</code>（发行者）、<code>exp</code>（过期时间）、<code>sub</code>（主题）等。例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1516239022</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Signature（签名）</strong>：签名部分是用来验证 JWT 的发送方确实是谁他们声称是的人，并且确保载荷没有被篡改。为了创建签名，需要使用 Header 中指定的算法（如 HMAC 使用 SHA-256）对 Header 和 Payload 进行加密，并加上一个密钥（Secret）。密钥通常是只有发行者和接收者知道的秘密。接收方通过使用相同的密钥和算法解密签名，来验证令牌的真实性。示例签名：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure><h2 id="JWT-的优点"><a href="#JWT-的优点" class="headerlink" title="JWT 的优点"></a>JWT 的优点</h2><ol><li><strong>无状态</strong>：JWT 是自包含的，因此不需要在服务器上保存会话状态，这使得 JWT 成为构建无状态、可扩展的应用程序的理想选择。</li><li><strong>易于跨域使用</strong>：由于 JWT 可以通过 HTTP header 或者 POST 参数携带，所以非常适合跨域资源共享（CORS）。</li><li><strong>轻量级</strong>：JWT 是紧凑的，可以减少网络传输的开销。</li></ol><h2 id="JWT-的局限性"><a href="#JWT-的局限性" class="headerlink" title="JWT 的局限性"></a>JWT 的局限性</h2><ol><li><strong>过期管理</strong>：JWT 一旦签发，就不能撤销。如果令牌被盗或滥用，唯一的办法是让它过期或者在服务器端维护一个黑名单列表。</li><li><strong>安全性依赖于密钥管理</strong>：JWT 的安全性依赖于密钥的安全性。如果密钥泄露，任何人都可以伪造 JWT。</li></ol><h2 id="JWT-的使用场景"><a href="#JWT-的使用场景" class="headerlink" title="JWT 的使用场景"></a>JWT 的使用场景</h2><p>JWT 通常用于身份验证和授权。在用户登录成功后，服务器会生成一个 JWT 并返回给客户端。客户端在后续的请求中将 JWT 放入 HTTP header（通常是 <code>Authorization</code> 头），这样服务器就可以验证用户的权限。</p><p>总的来说，JWT 是一种强大的工具，可以帮助开发者构建安全、高效的应用程序，特别是在微服务架构和分布式系统中。然而，使用 JWT 也需要谨慎处理安全性和过期管理等问题。</p><h2 id="从输入-URL-到页面展示到底发生了什么？"><a href="#从输入-URL-到页面展示到底发生了什么？" class="headerlink" title="从输入 URL 到页面展示到底发生了什么？"></a>从输入 URL 到页面展示到底发生了什么？</h2><p>总体来说分为以下几个步骤:</p><ol><li><strong>用户输入网址</strong>：在浏览器中输入指定网页的 URL。</li><li><strong>DNS 解析</strong>：浏览器通过 DNS 协议，获取域名对应的 IP 地址。</li><li><strong>建立 TCP 连接</strong>：浏览器根据 IP 地址和端口号，向目标服务器发起一个 TCP 连接请求。</li><li><strong>建立 SSL&#x2F;TLS 加密连接</strong>：如果网站使用 HTTPS 协议，那么双方要交换密钥，建立会话密钥，使用密钥进行加密通信。</li><li><strong>发送 HTTP 请求</strong>：浏览器在 TCP 连接上，向服务器发送一个 HTTP 请求报文，请求获取网页的内容。</li><li><strong>服务器处理请求并响应</strong>：服务器收到 HTTP 请求报文后，处理请求，并返回 HTTP 响应报文给浏览器。</li><li><strong>浏览器解析响应</strong>：浏览器收到 HTTP 响应报文后，解析响应体中的 HTML 代码，渲染网页的结构和样式，同时根据 HTML 中的其他资源的 URL（如图片、CSS、JS 等），再次发起 HTTP 请求，获取这些资源的内容，直到网页完全加载显示。</li><li><strong>中断连接</strong>：浏览器在不需要和服务器通信时，可以主动关闭 TCP 连接，或者等待服务器的关闭请求。</li></ol><img src="https://oss.javaguide.cn/github/javaguide/url%E8%BE%93%E5%85%A5%E5%88%B0%E5%B1%95%E7%A4%BA%E5%87%BA%E6%9D%A5%E7%9A%84%E8%BF%87%E7%A8%8B.jpg" alt="img" style="zoom:60%;" /><h2 id="HTTP-协议中-GET-和-POST-的区别"><a href="#HTTP-协议中-GET-和-POST-的区别" class="headerlink" title="HTTP 协议中 GET 和 POST 的区别"></a>HTTP 协议中 GET 和 POST 的区别</h2><ul><li><strong>GET</strong>：请求参数在 URL 中，用于获取数据。</li><li><strong>POST</strong>：请求参数在请求体中，用于修改数据。</li></ul>]]></content>
    
    
    <summary type="html">Java, all in one！</summary>
    
    
    
    <category term="学习" scheme="https://01petard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://01petard.github.io/tags/Java/"/>
    
    <category term="计算机基础" scheme="https://01petard.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>mrk3399开发板折腾记录</title>
    <link href="https://01petard.github.io/2024/10/13/mrk3399%E5%BC%80%E5%8F%91%E6%9D%BF%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    <id>https://01petard.github.io/2024/10/13/mrk3399%E5%BC%80%E5%8F%91%E6%9D%BF%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/</id>
    <published>2024-10-12T16:41:00.000Z</published>
    <updated>2024-10-12T16:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在网上发现这玩意儿只要99元，竟然可以做到4+32，还板载emmc！</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410130030999.png" alt="image-20241013003058715" style="zoom: 25%;" /><p>这么良心必须冲一波了，然后我根据网上的教程装好了armbian，安装过程也是比较顺利。</p><p>这块板子唯一的问题是，供电口需要用2pin的p好h2.0-2p口，那个C口需要短接才能供电，另外几乎没有接口，不过这样挺适合我的。另外就是全网都没有这块板子的资料。。。</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410130033507.png" alt="image-202410130033507" style="zoom:30%;" /><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410130031533.png" alt="image-20241013003133144" style="zoom:40%;" /><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410130031558.png" alt="image-20241013003142171" style="zoom: 40%;" /><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410130031516.png" alt="image-20241013003155204" style="zoom:40%;" /><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410130036090.png" style="zoom: 67%;" /><p>ok，那么至此就结束了，后面就可以安心玩板子了！</p>]]></content>
    
    
    <summary type="html">mrk3399_kj_v00</summary>
    
    
    
    <category term="学习" scheme="https://01petard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="硬件" scheme="https://01petard.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
    <category term="mrk3399" scheme="https://01petard.github.io/tags/mrk3399/"/>
    
  </entry>
  
  <entry>
    <title>树莓派折腾记录</title>
    <link href="https://01petard.github.io/2024/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    <id>https://01petard.github.io/2024/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/</id>
    <published>2024-10-08T14:22:00.000Z</published>
    <updated>2024-10-08T14:22:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="修改树莓派2的包镜像"><a href="#修改树莓派2的包镜像" class="headerlink" title="修改树莓派2的包镜像"></a>修改树莓派2的包镜像</h1><p>1、打开配置sources.list文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>2、用#注释掉原文件内容，用以下内容取代（Ctrl + O 保存再 Ctrl + X 退出）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br></pre></td></tr></table></figure><p>3、打开配置raspi.list文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list.d/raspi.list</span><br></pre></td></tr></table></figure><p>4、用#注释掉原文件内容，用以下内容取代（Ctrl + O 保存再 Ctrl + X 退出）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui</span><br><span class="line">deb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui</span><br></pre></td></tr></table></figure><p>5、编辑镜像站后，使用命令更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h1 id="修改树莓派3及以后的包镜像"><a href="#修改树莓派3及以后的包镜像" class="headerlink" title="修改树莓派3及以后的包镜像"></a>修改树莓派3及以后的包镜像</h1><blockquote><p>参考网址：<a href="https://www.bilibili.com/video/BV1aw4m1v7fW/?spm_id_from=333.788.videopod.episodes&vd_source=3ff954868f64ecb51872efabed3a44ca&p=5">【记录】5.树莓派5下载源更换成阿里云服务器_哔哩哔哩_bilibili</a></p></blockquote><p>1、打开配置sources.list文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>2、修改来源，改为aliyun</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deb.debian.org</span><br><span class="line">改为</span><br><span class="line">mirrors.aliyun.com</span><br></pre></td></tr></table></figure><p>3、编辑镜像站后，使用命令更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h1 id="正确显示中文"><a href="#正确显示中文" class="headerlink" title="正确显示中文"></a>正确显示中文</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ttf-wqy-zenhei</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure><p>把光标移到Localisation Options上</p><p>翻到最下面的选项，勾上zh_CN,UTF-8</p><p>然后选择默认语言，选择zh_CN</p><p>设置完成之后，reboot重启就可以看到熟悉的中文了</p><h1 id="设置静态无线IP（有点小问题，用到再说）"><a href="#设置静态无线IP（有点小问题，用到再说）" class="headerlink" title="设置静态无线IP（有点小问题，用到再说）"></a><em>设置静态无线IP</em>（有点小问题，用到再说）</h1><blockquote><p><strong>如果用有线就不用那么麻烦了。</strong></p></blockquote><p>确认是否安装了 dhcpcd：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt list --installed | grep dhcpcd</span><br></pre></td></tr></table></figure><p>如果没有安装，可以使用以下命令安装它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install dhcpcd5</span><br></pre></td></tr></table></figure><p>启用 dhcpcd 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable dhcpcd</span><br><span class="line">sudo systemctl start dhcpcd</span><br></pre></td></tr></table></figure><p>检查是否使用了 NetworkManager：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status NetworkManager</span><br></pre></td></tr></table></figure><p>如果 <code>NetworkManager</code> 正在运行，可能它覆盖了 <code>dhcpcd</code> 的设置。你可以通过 <code>nmcli</code> 来设置静态IP，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli con show</span><br></pre></td></tr></table></figure><p>找到 <code>wlan0</code> 的连接名称，然后设置静态IP（假设连接名称是 <code>MyWifiConnection</code>）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo nmcli con mod preconfigured ipv4.addresses 192.168.124.21/24</span><br><span class="line">sudo nmcli con mod preconfigured ipv4.gateway 192.168.124.1</span><br><span class="line">sudo nmcli con mod preconfigured ipv4.method manual</span><br><span class="line">sudo nmcli con up preconfigured</span><br></pre></td></tr></table></figure><p>通过<code>ifconfig</code>查看网卡：</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410081435885.png" alt="image-20241008143532831" style="zoom:80%;" /><p>编辑文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/dhcpcd.conf</span><br></pre></td></tr></table></figure><p>添加配置项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">无线</span></span><br><span class="line">interface wlan0</span><br><span class="line">inform 192.168.124.22</span><br><span class="line">static routers=192.168.124.1</span><br><span class="line"></span><br><span class="line">interface wlan0</span><br><span class="line">static ip_address=192.168.124.22/24</span><br><span class="line">static routers=192.168.124.1</span><br><span class="line">static domain_name_servers=8.8.8.8 8.8.4.4</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">有线</span></span><br><span class="line">interface eth0</span><br><span class="line">inform 192.168.124.22</span><br><span class="line">static routers=192.168.124.1</span><br></pre></td></tr></table></figure><p>退出保存然后重启树莓派：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h1 id="树莓派安全关机"><a href="#树莓派安全关机" class="headerlink" title="树莓派安全关机"></a>树莓派安全关机</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdo</span><br></pre></td></tr></table></figure><h1 id="使用pi-sh脚本"><a href="#使用pi-sh脚本" class="headerlink" title="使用pi.sh脚本"></a>使用<code>pi.sh</code>脚本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x pi.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pi.sh proxy</span><br></pre></td></tr></table></figure><h1 id="安装1Panel"><a href="#安装1Panel" class="headerlink" title="安装1Panel"></a>安装1Panel</h1><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410221931289.png" alt="image-20241008182757340" style="zoom:80%;" /><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410241851074.png" alt="image-20241024185156976"  /><h2 id="脚本安装1panel"><a href="#脚本安装1panel" class="headerlink" title="脚本安装1panel"></a>脚本安装1panel</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sh quick_start.sh</span><br></pre></td></tr></table></figure><h2 id="配置docker加速"><a href="#配置docker加速" class="headerlink" title="配置docker加速"></a>配置docker加速</h2><p>在容器-&gt; 配置中设置，否则安装软件会失败。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">https://docker.211678.top</span><br><span class="line">https://docker.1panel.live</span><br><span class="line">https://hub.rat.dev</span><br><span class="line">https://docker.m.daocloud.io</span><br><span class="line">https://do.nark.eu.org</span><br><span class="line">https://dockerpull.com</span><br><span class="line">https://dockerproxy.cn</span><br><span class="line">https://docker.awsl9527.cn</span><br></pre></td></tr></table></figure><img src="https://i-blog.csdnimg.cn/direct/ea6f75d59c9e4b1d8dca6b762d1eccd8.png" alt="在这里插入图片描述" style="zoom:90%;" /><h1 id="安装Alist、小雅、小雅清理工具"><a href="#安装Alist、小雅、小雅清理工具" class="headerlink" title="安装Alist、小雅、小雅清理工具"></a>安装Alist、小雅、小雅清理工具</h1><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410081835085.png" alt="image-20241008183525056" style="zoom:80%;" /><p>根据如下三个网址的提示完成token的填写<br>阿里云盘Token（32位）：<a href="https://alist.nn.ci/zh/guide/drivers/aliyundrive.html">https://alist.nn.ci/zh/guide/drivers/aliyundrive.html</a></p><p>阿里云盘OpenToken(335位）：<a href="https://alist.nn.ci/tool/aliyundrive/request.html">https://alist.nn.ci/tool/aliyundrive/request.html</a></p><p>阿里云盘转存目录folderid：<a href="https://www.aliyundrive.com/s/rP9gP3h9asE">https://www.aliyundrive.com/s/rP9gP3h9asE</a></p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410081845667.png" alt="image-20241008184537599" style="zoom:67%;" /><h1 id="安装内网穿透"><a href="#安装内网穿透" class="headerlink" title="安装内网穿透"></a>安装内网穿透</h1><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410081930798.png" style="zoom:80%;" /><p>成功，但有效期只有24小时，够用了</p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202410081939485.png" style="zoom:50%;" />]]></content>
    
    
    <summary type="html">装个小雅影音库，美滋滋！</summary>
    
    
    
    <category term="学习" scheme="https://01petard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="硬件" scheme="https://01petard.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
    <category term="树莓派" scheme="https://01petard.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>2024年9月记录</title>
    <link href="https://01petard.github.io/2024/09/22/2024%E5%B9%B49%E6%9C%88%E8%AE%B0%E5%BD%95/"/>
    <id>https://01petard.github.io/2024/09/22/2024%E5%B9%B49%E6%9C%88%E8%AE%B0%E5%BD%95/</id>
    <published>2024-09-22T14:41:00.000Z</published>
    <updated>2024-10-21T15:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>裂了，真的裂开了，为什么鼠鼠我投了150家了，都9月底才两三个面试，明明自己已经挺努力了，每天都在看八股，但终究敌不过一个921的文凭，唉。</p><p>不过好在目前自己的钱包鼓鼓的，很想疯狂消费，但是自己真的没有消费的欲望，唉，记录一下自己新买的键盘吧，希望热爱编程的你永远是少年！</p><p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409222240213.png" alt="image-20240922224027817"></p><p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409222240235.png" alt="image-20240922224040837"></p><p><img src="https://cdn.jsdelivr.net/gh/01Petard/imageURL@main/img/202409222240414.png" alt="image-20240922224052997"></p>]]></content>
    
    
    <summary type="html">秋招，加油！</summary>
    
    
    
    <category term="其他" scheme="https://01petard.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="研究生" scheme="https://01petard.github.io/tags/%E7%A0%94%E7%A9%B6%E7%94%9F/"/>
    
  </entry>
  
</feed>
